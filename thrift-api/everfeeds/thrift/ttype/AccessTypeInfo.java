/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package everfeeds.thrift.ttype;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class AccessTypeInfo implements org.apache.thrift.TBase<AccessTypeInfo, AccessTypeInfo._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AccessTypeInfo");

  private static final org.apache.thrift.protocol.TField ACCESS_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("accessType", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField IS_REMOTE_FIELD_DESC = new org.apache.thrift.protocol.TField("isRemote", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField WITH_ENTRIES_FIELD_DESC = new org.apache.thrift.protocol.TField("withEntries", org.apache.thrift.protocol.TType.BOOL, (short)3);
  private static final org.apache.thrift.protocol.TField WITH_FILES_FIELD_DESC = new org.apache.thrift.protocol.TField("withFiles", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField PULL_ENTRIES_FIELD_DESC = new org.apache.thrift.protocol.TField("pullEntries", org.apache.thrift.protocol.TType.BOOL, (short)10);
  private static final org.apache.thrift.protocol.TField PULL_FILES_FIELD_DESC = new org.apache.thrift.protocol.TField("pullFiles", org.apache.thrift.protocol.TType.BOOL, (short)11);
  private static final org.apache.thrift.protocol.TField PUSH_ENTRY_FIELD_DESC = new org.apache.thrift.protocol.TField("pushEntry", org.apache.thrift.protocol.TType.BOOL, (short)20);
  private static final org.apache.thrift.protocol.TField PUSH_CATEGORY_FIELD_DESC = new org.apache.thrift.protocol.TField("pushCategory", org.apache.thrift.protocol.TType.BOOL, (short)21);
  private static final org.apache.thrift.protocol.TField PUSH_TAG_FIELD_DESC = new org.apache.thrift.protocol.TField("pushTag", org.apache.thrift.protocol.TType.BOOL, (short)22);
  private static final org.apache.thrift.protocol.TField UPDATE_ENTRY_FIELD_DESC = new org.apache.thrift.protocol.TField("updateEntry", org.apache.thrift.protocol.TType.BOOL, (short)30);

  /**
   * 
   * @see everfeeds.thrift.ttype.AccessType
   */
  public AccessType accessType;
  public boolean isRemote;
  public boolean withEntries;
  public boolean withFiles;
  public boolean pullEntries;
  public boolean pullFiles;
  public boolean pushEntry;
  public boolean pushCategory;
  public boolean pushTag;
  public boolean updateEntry;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see everfeeds.thrift.ttype.AccessType
     */
    ACCESS_TYPE((short)1, "accessType"),
    IS_REMOTE((short)2, "isRemote"),
    WITH_ENTRIES((short)3, "withEntries"),
    WITH_FILES((short)4, "withFiles"),
    PULL_ENTRIES((short)10, "pullEntries"),
    PULL_FILES((short)11, "pullFiles"),
    PUSH_ENTRY((short)20, "pushEntry"),
    PUSH_CATEGORY((short)21, "pushCategory"),
    PUSH_TAG((short)22, "pushTag"),
    UPDATE_ENTRY((short)30, "updateEntry");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ACCESS_TYPE
          return ACCESS_TYPE;
        case 2: // IS_REMOTE
          return IS_REMOTE;
        case 3: // WITH_ENTRIES
          return WITH_ENTRIES;
        case 4: // WITH_FILES
          return WITH_FILES;
        case 10: // PULL_ENTRIES
          return PULL_ENTRIES;
        case 11: // PULL_FILES
          return PULL_FILES;
        case 20: // PUSH_ENTRY
          return PUSH_ENTRY;
        case 21: // PUSH_CATEGORY
          return PUSH_CATEGORY;
        case 22: // PUSH_TAG
          return PUSH_TAG;
        case 30: // UPDATE_ENTRY
          return UPDATE_ENTRY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ISREMOTE_ISSET_ID = 0;
  private static final int __WITHENTRIES_ISSET_ID = 1;
  private static final int __WITHFILES_ISSET_ID = 2;
  private static final int __PULLENTRIES_ISSET_ID = 3;
  private static final int __PULLFILES_ISSET_ID = 4;
  private static final int __PUSHENTRY_ISSET_ID = 5;
  private static final int __PUSHCATEGORY_ISSET_ID = 6;
  private static final int __PUSHTAG_ISSET_ID = 7;
  private static final int __UPDATEENTRY_ISSET_ID = 8;
  private BitSet __isset_bit_vector = new BitSet(9);

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ACCESS_TYPE, new org.apache.thrift.meta_data.FieldMetaData("accessType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, AccessType.class)));
    tmpMap.put(_Fields.IS_REMOTE, new org.apache.thrift.meta_data.FieldMetaData("isRemote", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.WITH_ENTRIES, new org.apache.thrift.meta_data.FieldMetaData("withEntries", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.WITH_FILES, new org.apache.thrift.meta_data.FieldMetaData("withFiles", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PULL_ENTRIES, new org.apache.thrift.meta_data.FieldMetaData("pullEntries", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PULL_FILES, new org.apache.thrift.meta_data.FieldMetaData("pullFiles", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PUSH_ENTRY, new org.apache.thrift.meta_data.FieldMetaData("pushEntry", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PUSH_CATEGORY, new org.apache.thrift.meta_data.FieldMetaData("pushCategory", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PUSH_TAG, new org.apache.thrift.meta_data.FieldMetaData("pushTag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.UPDATE_ENTRY, new org.apache.thrift.meta_data.FieldMetaData("updateEntry", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AccessTypeInfo.class, metaDataMap);
  }

  public AccessTypeInfo() {
  }

  public AccessTypeInfo(
    AccessType accessType,
    boolean isRemote,
    boolean withEntries,
    boolean withFiles,
    boolean pullEntries,
    boolean pullFiles,
    boolean pushEntry,
    boolean pushCategory,
    boolean pushTag,
    boolean updateEntry)
  {
    this();
    this.accessType = accessType;
    this.isRemote = isRemote;
    setIsRemoteIsSet(true);
    this.withEntries = withEntries;
    setWithEntriesIsSet(true);
    this.withFiles = withFiles;
    setWithFilesIsSet(true);
    this.pullEntries = pullEntries;
    setPullEntriesIsSet(true);
    this.pullFiles = pullFiles;
    setPullFilesIsSet(true);
    this.pushEntry = pushEntry;
    setPushEntryIsSet(true);
    this.pushCategory = pushCategory;
    setPushCategoryIsSet(true);
    this.pushTag = pushTag;
    setPushTagIsSet(true);
    this.updateEntry = updateEntry;
    setUpdateEntryIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AccessTypeInfo(AccessTypeInfo other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetAccessType()) {
      this.accessType = other.accessType;
    }
    this.isRemote = other.isRemote;
    this.withEntries = other.withEntries;
    this.withFiles = other.withFiles;
    this.pullEntries = other.pullEntries;
    this.pullFiles = other.pullFiles;
    this.pushEntry = other.pushEntry;
    this.pushCategory = other.pushCategory;
    this.pushTag = other.pushTag;
    this.updateEntry = other.updateEntry;
  }

  public AccessTypeInfo deepCopy() {
    return new AccessTypeInfo(this);
  }

  @Override
  public void clear() {
    this.accessType = null;
    setIsRemoteIsSet(false);
    this.isRemote = false;
    setWithEntriesIsSet(false);
    this.withEntries = false;
    setWithFilesIsSet(false);
    this.withFiles = false;
    setPullEntriesIsSet(false);
    this.pullEntries = false;
    setPullFilesIsSet(false);
    this.pullFiles = false;
    setPushEntryIsSet(false);
    this.pushEntry = false;
    setPushCategoryIsSet(false);
    this.pushCategory = false;
    setPushTagIsSet(false);
    this.pushTag = false;
    setUpdateEntryIsSet(false);
    this.updateEntry = false;
  }

  /**
   * 
   * @see everfeeds.thrift.ttype.AccessType
   */
  public AccessType getAccessType() {
    return this.accessType;
  }

  /**
   * 
   * @see everfeeds.thrift.ttype.AccessType
   */
  public AccessTypeInfo setAccessType(AccessType accessType) {
    this.accessType = accessType;
    return this;
  }

  public void unsetAccessType() {
    this.accessType = null;
  }

  /** Returns true if field accessType is set (has been assigned a value) and false otherwise */
  public boolean isSetAccessType() {
    return this.accessType != null;
  }

  public void setAccessTypeIsSet(boolean value) {
    if (!value) {
      this.accessType = null;
    }
  }

  public boolean isIsRemote() {
    return this.isRemote;
  }

  public AccessTypeInfo setIsRemote(boolean isRemote) {
    this.isRemote = isRemote;
    setIsRemoteIsSet(true);
    return this;
  }

  public void unsetIsRemote() {
    __isset_bit_vector.clear(__ISREMOTE_ISSET_ID);
  }

  /** Returns true if field isRemote is set (has been assigned a value) and false otherwise */
  public boolean isSetIsRemote() {
    return __isset_bit_vector.get(__ISREMOTE_ISSET_ID);
  }

  public void setIsRemoteIsSet(boolean value) {
    __isset_bit_vector.set(__ISREMOTE_ISSET_ID, value);
  }

  public boolean isWithEntries() {
    return this.withEntries;
  }

  public AccessTypeInfo setWithEntries(boolean withEntries) {
    this.withEntries = withEntries;
    setWithEntriesIsSet(true);
    return this;
  }

  public void unsetWithEntries() {
    __isset_bit_vector.clear(__WITHENTRIES_ISSET_ID);
  }

  /** Returns true if field withEntries is set (has been assigned a value) and false otherwise */
  public boolean isSetWithEntries() {
    return __isset_bit_vector.get(__WITHENTRIES_ISSET_ID);
  }

  public void setWithEntriesIsSet(boolean value) {
    __isset_bit_vector.set(__WITHENTRIES_ISSET_ID, value);
  }

  public boolean isWithFiles() {
    return this.withFiles;
  }

  public AccessTypeInfo setWithFiles(boolean withFiles) {
    this.withFiles = withFiles;
    setWithFilesIsSet(true);
    return this;
  }

  public void unsetWithFiles() {
    __isset_bit_vector.clear(__WITHFILES_ISSET_ID);
  }

  /** Returns true if field withFiles is set (has been assigned a value) and false otherwise */
  public boolean isSetWithFiles() {
    return __isset_bit_vector.get(__WITHFILES_ISSET_ID);
  }

  public void setWithFilesIsSet(boolean value) {
    __isset_bit_vector.set(__WITHFILES_ISSET_ID, value);
  }

  public boolean isPullEntries() {
    return this.pullEntries;
  }

  public AccessTypeInfo setPullEntries(boolean pullEntries) {
    this.pullEntries = pullEntries;
    setPullEntriesIsSet(true);
    return this;
  }

  public void unsetPullEntries() {
    __isset_bit_vector.clear(__PULLENTRIES_ISSET_ID);
  }

  /** Returns true if field pullEntries is set (has been assigned a value) and false otherwise */
  public boolean isSetPullEntries() {
    return __isset_bit_vector.get(__PULLENTRIES_ISSET_ID);
  }

  public void setPullEntriesIsSet(boolean value) {
    __isset_bit_vector.set(__PULLENTRIES_ISSET_ID, value);
  }

  public boolean isPullFiles() {
    return this.pullFiles;
  }

  public AccessTypeInfo setPullFiles(boolean pullFiles) {
    this.pullFiles = pullFiles;
    setPullFilesIsSet(true);
    return this;
  }

  public void unsetPullFiles() {
    __isset_bit_vector.clear(__PULLFILES_ISSET_ID);
  }

  /** Returns true if field pullFiles is set (has been assigned a value) and false otherwise */
  public boolean isSetPullFiles() {
    return __isset_bit_vector.get(__PULLFILES_ISSET_ID);
  }

  public void setPullFilesIsSet(boolean value) {
    __isset_bit_vector.set(__PULLFILES_ISSET_ID, value);
  }

  public boolean isPushEntry() {
    return this.pushEntry;
  }

  public AccessTypeInfo setPushEntry(boolean pushEntry) {
    this.pushEntry = pushEntry;
    setPushEntryIsSet(true);
    return this;
  }

  public void unsetPushEntry() {
    __isset_bit_vector.clear(__PUSHENTRY_ISSET_ID);
  }

  /** Returns true if field pushEntry is set (has been assigned a value) and false otherwise */
  public boolean isSetPushEntry() {
    return __isset_bit_vector.get(__PUSHENTRY_ISSET_ID);
  }

  public void setPushEntryIsSet(boolean value) {
    __isset_bit_vector.set(__PUSHENTRY_ISSET_ID, value);
  }

  public boolean isPushCategory() {
    return this.pushCategory;
  }

  public AccessTypeInfo setPushCategory(boolean pushCategory) {
    this.pushCategory = pushCategory;
    setPushCategoryIsSet(true);
    return this;
  }

  public void unsetPushCategory() {
    __isset_bit_vector.clear(__PUSHCATEGORY_ISSET_ID);
  }

  /** Returns true if field pushCategory is set (has been assigned a value) and false otherwise */
  public boolean isSetPushCategory() {
    return __isset_bit_vector.get(__PUSHCATEGORY_ISSET_ID);
  }

  public void setPushCategoryIsSet(boolean value) {
    __isset_bit_vector.set(__PUSHCATEGORY_ISSET_ID, value);
  }

  public boolean isPushTag() {
    return this.pushTag;
  }

  public AccessTypeInfo setPushTag(boolean pushTag) {
    this.pushTag = pushTag;
    setPushTagIsSet(true);
    return this;
  }

  public void unsetPushTag() {
    __isset_bit_vector.clear(__PUSHTAG_ISSET_ID);
  }

  /** Returns true if field pushTag is set (has been assigned a value) and false otherwise */
  public boolean isSetPushTag() {
    return __isset_bit_vector.get(__PUSHTAG_ISSET_ID);
  }

  public void setPushTagIsSet(boolean value) {
    __isset_bit_vector.set(__PUSHTAG_ISSET_ID, value);
  }

  public boolean isUpdateEntry() {
    return this.updateEntry;
  }

  public AccessTypeInfo setUpdateEntry(boolean updateEntry) {
    this.updateEntry = updateEntry;
    setUpdateEntryIsSet(true);
    return this;
  }

  public void unsetUpdateEntry() {
    __isset_bit_vector.clear(__UPDATEENTRY_ISSET_ID);
  }

  /** Returns true if field updateEntry is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateEntry() {
    return __isset_bit_vector.get(__UPDATEENTRY_ISSET_ID);
  }

  public void setUpdateEntryIsSet(boolean value) {
    __isset_bit_vector.set(__UPDATEENTRY_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ACCESS_TYPE:
      if (value == null) {
        unsetAccessType();
      } else {
        setAccessType((AccessType)value);
      }
      break;

    case IS_REMOTE:
      if (value == null) {
        unsetIsRemote();
      } else {
        setIsRemote((Boolean)value);
      }
      break;

    case WITH_ENTRIES:
      if (value == null) {
        unsetWithEntries();
      } else {
        setWithEntries((Boolean)value);
      }
      break;

    case WITH_FILES:
      if (value == null) {
        unsetWithFiles();
      } else {
        setWithFiles((Boolean)value);
      }
      break;

    case PULL_ENTRIES:
      if (value == null) {
        unsetPullEntries();
      } else {
        setPullEntries((Boolean)value);
      }
      break;

    case PULL_FILES:
      if (value == null) {
        unsetPullFiles();
      } else {
        setPullFiles((Boolean)value);
      }
      break;

    case PUSH_ENTRY:
      if (value == null) {
        unsetPushEntry();
      } else {
        setPushEntry((Boolean)value);
      }
      break;

    case PUSH_CATEGORY:
      if (value == null) {
        unsetPushCategory();
      } else {
        setPushCategory((Boolean)value);
      }
      break;

    case PUSH_TAG:
      if (value == null) {
        unsetPushTag();
      } else {
        setPushTag((Boolean)value);
      }
      break;

    case UPDATE_ENTRY:
      if (value == null) {
        unsetUpdateEntry();
      } else {
        setUpdateEntry((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ACCESS_TYPE:
      return getAccessType();

    case IS_REMOTE:
      return new Boolean(isIsRemote());

    case WITH_ENTRIES:
      return new Boolean(isWithEntries());

    case WITH_FILES:
      return new Boolean(isWithFiles());

    case PULL_ENTRIES:
      return new Boolean(isPullEntries());

    case PULL_FILES:
      return new Boolean(isPullFiles());

    case PUSH_ENTRY:
      return new Boolean(isPushEntry());

    case PUSH_CATEGORY:
      return new Boolean(isPushCategory());

    case PUSH_TAG:
      return new Boolean(isPushTag());

    case UPDATE_ENTRY:
      return new Boolean(isUpdateEntry());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ACCESS_TYPE:
      return isSetAccessType();
    case IS_REMOTE:
      return isSetIsRemote();
    case WITH_ENTRIES:
      return isSetWithEntries();
    case WITH_FILES:
      return isSetWithFiles();
    case PULL_ENTRIES:
      return isSetPullEntries();
    case PULL_FILES:
      return isSetPullFiles();
    case PUSH_ENTRY:
      return isSetPushEntry();
    case PUSH_CATEGORY:
      return isSetPushCategory();
    case PUSH_TAG:
      return isSetPushTag();
    case UPDATE_ENTRY:
      return isSetUpdateEntry();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AccessTypeInfo)
      return this.equals((AccessTypeInfo)that);
    return false;
  }

  public boolean equals(AccessTypeInfo that) {
    if (that == null)
      return false;

    boolean this_present_accessType = true && this.isSetAccessType();
    boolean that_present_accessType = true && that.isSetAccessType();
    if (this_present_accessType || that_present_accessType) {
      if (!(this_present_accessType && that_present_accessType))
        return false;
      if (!this.accessType.equals(that.accessType))
        return false;
    }

    boolean this_present_isRemote = true;
    boolean that_present_isRemote = true;
    if (this_present_isRemote || that_present_isRemote) {
      if (!(this_present_isRemote && that_present_isRemote))
        return false;
      if (this.isRemote != that.isRemote)
        return false;
    }

    boolean this_present_withEntries = true;
    boolean that_present_withEntries = true;
    if (this_present_withEntries || that_present_withEntries) {
      if (!(this_present_withEntries && that_present_withEntries))
        return false;
      if (this.withEntries != that.withEntries)
        return false;
    }

    boolean this_present_withFiles = true;
    boolean that_present_withFiles = true;
    if (this_present_withFiles || that_present_withFiles) {
      if (!(this_present_withFiles && that_present_withFiles))
        return false;
      if (this.withFiles != that.withFiles)
        return false;
    }

    boolean this_present_pullEntries = true;
    boolean that_present_pullEntries = true;
    if (this_present_pullEntries || that_present_pullEntries) {
      if (!(this_present_pullEntries && that_present_pullEntries))
        return false;
      if (this.pullEntries != that.pullEntries)
        return false;
    }

    boolean this_present_pullFiles = true;
    boolean that_present_pullFiles = true;
    if (this_present_pullFiles || that_present_pullFiles) {
      if (!(this_present_pullFiles && that_present_pullFiles))
        return false;
      if (this.pullFiles != that.pullFiles)
        return false;
    }

    boolean this_present_pushEntry = true;
    boolean that_present_pushEntry = true;
    if (this_present_pushEntry || that_present_pushEntry) {
      if (!(this_present_pushEntry && that_present_pushEntry))
        return false;
      if (this.pushEntry != that.pushEntry)
        return false;
    }

    boolean this_present_pushCategory = true;
    boolean that_present_pushCategory = true;
    if (this_present_pushCategory || that_present_pushCategory) {
      if (!(this_present_pushCategory && that_present_pushCategory))
        return false;
      if (this.pushCategory != that.pushCategory)
        return false;
    }

    boolean this_present_pushTag = true;
    boolean that_present_pushTag = true;
    if (this_present_pushTag || that_present_pushTag) {
      if (!(this_present_pushTag && that_present_pushTag))
        return false;
      if (this.pushTag != that.pushTag)
        return false;
    }

    boolean this_present_updateEntry = true;
    boolean that_present_updateEntry = true;
    if (this_present_updateEntry || that_present_updateEntry) {
      if (!(this_present_updateEntry && that_present_updateEntry))
        return false;
      if (this.updateEntry != that.updateEntry)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(AccessTypeInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    AccessTypeInfo typedOther = (AccessTypeInfo)other;

    lastComparison = Boolean.valueOf(isSetAccessType()).compareTo(typedOther.isSetAccessType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccessType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accessType, typedOther.accessType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsRemote()).compareTo(typedOther.isSetIsRemote());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsRemote()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isRemote, typedOther.isRemote);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWithEntries()).compareTo(typedOther.isSetWithEntries());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWithEntries()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.withEntries, typedOther.withEntries);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWithFiles()).compareTo(typedOther.isSetWithFiles());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWithFiles()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.withFiles, typedOther.withFiles);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPullEntries()).compareTo(typedOther.isSetPullEntries());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPullEntries()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pullEntries, typedOther.pullEntries);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPullFiles()).compareTo(typedOther.isSetPullFiles());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPullFiles()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pullFiles, typedOther.pullFiles);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPushEntry()).compareTo(typedOther.isSetPushEntry());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPushEntry()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pushEntry, typedOther.pushEntry);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPushCategory()).compareTo(typedOther.isSetPushCategory());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPushCategory()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pushCategory, typedOther.pushCategory);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPushTag()).compareTo(typedOther.isSetPushTag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPushTag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pushTag, typedOther.pushTag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateEntry()).compareTo(typedOther.isSetUpdateEntry());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateEntry()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateEntry, typedOther.updateEntry);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // ACCESS_TYPE
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.accessType = AccessType.findByValue(iprot.readI32());
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // IS_REMOTE
          if (field.type == org.apache.thrift.protocol.TType.BOOL) {
            this.isRemote = iprot.readBool();
            setIsRemoteIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // WITH_ENTRIES
          if (field.type == org.apache.thrift.protocol.TType.BOOL) {
            this.withEntries = iprot.readBool();
            setWithEntriesIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // WITH_FILES
          if (field.type == org.apache.thrift.protocol.TType.BOOL) {
            this.withFiles = iprot.readBool();
            setWithFilesIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 10: // PULL_ENTRIES
          if (field.type == org.apache.thrift.protocol.TType.BOOL) {
            this.pullEntries = iprot.readBool();
            setPullEntriesIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 11: // PULL_FILES
          if (field.type == org.apache.thrift.protocol.TType.BOOL) {
            this.pullFiles = iprot.readBool();
            setPullFilesIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 20: // PUSH_ENTRY
          if (field.type == org.apache.thrift.protocol.TType.BOOL) {
            this.pushEntry = iprot.readBool();
            setPushEntryIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 21: // PUSH_CATEGORY
          if (field.type == org.apache.thrift.protocol.TType.BOOL) {
            this.pushCategory = iprot.readBool();
            setPushCategoryIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 22: // PUSH_TAG
          if (field.type == org.apache.thrift.protocol.TType.BOOL) {
            this.pushTag = iprot.readBool();
            setPushTagIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 30: // UPDATE_ENTRY
          if (field.type == org.apache.thrift.protocol.TType.BOOL) {
            this.updateEntry = iprot.readBool();
            setUpdateEntryIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.accessType != null) {
      oprot.writeFieldBegin(ACCESS_TYPE_FIELD_DESC);
      oprot.writeI32(this.accessType.getValue());
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(IS_REMOTE_FIELD_DESC);
    oprot.writeBool(this.isRemote);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(WITH_ENTRIES_FIELD_DESC);
    oprot.writeBool(this.withEntries);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(WITH_FILES_FIELD_DESC);
    oprot.writeBool(this.withFiles);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(PULL_ENTRIES_FIELD_DESC);
    oprot.writeBool(this.pullEntries);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(PULL_FILES_FIELD_DESC);
    oprot.writeBool(this.pullFiles);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(PUSH_ENTRY_FIELD_DESC);
    oprot.writeBool(this.pushEntry);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(PUSH_CATEGORY_FIELD_DESC);
    oprot.writeBool(this.pushCategory);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(PUSH_TAG_FIELD_DESC);
    oprot.writeBool(this.pushTag);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(UPDATE_ENTRY_FIELD_DESC);
    oprot.writeBool(this.updateEntry);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("AccessTypeInfo(");
    boolean first = true;

    sb.append("accessType:");
    if (this.accessType == null) {
      sb.append("null");
    } else {
      sb.append(this.accessType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isRemote:");
    sb.append(this.isRemote);
    first = false;
    if (!first) sb.append(", ");
    sb.append("withEntries:");
    sb.append(this.withEntries);
    first = false;
    if (!first) sb.append(", ");
    sb.append("withFiles:");
    sb.append(this.withFiles);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pullEntries:");
    sb.append(this.pullEntries);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pullFiles:");
    sb.append(this.pullFiles);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pushEntry:");
    sb.append(this.pushEntry);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pushCategory:");
    sb.append(this.pushCategory);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pushTag:");
    sb.append(this.pushTag);
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateEntry:");
    sb.append(this.updateEntry);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

