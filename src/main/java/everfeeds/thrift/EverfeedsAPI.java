/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package everfeeds.thrift;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class EverfeedsAPI {

  public interface Iface {

    public everfeeds.thrift.domain.Entry saveEntry(String token, everfeeds.thrift.domain.Entry entry, everfeeds.thrift.domain.EntryContent content) throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, org.apache.thrift.TException;

    public everfeeds.thrift.domain.EntryContent getEntryContent(String token, String entryId) throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, org.apache.thrift.TException;

    public everfeeds.thrift.domain.Entry getEntry(String token, String entryId) throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, org.apache.thrift.TException;

    public void markEntryRead(String token, String entryId) throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, org.apache.thrift.TException;

    public void markEntryUnread(String token, String entryId) throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, org.apache.thrift.TException;

    public everfeeds.thrift.domain.Account getAccount(String token) throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, org.apache.thrift.TException;

    public List<everfeeds.thrift.domain.Access> getAccesses(String token) throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, org.apache.thrift.TException;

    public everfeeds.thrift.domain.Access saveAccess(String token, everfeeds.thrift.domain.Access access) throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, org.apache.thrift.TException;

    public everfeeds.thrift.domain.Account saveAccount(String token, everfeeds.thrift.domain.Account account) throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, org.apache.thrift.TException;

    public List<everfeeds.thrift.domain.Tag> getTags(String token, String accessId) throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, org.apache.thrift.TException;

    public List<everfeeds.thrift.domain.Category> getCategories(String token, String accessId) throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, org.apache.thrift.TException;

    public List<everfeeds.thrift.ttype.EntryKind> getKinds(String token, String accessId) throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, org.apache.thrift.TException;

    public everfeeds.thrift.domain.Tag saveTag(String token, everfeeds.thrift.domain.Tag tag) throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, org.apache.thrift.TException;

    public everfeeds.thrift.domain.Category saveCategory(String token, everfeeds.thrift.domain.Category category) throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, org.apache.thrift.TException;

    public everfeeds.thrift.domain.Filter saveFilter(String token, everfeeds.thrift.domain.Filter filter) throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, org.apache.thrift.TException;

    public List<everfeeds.thrift.domain.Entry> getMash(String token, long splitDate, short page, short maxCount) throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, everfeeds.thrift.error.WrongArgument, org.apache.thrift.TException;

    public List<everfeeds.thrift.domain.Entry> getMashNew(String token, long splitDate, short maxCount) throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, everfeeds.thrift.error.WrongArgument, org.apache.thrift.TException;

    public List<everfeeds.thrift.domain.Entry> getFiltered(String token, everfeeds.thrift.domain.Filter filter, short page, short maxCount) throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, everfeeds.thrift.error.WrongArgument, org.apache.thrift.TException;

    public List<everfeeds.thrift.domain.Entry> getFilteredNew(String token, everfeeds.thrift.domain.Filter filter) throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, everfeeds.thrift.error.WrongArgument, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void saveEntry(String token, everfeeds.thrift.domain.Entry entry, everfeeds.thrift.domain.EntryContent content, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.saveEntry_call> resultHandler) throws org.apache.thrift.TException;

    public void getEntryContent(String token, String entryId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getEntryContent_call> resultHandler) throws org.apache.thrift.TException;

    public void getEntry(String token, String entryId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getEntry_call> resultHandler) throws org.apache.thrift.TException;

    public void markEntryRead(String token, String entryId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.markEntryRead_call> resultHandler) throws org.apache.thrift.TException;

    public void markEntryUnread(String token, String entryId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.markEntryUnread_call> resultHandler) throws org.apache.thrift.TException;

    public void getAccount(String token, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getAccount_call> resultHandler) throws org.apache.thrift.TException;

    public void getAccesses(String token, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getAccesses_call> resultHandler) throws org.apache.thrift.TException;

    public void saveAccess(String token, everfeeds.thrift.domain.Access access, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.saveAccess_call> resultHandler) throws org.apache.thrift.TException;

    public void saveAccount(String token, everfeeds.thrift.domain.Account account, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.saveAccount_call> resultHandler) throws org.apache.thrift.TException;

    public void getTags(String token, String accessId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getTags_call> resultHandler) throws org.apache.thrift.TException;

    public void getCategories(String token, String accessId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getCategories_call> resultHandler) throws org.apache.thrift.TException;

    public void getKinds(String token, String accessId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getKinds_call> resultHandler) throws org.apache.thrift.TException;

    public void saveTag(String token, everfeeds.thrift.domain.Tag tag, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.saveTag_call> resultHandler) throws org.apache.thrift.TException;

    public void saveCategory(String token, everfeeds.thrift.domain.Category category, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.saveCategory_call> resultHandler) throws org.apache.thrift.TException;

    public void saveFilter(String token, everfeeds.thrift.domain.Filter filter, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.saveFilter_call> resultHandler) throws org.apache.thrift.TException;

    public void getMash(String token, long splitDate, short page, short maxCount, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getMash_call> resultHandler) throws org.apache.thrift.TException;

    public void getMashNew(String token, long splitDate, short maxCount, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getMashNew_call> resultHandler) throws org.apache.thrift.TException;

    public void getFiltered(String token, everfeeds.thrift.domain.Filter filter, short page, short maxCount, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getFiltered_call> resultHandler) throws org.apache.thrift.TException;

    public void getFilteredNew(String token, everfeeds.thrift.domain.Filter filter, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getFilteredNew_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client implements org.apache.thrift.TServiceClient, Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      this(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected org.apache.thrift.protocol.TProtocol iprot_;
    protected org.apache.thrift.protocol.TProtocol oprot_;

    protected int seqid_;

    public org.apache.thrift.protocol.TProtocol getInputProtocol()
    {
      return this.iprot_;
    }

    public org.apache.thrift.protocol.TProtocol getOutputProtocol()
    {
      return this.oprot_;
    }

    public everfeeds.thrift.domain.Entry saveEntry(String token, everfeeds.thrift.domain.Entry entry, everfeeds.thrift.domain.EntryContent content) throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, org.apache.thrift.TException
    {
      send_saveEntry(token, entry, content);
      return recv_saveEntry();
    }

    public void send_saveEntry(String token, everfeeds.thrift.domain.Entry entry, everfeeds.thrift.domain.EntryContent content) throws org.apache.thrift.TException
    {
      oprot_.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveEntry", org.apache.thrift.protocol.TMessageType.CALL, ++seqid_));
      saveEntry_args args = new saveEntry_args();
      args.setToken(token);
      args.setEntry(entry);
      args.setContent(content);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public everfeeds.thrift.domain.Entry recv_saveEntry() throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot_.readMessageBegin();
      if (msg.type == org.apache.thrift.protocol.TMessageType.EXCEPTION) {
        org.apache.thrift.TApplicationException x = org.apache.thrift.TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.BAD_SEQUENCE_ID, "saveEntry failed: out of sequence response");
      }
      saveEntry_result result = new saveEntry_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.eF != null) {
        throw result.eF;
      }
      if (result.eE != null) {
        throw result.eE;
      }
      if (result.eTNF != null) {
        throw result.eTNF;
      }
      if (result.eNF != null) {
        throw result.eNF;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "saveEntry failed: unknown result");
    }

    public everfeeds.thrift.domain.EntryContent getEntryContent(String token, String entryId) throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, org.apache.thrift.TException
    {
      send_getEntryContent(token, entryId);
      return recv_getEntryContent();
    }

    public void send_getEntryContent(String token, String entryId) throws org.apache.thrift.TException
    {
      oprot_.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getEntryContent", org.apache.thrift.protocol.TMessageType.CALL, ++seqid_));
      getEntryContent_args args = new getEntryContent_args();
      args.setToken(token);
      args.setEntryId(entryId);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public everfeeds.thrift.domain.EntryContent recv_getEntryContent() throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot_.readMessageBegin();
      if (msg.type == org.apache.thrift.protocol.TMessageType.EXCEPTION) {
        org.apache.thrift.TApplicationException x = org.apache.thrift.TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.BAD_SEQUENCE_ID, "getEntryContent failed: out of sequence response");
      }
      getEntryContent_result result = new getEntryContent_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.eF != null) {
        throw result.eF;
      }
      if (result.eE != null) {
        throw result.eE;
      }
      if (result.eTNF != null) {
        throw result.eTNF;
      }
      if (result.eNF != null) {
        throw result.eNF;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getEntryContent failed: unknown result");
    }

    public everfeeds.thrift.domain.Entry getEntry(String token, String entryId) throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, org.apache.thrift.TException
    {
      send_getEntry(token, entryId);
      return recv_getEntry();
    }

    public void send_getEntry(String token, String entryId) throws org.apache.thrift.TException
    {
      oprot_.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getEntry", org.apache.thrift.protocol.TMessageType.CALL, ++seqid_));
      getEntry_args args = new getEntry_args();
      args.setToken(token);
      args.setEntryId(entryId);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public everfeeds.thrift.domain.Entry recv_getEntry() throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot_.readMessageBegin();
      if (msg.type == org.apache.thrift.protocol.TMessageType.EXCEPTION) {
        org.apache.thrift.TApplicationException x = org.apache.thrift.TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.BAD_SEQUENCE_ID, "getEntry failed: out of sequence response");
      }
      getEntry_result result = new getEntry_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.eF != null) {
        throw result.eF;
      }
      if (result.eE != null) {
        throw result.eE;
      }
      if (result.eTNF != null) {
        throw result.eTNF;
      }
      if (result.eNF != null) {
        throw result.eNF;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getEntry failed: unknown result");
    }

    public void markEntryRead(String token, String entryId) throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, org.apache.thrift.TException
    {
      send_markEntryRead(token, entryId);
      recv_markEntryRead();
    }

    public void send_markEntryRead(String token, String entryId) throws org.apache.thrift.TException
    {
      oprot_.writeMessageBegin(new org.apache.thrift.protocol.TMessage("markEntryRead", org.apache.thrift.protocol.TMessageType.CALL, ++seqid_));
      markEntryRead_args args = new markEntryRead_args();
      args.setToken(token);
      args.setEntryId(entryId);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_markEntryRead() throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot_.readMessageBegin();
      if (msg.type == org.apache.thrift.protocol.TMessageType.EXCEPTION) {
        org.apache.thrift.TApplicationException x = org.apache.thrift.TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.BAD_SEQUENCE_ID, "markEntryRead failed: out of sequence response");
      }
      markEntryRead_result result = new markEntryRead_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.eF != null) {
        throw result.eF;
      }
      if (result.eE != null) {
        throw result.eE;
      }
      if (result.eTNF != null) {
        throw result.eTNF;
      }
      if (result.eNF != null) {
        throw result.eNF;
      }
      return;
    }

    public void markEntryUnread(String token, String entryId) throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, org.apache.thrift.TException
    {
      send_markEntryUnread(token, entryId);
      recv_markEntryUnread();
    }

    public void send_markEntryUnread(String token, String entryId) throws org.apache.thrift.TException
    {
      oprot_.writeMessageBegin(new org.apache.thrift.protocol.TMessage("markEntryUnread", org.apache.thrift.protocol.TMessageType.CALL, ++seqid_));
      markEntryUnread_args args = new markEntryUnread_args();
      args.setToken(token);
      args.setEntryId(entryId);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_markEntryUnread() throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot_.readMessageBegin();
      if (msg.type == org.apache.thrift.protocol.TMessageType.EXCEPTION) {
        org.apache.thrift.TApplicationException x = org.apache.thrift.TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.BAD_SEQUENCE_ID, "markEntryUnread failed: out of sequence response");
      }
      markEntryUnread_result result = new markEntryUnread_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.eF != null) {
        throw result.eF;
      }
      if (result.eE != null) {
        throw result.eE;
      }
      if (result.eTNF != null) {
        throw result.eTNF;
      }
      if (result.eNF != null) {
        throw result.eNF;
      }
      return;
    }

    public everfeeds.thrift.domain.Account getAccount(String token) throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, org.apache.thrift.TException
    {
      send_getAccount(token);
      return recv_getAccount();
    }

    public void send_getAccount(String token) throws org.apache.thrift.TException
    {
      oprot_.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAccount", org.apache.thrift.protocol.TMessageType.CALL, ++seqid_));
      getAccount_args args = new getAccount_args();
      args.setToken(token);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public everfeeds.thrift.domain.Account recv_getAccount() throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot_.readMessageBegin();
      if (msg.type == org.apache.thrift.protocol.TMessageType.EXCEPTION) {
        org.apache.thrift.TApplicationException x = org.apache.thrift.TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.BAD_SEQUENCE_ID, "getAccount failed: out of sequence response");
      }
      getAccount_result result = new getAccount_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.eF != null) {
        throw result.eF;
      }
      if (result.eE != null) {
        throw result.eE;
      }
      if (result.eTNF != null) {
        throw result.eTNF;
      }
      if (result.eNF != null) {
        throw result.eNF;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAccount failed: unknown result");
    }

    public List<everfeeds.thrift.domain.Access> getAccesses(String token) throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, org.apache.thrift.TException
    {
      send_getAccesses(token);
      return recv_getAccesses();
    }

    public void send_getAccesses(String token) throws org.apache.thrift.TException
    {
      oprot_.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAccesses", org.apache.thrift.protocol.TMessageType.CALL, ++seqid_));
      getAccesses_args args = new getAccesses_args();
      args.setToken(token);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public List<everfeeds.thrift.domain.Access> recv_getAccesses() throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot_.readMessageBegin();
      if (msg.type == org.apache.thrift.protocol.TMessageType.EXCEPTION) {
        org.apache.thrift.TApplicationException x = org.apache.thrift.TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.BAD_SEQUENCE_ID, "getAccesses failed: out of sequence response");
      }
      getAccesses_result result = new getAccesses_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.eF != null) {
        throw result.eF;
      }
      if (result.eE != null) {
        throw result.eE;
      }
      if (result.eTNF != null) {
        throw result.eTNF;
      }
      if (result.eNF != null) {
        throw result.eNF;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAccesses failed: unknown result");
    }

    public everfeeds.thrift.domain.Access saveAccess(String token, everfeeds.thrift.domain.Access access) throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, org.apache.thrift.TException
    {
      send_saveAccess(token, access);
      return recv_saveAccess();
    }

    public void send_saveAccess(String token, everfeeds.thrift.domain.Access access) throws org.apache.thrift.TException
    {
      oprot_.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveAccess", org.apache.thrift.protocol.TMessageType.CALL, ++seqid_));
      saveAccess_args args = new saveAccess_args();
      args.setToken(token);
      args.setAccess(access);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public everfeeds.thrift.domain.Access recv_saveAccess() throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot_.readMessageBegin();
      if (msg.type == org.apache.thrift.protocol.TMessageType.EXCEPTION) {
        org.apache.thrift.TApplicationException x = org.apache.thrift.TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.BAD_SEQUENCE_ID, "saveAccess failed: out of sequence response");
      }
      saveAccess_result result = new saveAccess_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.eF != null) {
        throw result.eF;
      }
      if (result.eE != null) {
        throw result.eE;
      }
      if (result.eTNF != null) {
        throw result.eTNF;
      }
      if (result.eNF != null) {
        throw result.eNF;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "saveAccess failed: unknown result");
    }

    public everfeeds.thrift.domain.Account saveAccount(String token, everfeeds.thrift.domain.Account account) throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, org.apache.thrift.TException
    {
      send_saveAccount(token, account);
      return recv_saveAccount();
    }

    public void send_saveAccount(String token, everfeeds.thrift.domain.Account account) throws org.apache.thrift.TException
    {
      oprot_.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveAccount", org.apache.thrift.protocol.TMessageType.CALL, ++seqid_));
      saveAccount_args args = new saveAccount_args();
      args.setToken(token);
      args.setAccount(account);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public everfeeds.thrift.domain.Account recv_saveAccount() throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot_.readMessageBegin();
      if (msg.type == org.apache.thrift.protocol.TMessageType.EXCEPTION) {
        org.apache.thrift.TApplicationException x = org.apache.thrift.TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.BAD_SEQUENCE_ID, "saveAccount failed: out of sequence response");
      }
      saveAccount_result result = new saveAccount_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.eF != null) {
        throw result.eF;
      }
      if (result.eE != null) {
        throw result.eE;
      }
      if (result.eTNF != null) {
        throw result.eTNF;
      }
      if (result.eNF != null) {
        throw result.eNF;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "saveAccount failed: unknown result");
    }

    public List<everfeeds.thrift.domain.Tag> getTags(String token, String accessId) throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, org.apache.thrift.TException
    {
      send_getTags(token, accessId);
      return recv_getTags();
    }

    public void send_getTags(String token, String accessId) throws org.apache.thrift.TException
    {
      oprot_.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTags", org.apache.thrift.protocol.TMessageType.CALL, ++seqid_));
      getTags_args args = new getTags_args();
      args.setToken(token);
      args.setAccessId(accessId);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public List<everfeeds.thrift.domain.Tag> recv_getTags() throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot_.readMessageBegin();
      if (msg.type == org.apache.thrift.protocol.TMessageType.EXCEPTION) {
        org.apache.thrift.TApplicationException x = org.apache.thrift.TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.BAD_SEQUENCE_ID, "getTags failed: out of sequence response");
      }
      getTags_result result = new getTags_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.eF != null) {
        throw result.eF;
      }
      if (result.eE != null) {
        throw result.eE;
      }
      if (result.eTNF != null) {
        throw result.eTNF;
      }
      if (result.eNF != null) {
        throw result.eNF;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTags failed: unknown result");
    }

    public List<everfeeds.thrift.domain.Category> getCategories(String token, String accessId) throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, org.apache.thrift.TException
    {
      send_getCategories(token, accessId);
      return recv_getCategories();
    }

    public void send_getCategories(String token, String accessId) throws org.apache.thrift.TException
    {
      oprot_.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCategories", org.apache.thrift.protocol.TMessageType.CALL, ++seqid_));
      getCategories_args args = new getCategories_args();
      args.setToken(token);
      args.setAccessId(accessId);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public List<everfeeds.thrift.domain.Category> recv_getCategories() throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot_.readMessageBegin();
      if (msg.type == org.apache.thrift.protocol.TMessageType.EXCEPTION) {
        org.apache.thrift.TApplicationException x = org.apache.thrift.TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.BAD_SEQUENCE_ID, "getCategories failed: out of sequence response");
      }
      getCategories_result result = new getCategories_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.eF != null) {
        throw result.eF;
      }
      if (result.eE != null) {
        throw result.eE;
      }
      if (result.eTNF != null) {
        throw result.eTNF;
      }
      if (result.eNF != null) {
        throw result.eNF;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCategories failed: unknown result");
    }

    public List<everfeeds.thrift.ttype.EntryKind> getKinds(String token, String accessId) throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, org.apache.thrift.TException
    {
      send_getKinds(token, accessId);
      return recv_getKinds();
    }

    public void send_getKinds(String token, String accessId) throws org.apache.thrift.TException
    {
      oprot_.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getKinds", org.apache.thrift.protocol.TMessageType.CALL, ++seqid_));
      getKinds_args args = new getKinds_args();
      args.setToken(token);
      args.setAccessId(accessId);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public List<everfeeds.thrift.ttype.EntryKind> recv_getKinds() throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot_.readMessageBegin();
      if (msg.type == org.apache.thrift.protocol.TMessageType.EXCEPTION) {
        org.apache.thrift.TApplicationException x = org.apache.thrift.TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.BAD_SEQUENCE_ID, "getKinds failed: out of sequence response");
      }
      getKinds_result result = new getKinds_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.eF != null) {
        throw result.eF;
      }
      if (result.eE != null) {
        throw result.eE;
      }
      if (result.eTNF != null) {
        throw result.eTNF;
      }
      if (result.eNF != null) {
        throw result.eNF;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getKinds failed: unknown result");
    }

    public everfeeds.thrift.domain.Tag saveTag(String token, everfeeds.thrift.domain.Tag tag) throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, org.apache.thrift.TException
    {
      send_saveTag(token, tag);
      return recv_saveTag();
    }

    public void send_saveTag(String token, everfeeds.thrift.domain.Tag tag) throws org.apache.thrift.TException
    {
      oprot_.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveTag", org.apache.thrift.protocol.TMessageType.CALL, ++seqid_));
      saveTag_args args = new saveTag_args();
      args.setToken(token);
      args.setTag(tag);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public everfeeds.thrift.domain.Tag recv_saveTag() throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot_.readMessageBegin();
      if (msg.type == org.apache.thrift.protocol.TMessageType.EXCEPTION) {
        org.apache.thrift.TApplicationException x = org.apache.thrift.TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.BAD_SEQUENCE_ID, "saveTag failed: out of sequence response");
      }
      saveTag_result result = new saveTag_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.eF != null) {
        throw result.eF;
      }
      if (result.eE != null) {
        throw result.eE;
      }
      if (result.eTNF != null) {
        throw result.eTNF;
      }
      if (result.eNF != null) {
        throw result.eNF;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "saveTag failed: unknown result");
    }

    public everfeeds.thrift.domain.Category saveCategory(String token, everfeeds.thrift.domain.Category category) throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, org.apache.thrift.TException
    {
      send_saveCategory(token, category);
      return recv_saveCategory();
    }

    public void send_saveCategory(String token, everfeeds.thrift.domain.Category category) throws org.apache.thrift.TException
    {
      oprot_.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveCategory", org.apache.thrift.protocol.TMessageType.CALL, ++seqid_));
      saveCategory_args args = new saveCategory_args();
      args.setToken(token);
      args.setCategory(category);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public everfeeds.thrift.domain.Category recv_saveCategory() throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot_.readMessageBegin();
      if (msg.type == org.apache.thrift.protocol.TMessageType.EXCEPTION) {
        org.apache.thrift.TApplicationException x = org.apache.thrift.TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.BAD_SEQUENCE_ID, "saveCategory failed: out of sequence response");
      }
      saveCategory_result result = new saveCategory_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.eF != null) {
        throw result.eF;
      }
      if (result.eE != null) {
        throw result.eE;
      }
      if (result.eTNF != null) {
        throw result.eTNF;
      }
      if (result.eNF != null) {
        throw result.eNF;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "saveCategory failed: unknown result");
    }

    public everfeeds.thrift.domain.Filter saveFilter(String token, everfeeds.thrift.domain.Filter filter) throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, org.apache.thrift.TException
    {
      send_saveFilter(token, filter);
      return recv_saveFilter();
    }

    public void send_saveFilter(String token, everfeeds.thrift.domain.Filter filter) throws org.apache.thrift.TException
    {
      oprot_.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveFilter", org.apache.thrift.protocol.TMessageType.CALL, ++seqid_));
      saveFilter_args args = new saveFilter_args();
      args.setToken(token);
      args.setFilter(filter);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public everfeeds.thrift.domain.Filter recv_saveFilter() throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot_.readMessageBegin();
      if (msg.type == org.apache.thrift.protocol.TMessageType.EXCEPTION) {
        org.apache.thrift.TApplicationException x = org.apache.thrift.TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.BAD_SEQUENCE_ID, "saveFilter failed: out of sequence response");
      }
      saveFilter_result result = new saveFilter_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.eF != null) {
        throw result.eF;
      }
      if (result.eE != null) {
        throw result.eE;
      }
      if (result.eTNF != null) {
        throw result.eTNF;
      }
      if (result.eNF != null) {
        throw result.eNF;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "saveFilter failed: unknown result");
    }

    public List<everfeeds.thrift.domain.Entry> getMash(String token, long splitDate, short page, short maxCount) throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, everfeeds.thrift.error.WrongArgument, org.apache.thrift.TException
    {
      send_getMash(token, splitDate, page, maxCount);
      return recv_getMash();
    }

    public void send_getMash(String token, long splitDate, short page, short maxCount) throws org.apache.thrift.TException
    {
      oprot_.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMash", org.apache.thrift.protocol.TMessageType.CALL, ++seqid_));
      getMash_args args = new getMash_args();
      args.setToken(token);
      args.setSplitDate(splitDate);
      args.setPage(page);
      args.setMaxCount(maxCount);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public List<everfeeds.thrift.domain.Entry> recv_getMash() throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, everfeeds.thrift.error.WrongArgument, org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot_.readMessageBegin();
      if (msg.type == org.apache.thrift.protocol.TMessageType.EXCEPTION) {
        org.apache.thrift.TApplicationException x = org.apache.thrift.TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.BAD_SEQUENCE_ID, "getMash failed: out of sequence response");
      }
      getMash_result result = new getMash_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.eF != null) {
        throw result.eF;
      }
      if (result.eE != null) {
        throw result.eE;
      }
      if (result.eTNF != null) {
        throw result.eTNF;
      }
      if (result.eNF != null) {
        throw result.eNF;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMash failed: unknown result");
    }

    public List<everfeeds.thrift.domain.Entry> getMashNew(String token, long splitDate, short maxCount) throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, everfeeds.thrift.error.WrongArgument, org.apache.thrift.TException
    {
      send_getMashNew(token, splitDate, maxCount);
      return recv_getMashNew();
    }

    public void send_getMashNew(String token, long splitDate, short maxCount) throws org.apache.thrift.TException
    {
      oprot_.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMashNew", org.apache.thrift.protocol.TMessageType.CALL, ++seqid_));
      getMashNew_args args = new getMashNew_args();
      args.setToken(token);
      args.setSplitDate(splitDate);
      args.setMaxCount(maxCount);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public List<everfeeds.thrift.domain.Entry> recv_getMashNew() throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, everfeeds.thrift.error.WrongArgument, org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot_.readMessageBegin();
      if (msg.type == org.apache.thrift.protocol.TMessageType.EXCEPTION) {
        org.apache.thrift.TApplicationException x = org.apache.thrift.TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.BAD_SEQUENCE_ID, "getMashNew failed: out of sequence response");
      }
      getMashNew_result result = new getMashNew_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.eF != null) {
        throw result.eF;
      }
      if (result.eE != null) {
        throw result.eE;
      }
      if (result.eTNF != null) {
        throw result.eTNF;
      }
      if (result.eNF != null) {
        throw result.eNF;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMashNew failed: unknown result");
    }

    public List<everfeeds.thrift.domain.Entry> getFiltered(String token, everfeeds.thrift.domain.Filter filter, short page, short maxCount) throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, everfeeds.thrift.error.WrongArgument, org.apache.thrift.TException
    {
      send_getFiltered(token, filter, page, maxCount);
      return recv_getFiltered();
    }

    public void send_getFiltered(String token, everfeeds.thrift.domain.Filter filter, short page, short maxCount) throws org.apache.thrift.TException
    {
      oprot_.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFiltered", org.apache.thrift.protocol.TMessageType.CALL, ++seqid_));
      getFiltered_args args = new getFiltered_args();
      args.setToken(token);
      args.setFilter(filter);
      args.setPage(page);
      args.setMaxCount(maxCount);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public List<everfeeds.thrift.domain.Entry> recv_getFiltered() throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, everfeeds.thrift.error.WrongArgument, org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot_.readMessageBegin();
      if (msg.type == org.apache.thrift.protocol.TMessageType.EXCEPTION) {
        org.apache.thrift.TApplicationException x = org.apache.thrift.TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.BAD_SEQUENCE_ID, "getFiltered failed: out of sequence response");
      }
      getFiltered_result result = new getFiltered_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.eF != null) {
        throw result.eF;
      }
      if (result.eE != null) {
        throw result.eE;
      }
      if (result.eTNF != null) {
        throw result.eTNF;
      }
      if (result.eNF != null) {
        throw result.eNF;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getFiltered failed: unknown result");
    }

    public List<everfeeds.thrift.domain.Entry> getFilteredNew(String token, everfeeds.thrift.domain.Filter filter) throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, everfeeds.thrift.error.WrongArgument, org.apache.thrift.TException
    {
      send_getFilteredNew(token, filter);
      return recv_getFilteredNew();
    }

    public void send_getFilteredNew(String token, everfeeds.thrift.domain.Filter filter) throws org.apache.thrift.TException
    {
      oprot_.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFilteredNew", org.apache.thrift.protocol.TMessageType.CALL, ++seqid_));
      getFilteredNew_args args = new getFilteredNew_args();
      args.setToken(token);
      args.setFilter(filter);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public List<everfeeds.thrift.domain.Entry> recv_getFilteredNew() throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, everfeeds.thrift.error.WrongArgument, org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot_.readMessageBegin();
      if (msg.type == org.apache.thrift.protocol.TMessageType.EXCEPTION) {
        org.apache.thrift.TApplicationException x = org.apache.thrift.TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.BAD_SEQUENCE_ID, "getFilteredNew failed: out of sequence response");
      }
      getFilteredNew_result result = new getFilteredNew_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.eF != null) {
        throw result.eF;
      }
      if (result.eE != null) {
        throw result.eE;
      }
      if (result.eTNF != null) {
        throw result.eTNF;
      }
      if (result.eNF != null) {
        throw result.eNF;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getFilteredNew failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void saveEntry(String token, everfeeds.thrift.domain.Entry entry, everfeeds.thrift.domain.EntryContent content, org.apache.thrift.async.AsyncMethodCallback<saveEntry_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saveEntry_call method_call = new saveEntry_call(token, entry, content, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class saveEntry_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String token;
      private everfeeds.thrift.domain.Entry entry;
      private everfeeds.thrift.domain.EntryContent content;
      public saveEntry_call(String token, everfeeds.thrift.domain.Entry entry, everfeeds.thrift.domain.EntryContent content, org.apache.thrift.async.AsyncMethodCallback<saveEntry_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this.entry = entry;
        this.content = content;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveEntry", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saveEntry_args args = new saveEntry_args();
        args.setToken(token);
        args.setEntry(entry);
        args.setContent(content);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public everfeeds.thrift.domain.Entry getResult() throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_saveEntry();
      }
    }

    public void getEntryContent(String token, String entryId, org.apache.thrift.async.AsyncMethodCallback<getEntryContent_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getEntryContent_call method_call = new getEntryContent_call(token, entryId, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class getEntryContent_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String token;
      private String entryId;
      public getEntryContent_call(String token, String entryId, org.apache.thrift.async.AsyncMethodCallback<getEntryContent_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this.entryId = entryId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getEntryContent", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getEntryContent_args args = new getEntryContent_args();
        args.setToken(token);
        args.setEntryId(entryId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public everfeeds.thrift.domain.EntryContent getResult() throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getEntryContent();
      }
    }

    public void getEntry(String token, String entryId, org.apache.thrift.async.AsyncMethodCallback<getEntry_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getEntry_call method_call = new getEntry_call(token, entryId, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class getEntry_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String token;
      private String entryId;
      public getEntry_call(String token, String entryId, org.apache.thrift.async.AsyncMethodCallback<getEntry_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this.entryId = entryId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getEntry", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getEntry_args args = new getEntry_args();
        args.setToken(token);
        args.setEntryId(entryId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public everfeeds.thrift.domain.Entry getResult() throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getEntry();
      }
    }

    public void markEntryRead(String token, String entryId, org.apache.thrift.async.AsyncMethodCallback<markEntryRead_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      markEntryRead_call method_call = new markEntryRead_call(token, entryId, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class markEntryRead_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String token;
      private String entryId;
      public markEntryRead_call(String token, String entryId, org.apache.thrift.async.AsyncMethodCallback<markEntryRead_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this.entryId = entryId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("markEntryRead", org.apache.thrift.protocol.TMessageType.CALL, 0));
        markEntryRead_args args = new markEntryRead_args();
        args.setToken(token);
        args.setEntryId(entryId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_markEntryRead();
      }
    }

    public void markEntryUnread(String token, String entryId, org.apache.thrift.async.AsyncMethodCallback<markEntryUnread_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      markEntryUnread_call method_call = new markEntryUnread_call(token, entryId, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class markEntryUnread_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String token;
      private String entryId;
      public markEntryUnread_call(String token, String entryId, org.apache.thrift.async.AsyncMethodCallback<markEntryUnread_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this.entryId = entryId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("markEntryUnread", org.apache.thrift.protocol.TMessageType.CALL, 0));
        markEntryUnread_args args = new markEntryUnread_args();
        args.setToken(token);
        args.setEntryId(entryId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_markEntryUnread();
      }
    }

    public void getAccount(String token, org.apache.thrift.async.AsyncMethodCallback<getAccount_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAccount_call method_call = new getAccount_call(token, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class getAccount_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String token;
      public getAccount_call(String token, org.apache.thrift.async.AsyncMethodCallback<getAccount_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAccount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAccount_args args = new getAccount_args();
        args.setToken(token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public everfeeds.thrift.domain.Account getResult() throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAccount();
      }
    }

    public void getAccesses(String token, org.apache.thrift.async.AsyncMethodCallback<getAccesses_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAccesses_call method_call = new getAccesses_call(token, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class getAccesses_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String token;
      public getAccesses_call(String token, org.apache.thrift.async.AsyncMethodCallback<getAccesses_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAccesses", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAccesses_args args = new getAccesses_args();
        args.setToken(token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<everfeeds.thrift.domain.Access> getResult() throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAccesses();
      }
    }

    public void saveAccess(String token, everfeeds.thrift.domain.Access access, org.apache.thrift.async.AsyncMethodCallback<saveAccess_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saveAccess_call method_call = new saveAccess_call(token, access, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class saveAccess_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String token;
      private everfeeds.thrift.domain.Access access;
      public saveAccess_call(String token, everfeeds.thrift.domain.Access access, org.apache.thrift.async.AsyncMethodCallback<saveAccess_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this.access = access;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveAccess", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saveAccess_args args = new saveAccess_args();
        args.setToken(token);
        args.setAccess(access);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public everfeeds.thrift.domain.Access getResult() throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_saveAccess();
      }
    }

    public void saveAccount(String token, everfeeds.thrift.domain.Account account, org.apache.thrift.async.AsyncMethodCallback<saveAccount_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saveAccount_call method_call = new saveAccount_call(token, account, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class saveAccount_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String token;
      private everfeeds.thrift.domain.Account account;
      public saveAccount_call(String token, everfeeds.thrift.domain.Account account, org.apache.thrift.async.AsyncMethodCallback<saveAccount_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this.account = account;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveAccount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saveAccount_args args = new saveAccount_args();
        args.setToken(token);
        args.setAccount(account);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public everfeeds.thrift.domain.Account getResult() throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_saveAccount();
      }
    }

    public void getTags(String token, String accessId, org.apache.thrift.async.AsyncMethodCallback<getTags_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTags_call method_call = new getTags_call(token, accessId, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class getTags_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String token;
      private String accessId;
      public getTags_call(String token, String accessId, org.apache.thrift.async.AsyncMethodCallback<getTags_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this.accessId = accessId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTags", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTags_args args = new getTags_args();
        args.setToken(token);
        args.setAccessId(accessId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<everfeeds.thrift.domain.Tag> getResult() throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTags();
      }
    }

    public void getCategories(String token, String accessId, org.apache.thrift.async.AsyncMethodCallback<getCategories_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getCategories_call method_call = new getCategories_call(token, accessId, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class getCategories_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String token;
      private String accessId;
      public getCategories_call(String token, String accessId, org.apache.thrift.async.AsyncMethodCallback<getCategories_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this.accessId = accessId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCategories", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCategories_args args = new getCategories_args();
        args.setToken(token);
        args.setAccessId(accessId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<everfeeds.thrift.domain.Category> getResult() throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getCategories();
      }
    }

    public void getKinds(String token, String accessId, org.apache.thrift.async.AsyncMethodCallback<getKinds_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getKinds_call method_call = new getKinds_call(token, accessId, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class getKinds_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String token;
      private String accessId;
      public getKinds_call(String token, String accessId, org.apache.thrift.async.AsyncMethodCallback<getKinds_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this.accessId = accessId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getKinds", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getKinds_args args = new getKinds_args();
        args.setToken(token);
        args.setAccessId(accessId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<everfeeds.thrift.ttype.EntryKind> getResult() throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getKinds();
      }
    }

    public void saveTag(String token, everfeeds.thrift.domain.Tag tag, org.apache.thrift.async.AsyncMethodCallback<saveTag_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saveTag_call method_call = new saveTag_call(token, tag, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class saveTag_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String token;
      private everfeeds.thrift.domain.Tag tag;
      public saveTag_call(String token, everfeeds.thrift.domain.Tag tag, org.apache.thrift.async.AsyncMethodCallback<saveTag_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this.tag = tag;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveTag", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saveTag_args args = new saveTag_args();
        args.setToken(token);
        args.setTag(tag);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public everfeeds.thrift.domain.Tag getResult() throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_saveTag();
      }
    }

    public void saveCategory(String token, everfeeds.thrift.domain.Category category, org.apache.thrift.async.AsyncMethodCallback<saveCategory_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saveCategory_call method_call = new saveCategory_call(token, category, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class saveCategory_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String token;
      private everfeeds.thrift.domain.Category category;
      public saveCategory_call(String token, everfeeds.thrift.domain.Category category, org.apache.thrift.async.AsyncMethodCallback<saveCategory_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this.category = category;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveCategory", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saveCategory_args args = new saveCategory_args();
        args.setToken(token);
        args.setCategory(category);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public everfeeds.thrift.domain.Category getResult() throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_saveCategory();
      }
    }

    public void saveFilter(String token, everfeeds.thrift.domain.Filter filter, org.apache.thrift.async.AsyncMethodCallback<saveFilter_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saveFilter_call method_call = new saveFilter_call(token, filter, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class saveFilter_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String token;
      private everfeeds.thrift.domain.Filter filter;
      public saveFilter_call(String token, everfeeds.thrift.domain.Filter filter, org.apache.thrift.async.AsyncMethodCallback<saveFilter_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this.filter = filter;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveFilter", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saveFilter_args args = new saveFilter_args();
        args.setToken(token);
        args.setFilter(filter);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public everfeeds.thrift.domain.Filter getResult() throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_saveFilter();
      }
    }

    public void getMash(String token, long splitDate, short page, short maxCount, org.apache.thrift.async.AsyncMethodCallback<getMash_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMash_call method_call = new getMash_call(token, splitDate, page, maxCount, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class getMash_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String token;
      private long splitDate;
      private short page;
      private short maxCount;
      public getMash_call(String token, long splitDate, short page, short maxCount, org.apache.thrift.async.AsyncMethodCallback<getMash_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this.splitDate = splitDate;
        this.page = page;
        this.maxCount = maxCount;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMash", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMash_args args = new getMash_args();
        args.setToken(token);
        args.setSplitDate(splitDate);
        args.setPage(page);
        args.setMaxCount(maxCount);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<everfeeds.thrift.domain.Entry> getResult() throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, everfeeds.thrift.error.WrongArgument, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMash();
      }
    }

    public void getMashNew(String token, long splitDate, short maxCount, org.apache.thrift.async.AsyncMethodCallback<getMashNew_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMashNew_call method_call = new getMashNew_call(token, splitDate, maxCount, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class getMashNew_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String token;
      private long splitDate;
      private short maxCount;
      public getMashNew_call(String token, long splitDate, short maxCount, org.apache.thrift.async.AsyncMethodCallback<getMashNew_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this.splitDate = splitDate;
        this.maxCount = maxCount;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMashNew", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMashNew_args args = new getMashNew_args();
        args.setToken(token);
        args.setSplitDate(splitDate);
        args.setMaxCount(maxCount);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<everfeeds.thrift.domain.Entry> getResult() throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, everfeeds.thrift.error.WrongArgument, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMashNew();
      }
    }

    public void getFiltered(String token, everfeeds.thrift.domain.Filter filter, short page, short maxCount, org.apache.thrift.async.AsyncMethodCallback<getFiltered_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getFiltered_call method_call = new getFiltered_call(token, filter, page, maxCount, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class getFiltered_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String token;
      private everfeeds.thrift.domain.Filter filter;
      private short page;
      private short maxCount;
      public getFiltered_call(String token, everfeeds.thrift.domain.Filter filter, short page, short maxCount, org.apache.thrift.async.AsyncMethodCallback<getFiltered_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this.filter = filter;
        this.page = page;
        this.maxCount = maxCount;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFiltered", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getFiltered_args args = new getFiltered_args();
        args.setToken(token);
        args.setFilter(filter);
        args.setPage(page);
        args.setMaxCount(maxCount);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<everfeeds.thrift.domain.Entry> getResult() throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, everfeeds.thrift.error.WrongArgument, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getFiltered();
      }
    }

    public void getFilteredNew(String token, everfeeds.thrift.domain.Filter filter, org.apache.thrift.async.AsyncMethodCallback<getFilteredNew_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getFilteredNew_call method_call = new getFilteredNew_call(token, filter, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class getFilteredNew_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String token;
      private everfeeds.thrift.domain.Filter filter;
      public getFilteredNew_call(String token, everfeeds.thrift.domain.Filter filter, org.apache.thrift.async.AsyncMethodCallback<getFilteredNew_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this.filter = filter;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFilteredNew", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getFilteredNew_args args = new getFilteredNew_args();
        args.setToken(token);
        args.setFilter(filter);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<everfeeds.thrift.domain.Entry> getResult() throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, everfeeds.thrift.error.WrongArgument, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getFilteredNew();
      }
    }

  }

  public static class Processor implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(Iface iface)
    {
      iface_ = iface;
      processMap_.put("saveEntry", new saveEntry());
      processMap_.put("getEntryContent", new getEntryContent());
      processMap_.put("getEntry", new getEntry());
      processMap_.put("markEntryRead", new markEntryRead());
      processMap_.put("markEntryUnread", new markEntryUnread());
      processMap_.put("getAccount", new getAccount());
      processMap_.put("getAccesses", new getAccesses());
      processMap_.put("saveAccess", new saveAccess());
      processMap_.put("saveAccount", new saveAccount());
      processMap_.put("getTags", new getTags());
      processMap_.put("getCategories", new getCategories());
      processMap_.put("getKinds", new getKinds());
      processMap_.put("saveTag", new saveTag());
      processMap_.put("saveCategory", new saveCategory());
      processMap_.put("saveFilter", new saveFilter());
      processMap_.put("getMash", new getMash());
      processMap_.put("getMashNew", new getMashNew());
      processMap_.put("getFiltered", new getFiltered());
      processMap_.put("getFilteredNew", new getFilteredNew());
    }

    protected static interface ProcessFunction {
      public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException;
    }

    private Iface iface_;
    protected final HashMap<String,ProcessFunction> processMap_ = new HashMap<String,ProcessFunction>();

    public boolean process(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot.readMessageBegin();
      ProcessFunction fn = processMap_.get(msg.name);
      if (fn == null) {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, org.apache.thrift.protocol.TType.STRUCT);
        iprot.readMessageEnd();
        org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.UNKNOWN_METHOD, "Invalid method name: '"+msg.name+"'");
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(msg.name, org.apache.thrift.protocol.TMessageType.EXCEPTION, msg.seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return true;
      }
      fn.process(msg.seqid, iprot, oprot);
      return true;
    }

    private class saveEntry implements ProcessFunction {
      public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        saveEntry_args args = new saveEntry_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveEntry", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        saveEntry_result result = new saveEntry_result();
        try {
          result.success = iface_.saveEntry(args.token, args.entry, args.content);
        } catch (everfeeds.thrift.error.Forbidden eF) {
          result.eF = eF;
        } catch (everfeeds.thrift.error.TokenExpired eE) {
          result.eE = eE;
        } catch (everfeeds.thrift.error.TokenNotFound eTNF) {
          result.eTNF = eTNF;
        } catch (everfeeds.thrift.error.NotFound eNF) {
          result.eNF = eNF;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing saveEntry", th);
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, "Internal error processing saveEntry");
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveEntry", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveEntry", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getEntryContent implements ProcessFunction {
      public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        getEntryContent_args args = new getEntryContent_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getEntryContent", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getEntryContent_result result = new getEntryContent_result();
        try {
          result.success = iface_.getEntryContent(args.token, args.entryId);
        } catch (everfeeds.thrift.error.Forbidden eF) {
          result.eF = eF;
        } catch (everfeeds.thrift.error.TokenExpired eE) {
          result.eE = eE;
        } catch (everfeeds.thrift.error.TokenNotFound eTNF) {
          result.eTNF = eTNF;
        } catch (everfeeds.thrift.error.NotFound eNF) {
          result.eNF = eNF;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing getEntryContent", th);
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, "Internal error processing getEntryContent");
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getEntryContent", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getEntryContent", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getEntry implements ProcessFunction {
      public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        getEntry_args args = new getEntry_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getEntry", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getEntry_result result = new getEntry_result();
        try {
          result.success = iface_.getEntry(args.token, args.entryId);
        } catch (everfeeds.thrift.error.Forbidden eF) {
          result.eF = eF;
        } catch (everfeeds.thrift.error.TokenExpired eE) {
          result.eE = eE;
        } catch (everfeeds.thrift.error.TokenNotFound eTNF) {
          result.eTNF = eTNF;
        } catch (everfeeds.thrift.error.NotFound eNF) {
          result.eNF = eNF;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing getEntry", th);
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, "Internal error processing getEntry");
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getEntry", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getEntry", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class markEntryRead implements ProcessFunction {
      public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        markEntryRead_args args = new markEntryRead_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("markEntryRead", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        markEntryRead_result result = new markEntryRead_result();
        try {
          iface_.markEntryRead(args.token, args.entryId);
        } catch (everfeeds.thrift.error.Forbidden eF) {
          result.eF = eF;
        } catch (everfeeds.thrift.error.TokenExpired eE) {
          result.eE = eE;
        } catch (everfeeds.thrift.error.TokenNotFound eTNF) {
          result.eTNF = eTNF;
        } catch (everfeeds.thrift.error.NotFound eNF) {
          result.eNF = eNF;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing markEntryRead", th);
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, "Internal error processing markEntryRead");
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("markEntryRead", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("markEntryRead", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class markEntryUnread implements ProcessFunction {
      public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        markEntryUnread_args args = new markEntryUnread_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("markEntryUnread", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        markEntryUnread_result result = new markEntryUnread_result();
        try {
          iface_.markEntryUnread(args.token, args.entryId);
        } catch (everfeeds.thrift.error.Forbidden eF) {
          result.eF = eF;
        } catch (everfeeds.thrift.error.TokenExpired eE) {
          result.eE = eE;
        } catch (everfeeds.thrift.error.TokenNotFound eTNF) {
          result.eTNF = eTNF;
        } catch (everfeeds.thrift.error.NotFound eNF) {
          result.eNF = eNF;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing markEntryUnread", th);
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, "Internal error processing markEntryUnread");
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("markEntryUnread", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("markEntryUnread", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getAccount implements ProcessFunction {
      public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        getAccount_args args = new getAccount_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAccount", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getAccount_result result = new getAccount_result();
        try {
          result.success = iface_.getAccount(args.token);
        } catch (everfeeds.thrift.error.Forbidden eF) {
          result.eF = eF;
        } catch (everfeeds.thrift.error.TokenExpired eE) {
          result.eE = eE;
        } catch (everfeeds.thrift.error.TokenNotFound eTNF) {
          result.eTNF = eTNF;
        } catch (everfeeds.thrift.error.NotFound eNF) {
          result.eNF = eNF;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing getAccount", th);
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, "Internal error processing getAccount");
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAccount", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAccount", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getAccesses implements ProcessFunction {
      public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        getAccesses_args args = new getAccesses_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAccesses", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getAccesses_result result = new getAccesses_result();
        try {
          result.success = iface_.getAccesses(args.token);
        } catch (everfeeds.thrift.error.Forbidden eF) {
          result.eF = eF;
        } catch (everfeeds.thrift.error.TokenExpired eE) {
          result.eE = eE;
        } catch (everfeeds.thrift.error.TokenNotFound eTNF) {
          result.eTNF = eTNF;
        } catch (everfeeds.thrift.error.NotFound eNF) {
          result.eNF = eNF;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing getAccesses", th);
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, "Internal error processing getAccesses");
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAccesses", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAccesses", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class saveAccess implements ProcessFunction {
      public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        saveAccess_args args = new saveAccess_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveAccess", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        saveAccess_result result = new saveAccess_result();
        try {
          result.success = iface_.saveAccess(args.token, args.access);
        } catch (everfeeds.thrift.error.Forbidden eF) {
          result.eF = eF;
        } catch (everfeeds.thrift.error.TokenExpired eE) {
          result.eE = eE;
        } catch (everfeeds.thrift.error.TokenNotFound eTNF) {
          result.eTNF = eTNF;
        } catch (everfeeds.thrift.error.NotFound eNF) {
          result.eNF = eNF;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing saveAccess", th);
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, "Internal error processing saveAccess");
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveAccess", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveAccess", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class saveAccount implements ProcessFunction {
      public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        saveAccount_args args = new saveAccount_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveAccount", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        saveAccount_result result = new saveAccount_result();
        try {
          result.success = iface_.saveAccount(args.token, args.account);
        } catch (everfeeds.thrift.error.Forbidden eF) {
          result.eF = eF;
        } catch (everfeeds.thrift.error.TokenExpired eE) {
          result.eE = eE;
        } catch (everfeeds.thrift.error.TokenNotFound eTNF) {
          result.eTNF = eTNF;
        } catch (everfeeds.thrift.error.NotFound eNF) {
          result.eNF = eNF;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing saveAccount", th);
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, "Internal error processing saveAccount");
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveAccount", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveAccount", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getTags implements ProcessFunction {
      public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        getTags_args args = new getTags_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTags", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getTags_result result = new getTags_result();
        try {
          result.success = iface_.getTags(args.token, args.accessId);
        } catch (everfeeds.thrift.error.Forbidden eF) {
          result.eF = eF;
        } catch (everfeeds.thrift.error.TokenExpired eE) {
          result.eE = eE;
        } catch (everfeeds.thrift.error.TokenNotFound eTNF) {
          result.eTNF = eTNF;
        } catch (everfeeds.thrift.error.NotFound eNF) {
          result.eNF = eNF;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing getTags", th);
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, "Internal error processing getTags");
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTags", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTags", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getCategories implements ProcessFunction {
      public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        getCategories_args args = new getCategories_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCategories", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getCategories_result result = new getCategories_result();
        try {
          result.success = iface_.getCategories(args.token, args.accessId);
        } catch (everfeeds.thrift.error.Forbidden eF) {
          result.eF = eF;
        } catch (everfeeds.thrift.error.TokenExpired eE) {
          result.eE = eE;
        } catch (everfeeds.thrift.error.TokenNotFound eTNF) {
          result.eTNF = eTNF;
        } catch (everfeeds.thrift.error.NotFound eNF) {
          result.eNF = eNF;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing getCategories", th);
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, "Internal error processing getCategories");
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCategories", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCategories", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getKinds implements ProcessFunction {
      public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        getKinds_args args = new getKinds_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getKinds", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getKinds_result result = new getKinds_result();
        try {
          result.success = iface_.getKinds(args.token, args.accessId);
        } catch (everfeeds.thrift.error.Forbidden eF) {
          result.eF = eF;
        } catch (everfeeds.thrift.error.TokenExpired eE) {
          result.eE = eE;
        } catch (everfeeds.thrift.error.TokenNotFound eTNF) {
          result.eTNF = eTNF;
        } catch (everfeeds.thrift.error.NotFound eNF) {
          result.eNF = eNF;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing getKinds", th);
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, "Internal error processing getKinds");
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getKinds", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getKinds", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class saveTag implements ProcessFunction {
      public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        saveTag_args args = new saveTag_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveTag", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        saveTag_result result = new saveTag_result();
        try {
          result.success = iface_.saveTag(args.token, args.tag);
        } catch (everfeeds.thrift.error.Forbidden eF) {
          result.eF = eF;
        } catch (everfeeds.thrift.error.TokenExpired eE) {
          result.eE = eE;
        } catch (everfeeds.thrift.error.TokenNotFound eTNF) {
          result.eTNF = eTNF;
        } catch (everfeeds.thrift.error.NotFound eNF) {
          result.eNF = eNF;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing saveTag", th);
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, "Internal error processing saveTag");
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveTag", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveTag", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class saveCategory implements ProcessFunction {
      public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        saveCategory_args args = new saveCategory_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveCategory", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        saveCategory_result result = new saveCategory_result();
        try {
          result.success = iface_.saveCategory(args.token, args.category);
        } catch (everfeeds.thrift.error.Forbidden eF) {
          result.eF = eF;
        } catch (everfeeds.thrift.error.TokenExpired eE) {
          result.eE = eE;
        } catch (everfeeds.thrift.error.TokenNotFound eTNF) {
          result.eTNF = eTNF;
        } catch (everfeeds.thrift.error.NotFound eNF) {
          result.eNF = eNF;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing saveCategory", th);
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, "Internal error processing saveCategory");
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveCategory", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveCategory", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class saveFilter implements ProcessFunction {
      public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        saveFilter_args args = new saveFilter_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveFilter", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        saveFilter_result result = new saveFilter_result();
        try {
          result.success = iface_.saveFilter(args.token, args.filter);
        } catch (everfeeds.thrift.error.Forbidden eF) {
          result.eF = eF;
        } catch (everfeeds.thrift.error.TokenExpired eE) {
          result.eE = eE;
        } catch (everfeeds.thrift.error.TokenNotFound eTNF) {
          result.eTNF = eTNF;
        } catch (everfeeds.thrift.error.NotFound eNF) {
          result.eNF = eNF;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing saveFilter", th);
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, "Internal error processing saveFilter");
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveFilter", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveFilter", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getMash implements ProcessFunction {
      public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        getMash_args args = new getMash_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMash", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getMash_result result = new getMash_result();
        try {
          result.success = iface_.getMash(args.token, args.splitDate, args.page, args.maxCount);
        } catch (everfeeds.thrift.error.Forbidden eF) {
          result.eF = eF;
        } catch (everfeeds.thrift.error.TokenExpired eE) {
          result.eE = eE;
        } catch (everfeeds.thrift.error.TokenNotFound eTNF) {
          result.eTNF = eTNF;
        } catch (everfeeds.thrift.error.NotFound eNF) {
          result.eNF = eNF;
        } catch (everfeeds.thrift.error.WrongArgument e) {
          result.e = e;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing getMash", th);
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, "Internal error processing getMash");
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMash", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMash", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getMashNew implements ProcessFunction {
      public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        getMashNew_args args = new getMashNew_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMashNew", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getMashNew_result result = new getMashNew_result();
        try {
          result.success = iface_.getMashNew(args.token, args.splitDate, args.maxCount);
        } catch (everfeeds.thrift.error.Forbidden eF) {
          result.eF = eF;
        } catch (everfeeds.thrift.error.TokenExpired eE) {
          result.eE = eE;
        } catch (everfeeds.thrift.error.TokenNotFound eTNF) {
          result.eTNF = eTNF;
        } catch (everfeeds.thrift.error.NotFound eNF) {
          result.eNF = eNF;
        } catch (everfeeds.thrift.error.WrongArgument e) {
          result.e = e;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing getMashNew", th);
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, "Internal error processing getMashNew");
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMashNew", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMashNew", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getFiltered implements ProcessFunction {
      public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        getFiltered_args args = new getFiltered_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFiltered", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getFiltered_result result = new getFiltered_result();
        try {
          result.success = iface_.getFiltered(args.token, args.filter, args.page, args.maxCount);
        } catch (everfeeds.thrift.error.Forbidden eF) {
          result.eF = eF;
        } catch (everfeeds.thrift.error.TokenExpired eE) {
          result.eE = eE;
        } catch (everfeeds.thrift.error.TokenNotFound eTNF) {
          result.eTNF = eTNF;
        } catch (everfeeds.thrift.error.NotFound eNF) {
          result.eNF = eNF;
        } catch (everfeeds.thrift.error.WrongArgument e) {
          result.e = e;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing getFiltered", th);
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, "Internal error processing getFiltered");
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFiltered", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFiltered", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getFilteredNew implements ProcessFunction {
      public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        getFilteredNew_args args = new getFilteredNew_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFilteredNew", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getFilteredNew_result result = new getFilteredNew_result();
        try {
          result.success = iface_.getFilteredNew(args.token, args.filter);
        } catch (everfeeds.thrift.error.Forbidden eF) {
          result.eF = eF;
        } catch (everfeeds.thrift.error.TokenExpired eE) {
          result.eE = eE;
        } catch (everfeeds.thrift.error.TokenNotFound eTNF) {
          result.eTNF = eTNF;
        } catch (everfeeds.thrift.error.NotFound eNF) {
          result.eNF = eNF;
        } catch (everfeeds.thrift.error.WrongArgument e) {
          result.e = e;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing getFilteredNew", th);
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, "Internal error processing getFilteredNew");
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFilteredNew", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFilteredNew", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

  }

  public static class saveEntry_args implements org.apache.thrift.TBase<saveEntry_args, saveEntry_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveEntry_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ENTRY_FIELD_DESC = new org.apache.thrift.protocol.TField("entry", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    public String token;
    public everfeeds.thrift.domain.Entry entry;
    public everfeeds.thrift.domain.EntryContent content;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token"),
      ENTRY((short)3, "entry"),
      CONTENT((short)4, "content");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 3: // ENTRY
            return ENTRY;
          case 4: // CONTENT
            return CONTENT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "String")));
      tmpMap.put(_Fields.ENTRY, new org.apache.thrift.meta_data.FieldMetaData("entry", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, everfeeds.thrift.domain.Entry.class)));
      tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, everfeeds.thrift.domain.EntryContent.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveEntry_args.class, metaDataMap);
    }

    public saveEntry_args() {
    }

    public saveEntry_args(
      String token,
      everfeeds.thrift.domain.Entry entry,
      everfeeds.thrift.domain.EntryContent content)
    {
      this();
      this.token = token;
      this.entry = entry;
      this.content = content;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveEntry_args(saveEntry_args other) {
      if (other.isSetToken()) {
        this.token = other.token;
      }
      if (other.isSetEntry()) {
        this.entry = new everfeeds.thrift.domain.Entry(other.entry);
      }
      if (other.isSetContent()) {
        this.content = new everfeeds.thrift.domain.EntryContent(other.content);
      }
    }

    public saveEntry_args deepCopy() {
      return new saveEntry_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      this.entry = null;
      this.content = null;
    }

    public String getToken() {
      return this.token;
    }

    public saveEntry_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public everfeeds.thrift.domain.Entry getEntry() {
      return this.entry;
    }

    public saveEntry_args setEntry(everfeeds.thrift.domain.Entry entry) {
      this.entry = entry;
      return this;
    }

    public void unsetEntry() {
      this.entry = null;
    }

    /** Returns true if field entry is set (has been assigned a value) and false otherwise */
    public boolean isSetEntry() {
      return this.entry != null;
    }

    public void setEntryIsSet(boolean value) {
      if (!value) {
        this.entry = null;
      }
    }

    public everfeeds.thrift.domain.EntryContent getContent() {
      return this.content;
    }

    public saveEntry_args setContent(everfeeds.thrift.domain.EntryContent content) {
      this.content = content;
      return this;
    }

    public void unsetContent() {
      this.content = null;
    }

    /** Returns true if field content is set (has been assigned a value) and false otherwise */
    public boolean isSetContent() {
      return this.content != null;
    }

    public void setContentIsSet(boolean value) {
      if (!value) {
        this.content = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case ENTRY:
        if (value == null) {
          unsetEntry();
        } else {
          setEntry((everfeeds.thrift.domain.Entry)value);
        }
        break;

      case CONTENT:
        if (value == null) {
          unsetContent();
        } else {
          setContent((everfeeds.thrift.domain.EntryContent)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case ENTRY:
        return getEntry();

      case CONTENT:
        return getContent();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case ENTRY:
        return isSetEntry();
      case CONTENT:
        return isSetContent();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveEntry_args)
        return this.equals((saveEntry_args)that);
      return false;
    }

    public boolean equals(saveEntry_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_entry = true && this.isSetEntry();
      boolean that_present_entry = true && that.isSetEntry();
      if (this_present_entry || that_present_entry) {
        if (!(this_present_entry && that_present_entry))
          return false;
        if (!this.entry.equals(that.entry))
          return false;
      }

      boolean this_present_content = true && this.isSetContent();
      boolean that_present_content = true && that.isSetContent();
      if (this_present_content || that_present_content) {
        if (!(this_present_content && that_present_content))
          return false;
        if (!this.content.equals(that.content))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(saveEntry_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      saveEntry_args typedOther = (saveEntry_args)other;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(typedOther.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, typedOther.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEntry()).compareTo(typedOther.isSetEntry());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEntry()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entry, typedOther.entry);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetContent()).compareTo(typedOther.isSetContent());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContent()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, typedOther.content);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // TOKEN
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.token = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // ENTRY
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.entry = new everfeeds.thrift.domain.Entry();
              this.entry.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // CONTENT
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.content = new everfeeds.thrift.domain.EntryContent();
              this.content.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.token != null) {
        oprot.writeFieldBegin(TOKEN_FIELD_DESC);
        oprot.writeString(this.token);
        oprot.writeFieldEnd();
      }
      if (this.entry != null) {
        oprot.writeFieldBegin(ENTRY_FIELD_DESC);
        this.entry.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.content != null) {
        oprot.writeFieldBegin(CONTENT_FIELD_DESC);
        this.content.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveEntry_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("entry:");
      if (this.entry == null) {
        sb.append("null");
      } else {
        sb.append(this.entry);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("content:");
      if (this.content == null) {
        sb.append("null");
      } else {
        sb.append(this.content);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class saveEntry_result implements org.apache.thrift.TBase<saveEntry_result, saveEntry_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveEntry_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_F_FIELD_DESC = new org.apache.thrift.protocol.TField("eF", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField E_E_FIELD_DESC = new org.apache.thrift.protocol.TField("eE", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField E_TNF_FIELD_DESC = new org.apache.thrift.protocol.TField("eTNF", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField E_NF_FIELD_DESC = new org.apache.thrift.protocol.TField("eNF", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    public everfeeds.thrift.domain.Entry success;
    public everfeeds.thrift.error.Forbidden eF;
    public everfeeds.thrift.error.TokenExpired eE;
    public everfeeds.thrift.error.TokenNotFound eTNF;
    public everfeeds.thrift.error.NotFound eNF;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E_F((short)1, "eF"),
      E_E((short)2, "eE"),
      E_TNF((short)3, "eTNF"),
      E_NF((short)4, "eNF");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E_F
            return E_F;
          case 2: // E_E
            return E_E;
          case 3: // E_TNF
            return E_TNF;
          case 4: // E_NF
            return E_NF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, everfeeds.thrift.domain.Entry.class)));
      tmpMap.put(_Fields.E_F, new org.apache.thrift.meta_data.FieldMetaData("eF", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_E, new org.apache.thrift.meta_data.FieldMetaData("eE", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_TNF, new org.apache.thrift.meta_data.FieldMetaData("eTNF", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_NF, new org.apache.thrift.meta_data.FieldMetaData("eNF", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveEntry_result.class, metaDataMap);
    }

    public saveEntry_result() {
    }

    public saveEntry_result(
      everfeeds.thrift.domain.Entry success,
      everfeeds.thrift.error.Forbidden eF,
      everfeeds.thrift.error.TokenExpired eE,
      everfeeds.thrift.error.TokenNotFound eTNF,
      everfeeds.thrift.error.NotFound eNF)
    {
      this();
      this.success = success;
      this.eF = eF;
      this.eE = eE;
      this.eTNF = eTNF;
      this.eNF = eNF;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveEntry_result(saveEntry_result other) {
      if (other.isSetSuccess()) {
        this.success = new everfeeds.thrift.domain.Entry(other.success);
      }
      if (other.isSetEF()) {
        this.eF = new everfeeds.thrift.error.Forbidden(other.eF);
      }
      if (other.isSetEE()) {
        this.eE = new everfeeds.thrift.error.TokenExpired(other.eE);
      }
      if (other.isSetETNF()) {
        this.eTNF = new everfeeds.thrift.error.TokenNotFound(other.eTNF);
      }
      if (other.isSetENF()) {
        this.eNF = new everfeeds.thrift.error.NotFound(other.eNF);
      }
    }

    public saveEntry_result deepCopy() {
      return new saveEntry_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.eF = null;
      this.eE = null;
      this.eTNF = null;
      this.eNF = null;
    }

    public everfeeds.thrift.domain.Entry getSuccess() {
      return this.success;
    }

    public saveEntry_result setSuccess(everfeeds.thrift.domain.Entry success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public everfeeds.thrift.error.Forbidden getEF() {
      return this.eF;
    }

    public saveEntry_result setEF(everfeeds.thrift.error.Forbidden eF) {
      this.eF = eF;
      return this;
    }

    public void unsetEF() {
      this.eF = null;
    }

    /** Returns true if field eF is set (has been assigned a value) and false otherwise */
    public boolean isSetEF() {
      return this.eF != null;
    }

    public void setEFIsSet(boolean value) {
      if (!value) {
        this.eF = null;
      }
    }

    public everfeeds.thrift.error.TokenExpired getEE() {
      return this.eE;
    }

    public saveEntry_result setEE(everfeeds.thrift.error.TokenExpired eE) {
      this.eE = eE;
      return this;
    }

    public void unsetEE() {
      this.eE = null;
    }

    /** Returns true if field eE is set (has been assigned a value) and false otherwise */
    public boolean isSetEE() {
      return this.eE != null;
    }

    public void setEEIsSet(boolean value) {
      if (!value) {
        this.eE = null;
      }
    }

    public everfeeds.thrift.error.TokenNotFound getETNF() {
      return this.eTNF;
    }

    public saveEntry_result setETNF(everfeeds.thrift.error.TokenNotFound eTNF) {
      this.eTNF = eTNF;
      return this;
    }

    public void unsetETNF() {
      this.eTNF = null;
    }

    /** Returns true if field eTNF is set (has been assigned a value) and false otherwise */
    public boolean isSetETNF() {
      return this.eTNF != null;
    }

    public void setETNFIsSet(boolean value) {
      if (!value) {
        this.eTNF = null;
      }
    }

    public everfeeds.thrift.error.NotFound getENF() {
      return this.eNF;
    }

    public saveEntry_result setENF(everfeeds.thrift.error.NotFound eNF) {
      this.eNF = eNF;
      return this;
    }

    public void unsetENF() {
      this.eNF = null;
    }

    /** Returns true if field eNF is set (has been assigned a value) and false otherwise */
    public boolean isSetENF() {
      return this.eNF != null;
    }

    public void setENFIsSet(boolean value) {
      if (!value) {
        this.eNF = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((everfeeds.thrift.domain.Entry)value);
        }
        break;

      case E_F:
        if (value == null) {
          unsetEF();
        } else {
          setEF((everfeeds.thrift.error.Forbidden)value);
        }
        break;

      case E_E:
        if (value == null) {
          unsetEE();
        } else {
          setEE((everfeeds.thrift.error.TokenExpired)value);
        }
        break;

      case E_TNF:
        if (value == null) {
          unsetETNF();
        } else {
          setETNF((everfeeds.thrift.error.TokenNotFound)value);
        }
        break;

      case E_NF:
        if (value == null) {
          unsetENF();
        } else {
          setENF((everfeeds.thrift.error.NotFound)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E_F:
        return getEF();

      case E_E:
        return getEE();

      case E_TNF:
        return getETNF();

      case E_NF:
        return getENF();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E_F:
        return isSetEF();
      case E_E:
        return isSetEE();
      case E_TNF:
        return isSetETNF();
      case E_NF:
        return isSetENF();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveEntry_result)
        return this.equals((saveEntry_result)that);
      return false;
    }

    public boolean equals(saveEntry_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_eF = true && this.isSetEF();
      boolean that_present_eF = true && that.isSetEF();
      if (this_present_eF || that_present_eF) {
        if (!(this_present_eF && that_present_eF))
          return false;
        if (!this.eF.equals(that.eF))
          return false;
      }

      boolean this_present_eE = true && this.isSetEE();
      boolean that_present_eE = true && that.isSetEE();
      if (this_present_eE || that_present_eE) {
        if (!(this_present_eE && that_present_eE))
          return false;
        if (!this.eE.equals(that.eE))
          return false;
      }

      boolean this_present_eTNF = true && this.isSetETNF();
      boolean that_present_eTNF = true && that.isSetETNF();
      if (this_present_eTNF || that_present_eTNF) {
        if (!(this_present_eTNF && that_present_eTNF))
          return false;
        if (!this.eTNF.equals(that.eTNF))
          return false;
      }

      boolean this_present_eNF = true && this.isSetENF();
      boolean that_present_eNF = true && that.isSetENF();
      if (this_present_eNF || that_present_eNF) {
        if (!(this_present_eNF && that_present_eNF))
          return false;
        if (!this.eNF.equals(that.eNF))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(saveEntry_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      saveEntry_result typedOther = (saveEntry_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEF()).compareTo(typedOther.isSetEF());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEF()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eF, typedOther.eF);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEE()).compareTo(typedOther.isSetEE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eE, typedOther.eE);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetETNF()).compareTo(typedOther.isSetETNF());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetETNF()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eTNF, typedOther.eTNF);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetENF()).compareTo(typedOther.isSetENF());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetENF()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eNF, typedOther.eNF);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.success = new everfeeds.thrift.domain.Entry();
              this.success.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E_F
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eF = new everfeeds.thrift.error.Forbidden();
              this.eF.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // E_E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eE = new everfeeds.thrift.error.TokenExpired();
              this.eE.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // E_TNF
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eTNF = new everfeeds.thrift.error.TokenNotFound();
              this.eTNF.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // E_NF
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eNF = new everfeeds.thrift.error.NotFound();
              this.eNF.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetEF()) {
        oprot.writeFieldBegin(E_F_FIELD_DESC);
        this.eF.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetEE()) {
        oprot.writeFieldBegin(E_E_FIELD_DESC);
        this.eE.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetETNF()) {
        oprot.writeFieldBegin(E_TNF_FIELD_DESC);
        this.eTNF.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetENF()) {
        oprot.writeFieldBegin(E_NF_FIELD_DESC);
        this.eNF.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveEntry_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eF:");
      if (this.eF == null) {
        sb.append("null");
      } else {
        sb.append(this.eF);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eE:");
      if (this.eE == null) {
        sb.append("null");
      } else {
        sb.append(this.eE);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eTNF:");
      if (this.eTNF == null) {
        sb.append("null");
      } else {
        sb.append(this.eTNF);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eNF:");
      if (this.eNF == null) {
        sb.append("null");
      } else {
        sb.append(this.eNF);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getEntryContent_args implements org.apache.thrift.TBase<getEntryContent_args, getEntryContent_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEntryContent_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ENTRY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("entryId", org.apache.thrift.protocol.TType.STRING, (short)5);

    public String token;
    public String entryId;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token"),
      ENTRY_ID((short)5, "entryId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 5: // ENTRY_ID
            return ENTRY_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "String")));
      tmpMap.put(_Fields.ENTRY_ID, new org.apache.thrift.meta_data.FieldMetaData("entryId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "Id")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEntryContent_args.class, metaDataMap);
    }

    public getEntryContent_args() {
    }

    public getEntryContent_args(
      String token,
      String entryId)
    {
      this();
      this.token = token;
      this.entryId = entryId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEntryContent_args(getEntryContent_args other) {
      if (other.isSetToken()) {
        this.token = other.token;
      }
      if (other.isSetEntryId()) {
        this.entryId = other.entryId;
      }
    }

    public getEntryContent_args deepCopy() {
      return new getEntryContent_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      this.entryId = null;
    }

    public String getToken() {
      return this.token;
    }

    public getEntryContent_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public String getEntryId() {
      return this.entryId;
    }

    public getEntryContent_args setEntryId(String entryId) {
      this.entryId = entryId;
      return this;
    }

    public void unsetEntryId() {
      this.entryId = null;
    }

    /** Returns true if field entryId is set (has been assigned a value) and false otherwise */
    public boolean isSetEntryId() {
      return this.entryId != null;
    }

    public void setEntryIdIsSet(boolean value) {
      if (!value) {
        this.entryId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case ENTRY_ID:
        if (value == null) {
          unsetEntryId();
        } else {
          setEntryId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case ENTRY_ID:
        return getEntryId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case ENTRY_ID:
        return isSetEntryId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getEntryContent_args)
        return this.equals((getEntryContent_args)that);
      return false;
    }

    public boolean equals(getEntryContent_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_entryId = true && this.isSetEntryId();
      boolean that_present_entryId = true && that.isSetEntryId();
      if (this_present_entryId || that_present_entryId) {
        if (!(this_present_entryId && that_present_entryId))
          return false;
        if (!this.entryId.equals(that.entryId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getEntryContent_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getEntryContent_args typedOther = (getEntryContent_args)other;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(typedOther.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, typedOther.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEntryId()).compareTo(typedOther.isSetEntryId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEntryId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entryId, typedOther.entryId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // TOKEN
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.token = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // ENTRY_ID
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.entryId = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.token != null) {
        oprot.writeFieldBegin(TOKEN_FIELD_DESC);
        oprot.writeString(this.token);
        oprot.writeFieldEnd();
      }
      if (this.entryId != null) {
        oprot.writeFieldBegin(ENTRY_ID_FIELD_DESC);
        oprot.writeString(this.entryId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getEntryContent_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("entryId:");
      if (this.entryId == null) {
        sb.append("null");
      } else {
        sb.append(this.entryId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getEntryContent_result implements org.apache.thrift.TBase<getEntryContent_result, getEntryContent_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEntryContent_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_F_FIELD_DESC = new org.apache.thrift.protocol.TField("eF", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField E_E_FIELD_DESC = new org.apache.thrift.protocol.TField("eE", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField E_TNF_FIELD_DESC = new org.apache.thrift.protocol.TField("eTNF", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField E_NF_FIELD_DESC = new org.apache.thrift.protocol.TField("eNF", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    public everfeeds.thrift.domain.EntryContent success;
    public everfeeds.thrift.error.Forbidden eF;
    public everfeeds.thrift.error.TokenExpired eE;
    public everfeeds.thrift.error.TokenNotFound eTNF;
    public everfeeds.thrift.error.NotFound eNF;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E_F((short)1, "eF"),
      E_E((short)2, "eE"),
      E_TNF((short)3, "eTNF"),
      E_NF((short)4, "eNF");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E_F
            return E_F;
          case 2: // E_E
            return E_E;
          case 3: // E_TNF
            return E_TNF;
          case 4: // E_NF
            return E_NF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, everfeeds.thrift.domain.EntryContent.class)));
      tmpMap.put(_Fields.E_F, new org.apache.thrift.meta_data.FieldMetaData("eF", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_E, new org.apache.thrift.meta_data.FieldMetaData("eE", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_TNF, new org.apache.thrift.meta_data.FieldMetaData("eTNF", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_NF, new org.apache.thrift.meta_data.FieldMetaData("eNF", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEntryContent_result.class, metaDataMap);
    }

    public getEntryContent_result() {
    }

    public getEntryContent_result(
      everfeeds.thrift.domain.EntryContent success,
      everfeeds.thrift.error.Forbidden eF,
      everfeeds.thrift.error.TokenExpired eE,
      everfeeds.thrift.error.TokenNotFound eTNF,
      everfeeds.thrift.error.NotFound eNF)
    {
      this();
      this.success = success;
      this.eF = eF;
      this.eE = eE;
      this.eTNF = eTNF;
      this.eNF = eNF;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEntryContent_result(getEntryContent_result other) {
      if (other.isSetSuccess()) {
        this.success = new everfeeds.thrift.domain.EntryContent(other.success);
      }
      if (other.isSetEF()) {
        this.eF = new everfeeds.thrift.error.Forbidden(other.eF);
      }
      if (other.isSetEE()) {
        this.eE = new everfeeds.thrift.error.TokenExpired(other.eE);
      }
      if (other.isSetETNF()) {
        this.eTNF = new everfeeds.thrift.error.TokenNotFound(other.eTNF);
      }
      if (other.isSetENF()) {
        this.eNF = new everfeeds.thrift.error.NotFound(other.eNF);
      }
    }

    public getEntryContent_result deepCopy() {
      return new getEntryContent_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.eF = null;
      this.eE = null;
      this.eTNF = null;
      this.eNF = null;
    }

    public everfeeds.thrift.domain.EntryContent getSuccess() {
      return this.success;
    }

    public getEntryContent_result setSuccess(everfeeds.thrift.domain.EntryContent success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public everfeeds.thrift.error.Forbidden getEF() {
      return this.eF;
    }

    public getEntryContent_result setEF(everfeeds.thrift.error.Forbidden eF) {
      this.eF = eF;
      return this;
    }

    public void unsetEF() {
      this.eF = null;
    }

    /** Returns true if field eF is set (has been assigned a value) and false otherwise */
    public boolean isSetEF() {
      return this.eF != null;
    }

    public void setEFIsSet(boolean value) {
      if (!value) {
        this.eF = null;
      }
    }

    public everfeeds.thrift.error.TokenExpired getEE() {
      return this.eE;
    }

    public getEntryContent_result setEE(everfeeds.thrift.error.TokenExpired eE) {
      this.eE = eE;
      return this;
    }

    public void unsetEE() {
      this.eE = null;
    }

    /** Returns true if field eE is set (has been assigned a value) and false otherwise */
    public boolean isSetEE() {
      return this.eE != null;
    }

    public void setEEIsSet(boolean value) {
      if (!value) {
        this.eE = null;
      }
    }

    public everfeeds.thrift.error.TokenNotFound getETNF() {
      return this.eTNF;
    }

    public getEntryContent_result setETNF(everfeeds.thrift.error.TokenNotFound eTNF) {
      this.eTNF = eTNF;
      return this;
    }

    public void unsetETNF() {
      this.eTNF = null;
    }

    /** Returns true if field eTNF is set (has been assigned a value) and false otherwise */
    public boolean isSetETNF() {
      return this.eTNF != null;
    }

    public void setETNFIsSet(boolean value) {
      if (!value) {
        this.eTNF = null;
      }
    }

    public everfeeds.thrift.error.NotFound getENF() {
      return this.eNF;
    }

    public getEntryContent_result setENF(everfeeds.thrift.error.NotFound eNF) {
      this.eNF = eNF;
      return this;
    }

    public void unsetENF() {
      this.eNF = null;
    }

    /** Returns true if field eNF is set (has been assigned a value) and false otherwise */
    public boolean isSetENF() {
      return this.eNF != null;
    }

    public void setENFIsSet(boolean value) {
      if (!value) {
        this.eNF = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((everfeeds.thrift.domain.EntryContent)value);
        }
        break;

      case E_F:
        if (value == null) {
          unsetEF();
        } else {
          setEF((everfeeds.thrift.error.Forbidden)value);
        }
        break;

      case E_E:
        if (value == null) {
          unsetEE();
        } else {
          setEE((everfeeds.thrift.error.TokenExpired)value);
        }
        break;

      case E_TNF:
        if (value == null) {
          unsetETNF();
        } else {
          setETNF((everfeeds.thrift.error.TokenNotFound)value);
        }
        break;

      case E_NF:
        if (value == null) {
          unsetENF();
        } else {
          setENF((everfeeds.thrift.error.NotFound)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E_F:
        return getEF();

      case E_E:
        return getEE();

      case E_TNF:
        return getETNF();

      case E_NF:
        return getENF();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E_F:
        return isSetEF();
      case E_E:
        return isSetEE();
      case E_TNF:
        return isSetETNF();
      case E_NF:
        return isSetENF();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getEntryContent_result)
        return this.equals((getEntryContent_result)that);
      return false;
    }

    public boolean equals(getEntryContent_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_eF = true && this.isSetEF();
      boolean that_present_eF = true && that.isSetEF();
      if (this_present_eF || that_present_eF) {
        if (!(this_present_eF && that_present_eF))
          return false;
        if (!this.eF.equals(that.eF))
          return false;
      }

      boolean this_present_eE = true && this.isSetEE();
      boolean that_present_eE = true && that.isSetEE();
      if (this_present_eE || that_present_eE) {
        if (!(this_present_eE && that_present_eE))
          return false;
        if (!this.eE.equals(that.eE))
          return false;
      }

      boolean this_present_eTNF = true && this.isSetETNF();
      boolean that_present_eTNF = true && that.isSetETNF();
      if (this_present_eTNF || that_present_eTNF) {
        if (!(this_present_eTNF && that_present_eTNF))
          return false;
        if (!this.eTNF.equals(that.eTNF))
          return false;
      }

      boolean this_present_eNF = true && this.isSetENF();
      boolean that_present_eNF = true && that.isSetENF();
      if (this_present_eNF || that_present_eNF) {
        if (!(this_present_eNF && that_present_eNF))
          return false;
        if (!this.eNF.equals(that.eNF))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getEntryContent_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getEntryContent_result typedOther = (getEntryContent_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEF()).compareTo(typedOther.isSetEF());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEF()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eF, typedOther.eF);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEE()).compareTo(typedOther.isSetEE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eE, typedOther.eE);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetETNF()).compareTo(typedOther.isSetETNF());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetETNF()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eTNF, typedOther.eTNF);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetENF()).compareTo(typedOther.isSetENF());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetENF()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eNF, typedOther.eNF);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.success = new everfeeds.thrift.domain.EntryContent();
              this.success.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E_F
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eF = new everfeeds.thrift.error.Forbidden();
              this.eF.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // E_E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eE = new everfeeds.thrift.error.TokenExpired();
              this.eE.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // E_TNF
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eTNF = new everfeeds.thrift.error.TokenNotFound();
              this.eTNF.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // E_NF
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eNF = new everfeeds.thrift.error.NotFound();
              this.eNF.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetEF()) {
        oprot.writeFieldBegin(E_F_FIELD_DESC);
        this.eF.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetEE()) {
        oprot.writeFieldBegin(E_E_FIELD_DESC);
        this.eE.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetETNF()) {
        oprot.writeFieldBegin(E_TNF_FIELD_DESC);
        this.eTNF.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetENF()) {
        oprot.writeFieldBegin(E_NF_FIELD_DESC);
        this.eNF.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getEntryContent_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eF:");
      if (this.eF == null) {
        sb.append("null");
      } else {
        sb.append(this.eF);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eE:");
      if (this.eE == null) {
        sb.append("null");
      } else {
        sb.append(this.eE);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eTNF:");
      if (this.eTNF == null) {
        sb.append("null");
      } else {
        sb.append(this.eTNF);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eNF:");
      if (this.eNF == null) {
        sb.append("null");
      } else {
        sb.append(this.eNF);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getEntry_args implements org.apache.thrift.TBase<getEntry_args, getEntry_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEntry_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ENTRY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("entryId", org.apache.thrift.protocol.TType.STRING, (short)5);

    public String token;
    public String entryId;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token"),
      ENTRY_ID((short)5, "entryId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 5: // ENTRY_ID
            return ENTRY_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "String")));
      tmpMap.put(_Fields.ENTRY_ID, new org.apache.thrift.meta_data.FieldMetaData("entryId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "Id")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEntry_args.class, metaDataMap);
    }

    public getEntry_args() {
    }

    public getEntry_args(
      String token,
      String entryId)
    {
      this();
      this.token = token;
      this.entryId = entryId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEntry_args(getEntry_args other) {
      if (other.isSetToken()) {
        this.token = other.token;
      }
      if (other.isSetEntryId()) {
        this.entryId = other.entryId;
      }
    }

    public getEntry_args deepCopy() {
      return new getEntry_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      this.entryId = null;
    }

    public String getToken() {
      return this.token;
    }

    public getEntry_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public String getEntryId() {
      return this.entryId;
    }

    public getEntry_args setEntryId(String entryId) {
      this.entryId = entryId;
      return this;
    }

    public void unsetEntryId() {
      this.entryId = null;
    }

    /** Returns true if field entryId is set (has been assigned a value) and false otherwise */
    public boolean isSetEntryId() {
      return this.entryId != null;
    }

    public void setEntryIdIsSet(boolean value) {
      if (!value) {
        this.entryId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case ENTRY_ID:
        if (value == null) {
          unsetEntryId();
        } else {
          setEntryId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case ENTRY_ID:
        return getEntryId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case ENTRY_ID:
        return isSetEntryId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getEntry_args)
        return this.equals((getEntry_args)that);
      return false;
    }

    public boolean equals(getEntry_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_entryId = true && this.isSetEntryId();
      boolean that_present_entryId = true && that.isSetEntryId();
      if (this_present_entryId || that_present_entryId) {
        if (!(this_present_entryId && that_present_entryId))
          return false;
        if (!this.entryId.equals(that.entryId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getEntry_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getEntry_args typedOther = (getEntry_args)other;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(typedOther.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, typedOther.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEntryId()).compareTo(typedOther.isSetEntryId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEntryId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entryId, typedOther.entryId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // TOKEN
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.token = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // ENTRY_ID
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.entryId = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.token != null) {
        oprot.writeFieldBegin(TOKEN_FIELD_DESC);
        oprot.writeString(this.token);
        oprot.writeFieldEnd();
      }
      if (this.entryId != null) {
        oprot.writeFieldBegin(ENTRY_ID_FIELD_DESC);
        oprot.writeString(this.entryId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getEntry_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("entryId:");
      if (this.entryId == null) {
        sb.append("null");
      } else {
        sb.append(this.entryId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getEntry_result implements org.apache.thrift.TBase<getEntry_result, getEntry_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEntry_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_F_FIELD_DESC = new org.apache.thrift.protocol.TField("eF", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField E_E_FIELD_DESC = new org.apache.thrift.protocol.TField("eE", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField E_TNF_FIELD_DESC = new org.apache.thrift.protocol.TField("eTNF", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField E_NF_FIELD_DESC = new org.apache.thrift.protocol.TField("eNF", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    public everfeeds.thrift.domain.Entry success;
    public everfeeds.thrift.error.Forbidden eF;
    public everfeeds.thrift.error.TokenExpired eE;
    public everfeeds.thrift.error.TokenNotFound eTNF;
    public everfeeds.thrift.error.NotFound eNF;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E_F((short)1, "eF"),
      E_E((short)2, "eE"),
      E_TNF((short)3, "eTNF"),
      E_NF((short)4, "eNF");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E_F
            return E_F;
          case 2: // E_E
            return E_E;
          case 3: // E_TNF
            return E_TNF;
          case 4: // E_NF
            return E_NF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, everfeeds.thrift.domain.Entry.class)));
      tmpMap.put(_Fields.E_F, new org.apache.thrift.meta_data.FieldMetaData("eF", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_E, new org.apache.thrift.meta_data.FieldMetaData("eE", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_TNF, new org.apache.thrift.meta_data.FieldMetaData("eTNF", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_NF, new org.apache.thrift.meta_data.FieldMetaData("eNF", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEntry_result.class, metaDataMap);
    }

    public getEntry_result() {
    }

    public getEntry_result(
      everfeeds.thrift.domain.Entry success,
      everfeeds.thrift.error.Forbidden eF,
      everfeeds.thrift.error.TokenExpired eE,
      everfeeds.thrift.error.TokenNotFound eTNF,
      everfeeds.thrift.error.NotFound eNF)
    {
      this();
      this.success = success;
      this.eF = eF;
      this.eE = eE;
      this.eTNF = eTNF;
      this.eNF = eNF;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEntry_result(getEntry_result other) {
      if (other.isSetSuccess()) {
        this.success = new everfeeds.thrift.domain.Entry(other.success);
      }
      if (other.isSetEF()) {
        this.eF = new everfeeds.thrift.error.Forbidden(other.eF);
      }
      if (other.isSetEE()) {
        this.eE = new everfeeds.thrift.error.TokenExpired(other.eE);
      }
      if (other.isSetETNF()) {
        this.eTNF = new everfeeds.thrift.error.TokenNotFound(other.eTNF);
      }
      if (other.isSetENF()) {
        this.eNF = new everfeeds.thrift.error.NotFound(other.eNF);
      }
    }

    public getEntry_result deepCopy() {
      return new getEntry_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.eF = null;
      this.eE = null;
      this.eTNF = null;
      this.eNF = null;
    }

    public everfeeds.thrift.domain.Entry getSuccess() {
      return this.success;
    }

    public getEntry_result setSuccess(everfeeds.thrift.domain.Entry success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public everfeeds.thrift.error.Forbidden getEF() {
      return this.eF;
    }

    public getEntry_result setEF(everfeeds.thrift.error.Forbidden eF) {
      this.eF = eF;
      return this;
    }

    public void unsetEF() {
      this.eF = null;
    }

    /** Returns true if field eF is set (has been assigned a value) and false otherwise */
    public boolean isSetEF() {
      return this.eF != null;
    }

    public void setEFIsSet(boolean value) {
      if (!value) {
        this.eF = null;
      }
    }

    public everfeeds.thrift.error.TokenExpired getEE() {
      return this.eE;
    }

    public getEntry_result setEE(everfeeds.thrift.error.TokenExpired eE) {
      this.eE = eE;
      return this;
    }

    public void unsetEE() {
      this.eE = null;
    }

    /** Returns true if field eE is set (has been assigned a value) and false otherwise */
    public boolean isSetEE() {
      return this.eE != null;
    }

    public void setEEIsSet(boolean value) {
      if (!value) {
        this.eE = null;
      }
    }

    public everfeeds.thrift.error.TokenNotFound getETNF() {
      return this.eTNF;
    }

    public getEntry_result setETNF(everfeeds.thrift.error.TokenNotFound eTNF) {
      this.eTNF = eTNF;
      return this;
    }

    public void unsetETNF() {
      this.eTNF = null;
    }

    /** Returns true if field eTNF is set (has been assigned a value) and false otherwise */
    public boolean isSetETNF() {
      return this.eTNF != null;
    }

    public void setETNFIsSet(boolean value) {
      if (!value) {
        this.eTNF = null;
      }
    }

    public everfeeds.thrift.error.NotFound getENF() {
      return this.eNF;
    }

    public getEntry_result setENF(everfeeds.thrift.error.NotFound eNF) {
      this.eNF = eNF;
      return this;
    }

    public void unsetENF() {
      this.eNF = null;
    }

    /** Returns true if field eNF is set (has been assigned a value) and false otherwise */
    public boolean isSetENF() {
      return this.eNF != null;
    }

    public void setENFIsSet(boolean value) {
      if (!value) {
        this.eNF = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((everfeeds.thrift.domain.Entry)value);
        }
        break;

      case E_F:
        if (value == null) {
          unsetEF();
        } else {
          setEF((everfeeds.thrift.error.Forbidden)value);
        }
        break;

      case E_E:
        if (value == null) {
          unsetEE();
        } else {
          setEE((everfeeds.thrift.error.TokenExpired)value);
        }
        break;

      case E_TNF:
        if (value == null) {
          unsetETNF();
        } else {
          setETNF((everfeeds.thrift.error.TokenNotFound)value);
        }
        break;

      case E_NF:
        if (value == null) {
          unsetENF();
        } else {
          setENF((everfeeds.thrift.error.NotFound)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E_F:
        return getEF();

      case E_E:
        return getEE();

      case E_TNF:
        return getETNF();

      case E_NF:
        return getENF();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E_F:
        return isSetEF();
      case E_E:
        return isSetEE();
      case E_TNF:
        return isSetETNF();
      case E_NF:
        return isSetENF();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getEntry_result)
        return this.equals((getEntry_result)that);
      return false;
    }

    public boolean equals(getEntry_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_eF = true && this.isSetEF();
      boolean that_present_eF = true && that.isSetEF();
      if (this_present_eF || that_present_eF) {
        if (!(this_present_eF && that_present_eF))
          return false;
        if (!this.eF.equals(that.eF))
          return false;
      }

      boolean this_present_eE = true && this.isSetEE();
      boolean that_present_eE = true && that.isSetEE();
      if (this_present_eE || that_present_eE) {
        if (!(this_present_eE && that_present_eE))
          return false;
        if (!this.eE.equals(that.eE))
          return false;
      }

      boolean this_present_eTNF = true && this.isSetETNF();
      boolean that_present_eTNF = true && that.isSetETNF();
      if (this_present_eTNF || that_present_eTNF) {
        if (!(this_present_eTNF && that_present_eTNF))
          return false;
        if (!this.eTNF.equals(that.eTNF))
          return false;
      }

      boolean this_present_eNF = true && this.isSetENF();
      boolean that_present_eNF = true && that.isSetENF();
      if (this_present_eNF || that_present_eNF) {
        if (!(this_present_eNF && that_present_eNF))
          return false;
        if (!this.eNF.equals(that.eNF))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getEntry_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getEntry_result typedOther = (getEntry_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEF()).compareTo(typedOther.isSetEF());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEF()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eF, typedOther.eF);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEE()).compareTo(typedOther.isSetEE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eE, typedOther.eE);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetETNF()).compareTo(typedOther.isSetETNF());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetETNF()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eTNF, typedOther.eTNF);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetENF()).compareTo(typedOther.isSetENF());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetENF()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eNF, typedOther.eNF);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.success = new everfeeds.thrift.domain.Entry();
              this.success.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E_F
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eF = new everfeeds.thrift.error.Forbidden();
              this.eF.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // E_E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eE = new everfeeds.thrift.error.TokenExpired();
              this.eE.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // E_TNF
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eTNF = new everfeeds.thrift.error.TokenNotFound();
              this.eTNF.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // E_NF
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eNF = new everfeeds.thrift.error.NotFound();
              this.eNF.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetEF()) {
        oprot.writeFieldBegin(E_F_FIELD_DESC);
        this.eF.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetEE()) {
        oprot.writeFieldBegin(E_E_FIELD_DESC);
        this.eE.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetETNF()) {
        oprot.writeFieldBegin(E_TNF_FIELD_DESC);
        this.eTNF.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetENF()) {
        oprot.writeFieldBegin(E_NF_FIELD_DESC);
        this.eNF.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getEntry_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eF:");
      if (this.eF == null) {
        sb.append("null");
      } else {
        sb.append(this.eF);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eE:");
      if (this.eE == null) {
        sb.append("null");
      } else {
        sb.append(this.eE);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eTNF:");
      if (this.eTNF == null) {
        sb.append("null");
      } else {
        sb.append(this.eTNF);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eNF:");
      if (this.eNF == null) {
        sb.append("null");
      } else {
        sb.append(this.eNF);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class markEntryRead_args implements org.apache.thrift.TBase<markEntryRead_args, markEntryRead_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("markEntryRead_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ENTRY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("entryId", org.apache.thrift.protocol.TType.STRING, (short)2);

    public String token;
    public String entryId;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token"),
      ENTRY_ID((short)2, "entryId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 2: // ENTRY_ID
            return ENTRY_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "String")));
      tmpMap.put(_Fields.ENTRY_ID, new org.apache.thrift.meta_data.FieldMetaData("entryId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "Id")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(markEntryRead_args.class, metaDataMap);
    }

    public markEntryRead_args() {
    }

    public markEntryRead_args(
      String token,
      String entryId)
    {
      this();
      this.token = token;
      this.entryId = entryId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public markEntryRead_args(markEntryRead_args other) {
      if (other.isSetToken()) {
        this.token = other.token;
      }
      if (other.isSetEntryId()) {
        this.entryId = other.entryId;
      }
    }

    public markEntryRead_args deepCopy() {
      return new markEntryRead_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      this.entryId = null;
    }

    public String getToken() {
      return this.token;
    }

    public markEntryRead_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public String getEntryId() {
      return this.entryId;
    }

    public markEntryRead_args setEntryId(String entryId) {
      this.entryId = entryId;
      return this;
    }

    public void unsetEntryId() {
      this.entryId = null;
    }

    /** Returns true if field entryId is set (has been assigned a value) and false otherwise */
    public boolean isSetEntryId() {
      return this.entryId != null;
    }

    public void setEntryIdIsSet(boolean value) {
      if (!value) {
        this.entryId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case ENTRY_ID:
        if (value == null) {
          unsetEntryId();
        } else {
          setEntryId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case ENTRY_ID:
        return getEntryId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case ENTRY_ID:
        return isSetEntryId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof markEntryRead_args)
        return this.equals((markEntryRead_args)that);
      return false;
    }

    public boolean equals(markEntryRead_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_entryId = true && this.isSetEntryId();
      boolean that_present_entryId = true && that.isSetEntryId();
      if (this_present_entryId || that_present_entryId) {
        if (!(this_present_entryId && that_present_entryId))
          return false;
        if (!this.entryId.equals(that.entryId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(markEntryRead_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      markEntryRead_args typedOther = (markEntryRead_args)other;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(typedOther.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, typedOther.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEntryId()).compareTo(typedOther.isSetEntryId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEntryId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entryId, typedOther.entryId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // TOKEN
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.token = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // ENTRY_ID
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.entryId = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.token != null) {
        oprot.writeFieldBegin(TOKEN_FIELD_DESC);
        oprot.writeString(this.token);
        oprot.writeFieldEnd();
      }
      if (this.entryId != null) {
        oprot.writeFieldBegin(ENTRY_ID_FIELD_DESC);
        oprot.writeString(this.entryId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("markEntryRead_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("entryId:");
      if (this.entryId == null) {
        sb.append("null");
      } else {
        sb.append(this.entryId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class markEntryRead_result implements org.apache.thrift.TBase<markEntryRead_result, markEntryRead_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("markEntryRead_result");

    private static final org.apache.thrift.protocol.TField E_F_FIELD_DESC = new org.apache.thrift.protocol.TField("eF", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField E_E_FIELD_DESC = new org.apache.thrift.protocol.TField("eE", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField E_TNF_FIELD_DESC = new org.apache.thrift.protocol.TField("eTNF", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField E_NF_FIELD_DESC = new org.apache.thrift.protocol.TField("eNF", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    public everfeeds.thrift.error.Forbidden eF;
    public everfeeds.thrift.error.TokenExpired eE;
    public everfeeds.thrift.error.TokenNotFound eTNF;
    public everfeeds.thrift.error.NotFound eNF;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E_F((short)1, "eF"),
      E_E((short)2, "eE"),
      E_TNF((short)3, "eTNF"),
      E_NF((short)4, "eNF");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E_F
            return E_F;
          case 2: // E_E
            return E_E;
          case 3: // E_TNF
            return E_TNF;
          case 4: // E_NF
            return E_NF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E_F, new org.apache.thrift.meta_data.FieldMetaData("eF", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_E, new org.apache.thrift.meta_data.FieldMetaData("eE", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_TNF, new org.apache.thrift.meta_data.FieldMetaData("eTNF", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_NF, new org.apache.thrift.meta_data.FieldMetaData("eNF", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(markEntryRead_result.class, metaDataMap);
    }

    public markEntryRead_result() {
    }

    public markEntryRead_result(
      everfeeds.thrift.error.Forbidden eF,
      everfeeds.thrift.error.TokenExpired eE,
      everfeeds.thrift.error.TokenNotFound eTNF,
      everfeeds.thrift.error.NotFound eNF)
    {
      this();
      this.eF = eF;
      this.eE = eE;
      this.eTNF = eTNF;
      this.eNF = eNF;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public markEntryRead_result(markEntryRead_result other) {
      if (other.isSetEF()) {
        this.eF = new everfeeds.thrift.error.Forbidden(other.eF);
      }
      if (other.isSetEE()) {
        this.eE = new everfeeds.thrift.error.TokenExpired(other.eE);
      }
      if (other.isSetETNF()) {
        this.eTNF = new everfeeds.thrift.error.TokenNotFound(other.eTNF);
      }
      if (other.isSetENF()) {
        this.eNF = new everfeeds.thrift.error.NotFound(other.eNF);
      }
    }

    public markEntryRead_result deepCopy() {
      return new markEntryRead_result(this);
    }

    @Override
    public void clear() {
      this.eF = null;
      this.eE = null;
      this.eTNF = null;
      this.eNF = null;
    }

    public everfeeds.thrift.error.Forbidden getEF() {
      return this.eF;
    }

    public markEntryRead_result setEF(everfeeds.thrift.error.Forbidden eF) {
      this.eF = eF;
      return this;
    }

    public void unsetEF() {
      this.eF = null;
    }

    /** Returns true if field eF is set (has been assigned a value) and false otherwise */
    public boolean isSetEF() {
      return this.eF != null;
    }

    public void setEFIsSet(boolean value) {
      if (!value) {
        this.eF = null;
      }
    }

    public everfeeds.thrift.error.TokenExpired getEE() {
      return this.eE;
    }

    public markEntryRead_result setEE(everfeeds.thrift.error.TokenExpired eE) {
      this.eE = eE;
      return this;
    }

    public void unsetEE() {
      this.eE = null;
    }

    /** Returns true if field eE is set (has been assigned a value) and false otherwise */
    public boolean isSetEE() {
      return this.eE != null;
    }

    public void setEEIsSet(boolean value) {
      if (!value) {
        this.eE = null;
      }
    }

    public everfeeds.thrift.error.TokenNotFound getETNF() {
      return this.eTNF;
    }

    public markEntryRead_result setETNF(everfeeds.thrift.error.TokenNotFound eTNF) {
      this.eTNF = eTNF;
      return this;
    }

    public void unsetETNF() {
      this.eTNF = null;
    }

    /** Returns true if field eTNF is set (has been assigned a value) and false otherwise */
    public boolean isSetETNF() {
      return this.eTNF != null;
    }

    public void setETNFIsSet(boolean value) {
      if (!value) {
        this.eTNF = null;
      }
    }

    public everfeeds.thrift.error.NotFound getENF() {
      return this.eNF;
    }

    public markEntryRead_result setENF(everfeeds.thrift.error.NotFound eNF) {
      this.eNF = eNF;
      return this;
    }

    public void unsetENF() {
      this.eNF = null;
    }

    /** Returns true if field eNF is set (has been assigned a value) and false otherwise */
    public boolean isSetENF() {
      return this.eNF != null;
    }

    public void setENFIsSet(boolean value) {
      if (!value) {
        this.eNF = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E_F:
        if (value == null) {
          unsetEF();
        } else {
          setEF((everfeeds.thrift.error.Forbidden)value);
        }
        break;

      case E_E:
        if (value == null) {
          unsetEE();
        } else {
          setEE((everfeeds.thrift.error.TokenExpired)value);
        }
        break;

      case E_TNF:
        if (value == null) {
          unsetETNF();
        } else {
          setETNF((everfeeds.thrift.error.TokenNotFound)value);
        }
        break;

      case E_NF:
        if (value == null) {
          unsetENF();
        } else {
          setENF((everfeeds.thrift.error.NotFound)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E_F:
        return getEF();

      case E_E:
        return getEE();

      case E_TNF:
        return getETNF();

      case E_NF:
        return getENF();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E_F:
        return isSetEF();
      case E_E:
        return isSetEE();
      case E_TNF:
        return isSetETNF();
      case E_NF:
        return isSetENF();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof markEntryRead_result)
        return this.equals((markEntryRead_result)that);
      return false;
    }

    public boolean equals(markEntryRead_result that) {
      if (that == null)
        return false;

      boolean this_present_eF = true && this.isSetEF();
      boolean that_present_eF = true && that.isSetEF();
      if (this_present_eF || that_present_eF) {
        if (!(this_present_eF && that_present_eF))
          return false;
        if (!this.eF.equals(that.eF))
          return false;
      }

      boolean this_present_eE = true && this.isSetEE();
      boolean that_present_eE = true && that.isSetEE();
      if (this_present_eE || that_present_eE) {
        if (!(this_present_eE && that_present_eE))
          return false;
        if (!this.eE.equals(that.eE))
          return false;
      }

      boolean this_present_eTNF = true && this.isSetETNF();
      boolean that_present_eTNF = true && that.isSetETNF();
      if (this_present_eTNF || that_present_eTNF) {
        if (!(this_present_eTNF && that_present_eTNF))
          return false;
        if (!this.eTNF.equals(that.eTNF))
          return false;
      }

      boolean this_present_eNF = true && this.isSetENF();
      boolean that_present_eNF = true && that.isSetENF();
      if (this_present_eNF || that_present_eNF) {
        if (!(this_present_eNF && that_present_eNF))
          return false;
        if (!this.eNF.equals(that.eNF))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(markEntryRead_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      markEntryRead_result typedOther = (markEntryRead_result)other;

      lastComparison = Boolean.valueOf(isSetEF()).compareTo(typedOther.isSetEF());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEF()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eF, typedOther.eF);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEE()).compareTo(typedOther.isSetEE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eE, typedOther.eE);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetETNF()).compareTo(typedOther.isSetETNF());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetETNF()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eTNF, typedOther.eTNF);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetENF()).compareTo(typedOther.isSetENF());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetENF()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eNF, typedOther.eNF);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E_F
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eF = new everfeeds.thrift.error.Forbidden();
              this.eF.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // E_E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eE = new everfeeds.thrift.error.TokenExpired();
              this.eE.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // E_TNF
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eTNF = new everfeeds.thrift.error.TokenNotFound();
              this.eTNF.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // E_NF
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eNF = new everfeeds.thrift.error.NotFound();
              this.eNF.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetEF()) {
        oprot.writeFieldBegin(E_F_FIELD_DESC);
        this.eF.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetEE()) {
        oprot.writeFieldBegin(E_E_FIELD_DESC);
        this.eE.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetETNF()) {
        oprot.writeFieldBegin(E_TNF_FIELD_DESC);
        this.eTNF.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetENF()) {
        oprot.writeFieldBegin(E_NF_FIELD_DESC);
        this.eNF.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("markEntryRead_result(");
      boolean first = true;

      sb.append("eF:");
      if (this.eF == null) {
        sb.append("null");
      } else {
        sb.append(this.eF);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eE:");
      if (this.eE == null) {
        sb.append("null");
      } else {
        sb.append(this.eE);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eTNF:");
      if (this.eTNF == null) {
        sb.append("null");
      } else {
        sb.append(this.eTNF);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eNF:");
      if (this.eNF == null) {
        sb.append("null");
      } else {
        sb.append(this.eNF);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class markEntryUnread_args implements org.apache.thrift.TBase<markEntryUnread_args, markEntryUnread_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("markEntryUnread_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ENTRY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("entryId", org.apache.thrift.protocol.TType.STRING, (short)2);

    public String token;
    public String entryId;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token"),
      ENTRY_ID((short)2, "entryId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 2: // ENTRY_ID
            return ENTRY_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "String")));
      tmpMap.put(_Fields.ENTRY_ID, new org.apache.thrift.meta_data.FieldMetaData("entryId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "Id")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(markEntryUnread_args.class, metaDataMap);
    }

    public markEntryUnread_args() {
    }

    public markEntryUnread_args(
      String token,
      String entryId)
    {
      this();
      this.token = token;
      this.entryId = entryId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public markEntryUnread_args(markEntryUnread_args other) {
      if (other.isSetToken()) {
        this.token = other.token;
      }
      if (other.isSetEntryId()) {
        this.entryId = other.entryId;
      }
    }

    public markEntryUnread_args deepCopy() {
      return new markEntryUnread_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      this.entryId = null;
    }

    public String getToken() {
      return this.token;
    }

    public markEntryUnread_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public String getEntryId() {
      return this.entryId;
    }

    public markEntryUnread_args setEntryId(String entryId) {
      this.entryId = entryId;
      return this;
    }

    public void unsetEntryId() {
      this.entryId = null;
    }

    /** Returns true if field entryId is set (has been assigned a value) and false otherwise */
    public boolean isSetEntryId() {
      return this.entryId != null;
    }

    public void setEntryIdIsSet(boolean value) {
      if (!value) {
        this.entryId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case ENTRY_ID:
        if (value == null) {
          unsetEntryId();
        } else {
          setEntryId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case ENTRY_ID:
        return getEntryId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case ENTRY_ID:
        return isSetEntryId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof markEntryUnread_args)
        return this.equals((markEntryUnread_args)that);
      return false;
    }

    public boolean equals(markEntryUnread_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_entryId = true && this.isSetEntryId();
      boolean that_present_entryId = true && that.isSetEntryId();
      if (this_present_entryId || that_present_entryId) {
        if (!(this_present_entryId && that_present_entryId))
          return false;
        if (!this.entryId.equals(that.entryId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(markEntryUnread_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      markEntryUnread_args typedOther = (markEntryUnread_args)other;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(typedOther.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, typedOther.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEntryId()).compareTo(typedOther.isSetEntryId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEntryId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entryId, typedOther.entryId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // TOKEN
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.token = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // ENTRY_ID
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.entryId = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.token != null) {
        oprot.writeFieldBegin(TOKEN_FIELD_DESC);
        oprot.writeString(this.token);
        oprot.writeFieldEnd();
      }
      if (this.entryId != null) {
        oprot.writeFieldBegin(ENTRY_ID_FIELD_DESC);
        oprot.writeString(this.entryId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("markEntryUnread_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("entryId:");
      if (this.entryId == null) {
        sb.append("null");
      } else {
        sb.append(this.entryId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class markEntryUnread_result implements org.apache.thrift.TBase<markEntryUnread_result, markEntryUnread_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("markEntryUnread_result");

    private static final org.apache.thrift.protocol.TField E_F_FIELD_DESC = new org.apache.thrift.protocol.TField("eF", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField E_E_FIELD_DESC = new org.apache.thrift.protocol.TField("eE", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField E_TNF_FIELD_DESC = new org.apache.thrift.protocol.TField("eTNF", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField E_NF_FIELD_DESC = new org.apache.thrift.protocol.TField("eNF", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    public everfeeds.thrift.error.Forbidden eF;
    public everfeeds.thrift.error.TokenExpired eE;
    public everfeeds.thrift.error.TokenNotFound eTNF;
    public everfeeds.thrift.error.NotFound eNF;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E_F((short)1, "eF"),
      E_E((short)2, "eE"),
      E_TNF((short)3, "eTNF"),
      E_NF((short)4, "eNF");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E_F
            return E_F;
          case 2: // E_E
            return E_E;
          case 3: // E_TNF
            return E_TNF;
          case 4: // E_NF
            return E_NF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E_F, new org.apache.thrift.meta_data.FieldMetaData("eF", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_E, new org.apache.thrift.meta_data.FieldMetaData("eE", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_TNF, new org.apache.thrift.meta_data.FieldMetaData("eTNF", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_NF, new org.apache.thrift.meta_data.FieldMetaData("eNF", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(markEntryUnread_result.class, metaDataMap);
    }

    public markEntryUnread_result() {
    }

    public markEntryUnread_result(
      everfeeds.thrift.error.Forbidden eF,
      everfeeds.thrift.error.TokenExpired eE,
      everfeeds.thrift.error.TokenNotFound eTNF,
      everfeeds.thrift.error.NotFound eNF)
    {
      this();
      this.eF = eF;
      this.eE = eE;
      this.eTNF = eTNF;
      this.eNF = eNF;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public markEntryUnread_result(markEntryUnread_result other) {
      if (other.isSetEF()) {
        this.eF = new everfeeds.thrift.error.Forbidden(other.eF);
      }
      if (other.isSetEE()) {
        this.eE = new everfeeds.thrift.error.TokenExpired(other.eE);
      }
      if (other.isSetETNF()) {
        this.eTNF = new everfeeds.thrift.error.TokenNotFound(other.eTNF);
      }
      if (other.isSetENF()) {
        this.eNF = new everfeeds.thrift.error.NotFound(other.eNF);
      }
    }

    public markEntryUnread_result deepCopy() {
      return new markEntryUnread_result(this);
    }

    @Override
    public void clear() {
      this.eF = null;
      this.eE = null;
      this.eTNF = null;
      this.eNF = null;
    }

    public everfeeds.thrift.error.Forbidden getEF() {
      return this.eF;
    }

    public markEntryUnread_result setEF(everfeeds.thrift.error.Forbidden eF) {
      this.eF = eF;
      return this;
    }

    public void unsetEF() {
      this.eF = null;
    }

    /** Returns true if field eF is set (has been assigned a value) and false otherwise */
    public boolean isSetEF() {
      return this.eF != null;
    }

    public void setEFIsSet(boolean value) {
      if (!value) {
        this.eF = null;
      }
    }

    public everfeeds.thrift.error.TokenExpired getEE() {
      return this.eE;
    }

    public markEntryUnread_result setEE(everfeeds.thrift.error.TokenExpired eE) {
      this.eE = eE;
      return this;
    }

    public void unsetEE() {
      this.eE = null;
    }

    /** Returns true if field eE is set (has been assigned a value) and false otherwise */
    public boolean isSetEE() {
      return this.eE != null;
    }

    public void setEEIsSet(boolean value) {
      if (!value) {
        this.eE = null;
      }
    }

    public everfeeds.thrift.error.TokenNotFound getETNF() {
      return this.eTNF;
    }

    public markEntryUnread_result setETNF(everfeeds.thrift.error.TokenNotFound eTNF) {
      this.eTNF = eTNF;
      return this;
    }

    public void unsetETNF() {
      this.eTNF = null;
    }

    /** Returns true if field eTNF is set (has been assigned a value) and false otherwise */
    public boolean isSetETNF() {
      return this.eTNF != null;
    }

    public void setETNFIsSet(boolean value) {
      if (!value) {
        this.eTNF = null;
      }
    }

    public everfeeds.thrift.error.NotFound getENF() {
      return this.eNF;
    }

    public markEntryUnread_result setENF(everfeeds.thrift.error.NotFound eNF) {
      this.eNF = eNF;
      return this;
    }

    public void unsetENF() {
      this.eNF = null;
    }

    /** Returns true if field eNF is set (has been assigned a value) and false otherwise */
    public boolean isSetENF() {
      return this.eNF != null;
    }

    public void setENFIsSet(boolean value) {
      if (!value) {
        this.eNF = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E_F:
        if (value == null) {
          unsetEF();
        } else {
          setEF((everfeeds.thrift.error.Forbidden)value);
        }
        break;

      case E_E:
        if (value == null) {
          unsetEE();
        } else {
          setEE((everfeeds.thrift.error.TokenExpired)value);
        }
        break;

      case E_TNF:
        if (value == null) {
          unsetETNF();
        } else {
          setETNF((everfeeds.thrift.error.TokenNotFound)value);
        }
        break;

      case E_NF:
        if (value == null) {
          unsetENF();
        } else {
          setENF((everfeeds.thrift.error.NotFound)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E_F:
        return getEF();

      case E_E:
        return getEE();

      case E_TNF:
        return getETNF();

      case E_NF:
        return getENF();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E_F:
        return isSetEF();
      case E_E:
        return isSetEE();
      case E_TNF:
        return isSetETNF();
      case E_NF:
        return isSetENF();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof markEntryUnread_result)
        return this.equals((markEntryUnread_result)that);
      return false;
    }

    public boolean equals(markEntryUnread_result that) {
      if (that == null)
        return false;

      boolean this_present_eF = true && this.isSetEF();
      boolean that_present_eF = true && that.isSetEF();
      if (this_present_eF || that_present_eF) {
        if (!(this_present_eF && that_present_eF))
          return false;
        if (!this.eF.equals(that.eF))
          return false;
      }

      boolean this_present_eE = true && this.isSetEE();
      boolean that_present_eE = true && that.isSetEE();
      if (this_present_eE || that_present_eE) {
        if (!(this_present_eE && that_present_eE))
          return false;
        if (!this.eE.equals(that.eE))
          return false;
      }

      boolean this_present_eTNF = true && this.isSetETNF();
      boolean that_present_eTNF = true && that.isSetETNF();
      if (this_present_eTNF || that_present_eTNF) {
        if (!(this_present_eTNF && that_present_eTNF))
          return false;
        if (!this.eTNF.equals(that.eTNF))
          return false;
      }

      boolean this_present_eNF = true && this.isSetENF();
      boolean that_present_eNF = true && that.isSetENF();
      if (this_present_eNF || that_present_eNF) {
        if (!(this_present_eNF && that_present_eNF))
          return false;
        if (!this.eNF.equals(that.eNF))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(markEntryUnread_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      markEntryUnread_result typedOther = (markEntryUnread_result)other;

      lastComparison = Boolean.valueOf(isSetEF()).compareTo(typedOther.isSetEF());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEF()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eF, typedOther.eF);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEE()).compareTo(typedOther.isSetEE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eE, typedOther.eE);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetETNF()).compareTo(typedOther.isSetETNF());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetETNF()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eTNF, typedOther.eTNF);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetENF()).compareTo(typedOther.isSetENF());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetENF()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eNF, typedOther.eNF);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E_F
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eF = new everfeeds.thrift.error.Forbidden();
              this.eF.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // E_E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eE = new everfeeds.thrift.error.TokenExpired();
              this.eE.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // E_TNF
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eTNF = new everfeeds.thrift.error.TokenNotFound();
              this.eTNF.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // E_NF
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eNF = new everfeeds.thrift.error.NotFound();
              this.eNF.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetEF()) {
        oprot.writeFieldBegin(E_F_FIELD_DESC);
        this.eF.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetEE()) {
        oprot.writeFieldBegin(E_E_FIELD_DESC);
        this.eE.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetETNF()) {
        oprot.writeFieldBegin(E_TNF_FIELD_DESC);
        this.eTNF.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetENF()) {
        oprot.writeFieldBegin(E_NF_FIELD_DESC);
        this.eNF.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("markEntryUnread_result(");
      boolean first = true;

      sb.append("eF:");
      if (this.eF == null) {
        sb.append("null");
      } else {
        sb.append(this.eF);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eE:");
      if (this.eE == null) {
        sb.append("null");
      } else {
        sb.append(this.eE);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eTNF:");
      if (this.eTNF == null) {
        sb.append("null");
      } else {
        sb.append(this.eTNF);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eNF:");
      if (this.eNF == null) {
        sb.append("null");
      } else {
        sb.append(this.eNF);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getAccount_args implements org.apache.thrift.TBase<getAccount_args, getAccount_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAccount_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)1);

    public String token;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "String")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAccount_args.class, metaDataMap);
    }

    public getAccount_args() {
    }

    public getAccount_args(
      String token)
    {
      this();
      this.token = token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAccount_args(getAccount_args other) {
      if (other.isSetToken()) {
        this.token = other.token;
      }
    }

    public getAccount_args deepCopy() {
      return new getAccount_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
    }

    public String getToken() {
      return this.token;
    }

    public getAccount_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAccount_args)
        return this.equals((getAccount_args)that);
      return false;
    }

    public boolean equals(getAccount_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getAccount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getAccount_args typedOther = (getAccount_args)other;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(typedOther.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, typedOther.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // TOKEN
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.token = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.token != null) {
        oprot.writeFieldBegin(TOKEN_FIELD_DESC);
        oprot.writeString(this.token);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAccount_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getAccount_result implements org.apache.thrift.TBase<getAccount_result, getAccount_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAccount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_F_FIELD_DESC = new org.apache.thrift.protocol.TField("eF", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField E_E_FIELD_DESC = new org.apache.thrift.protocol.TField("eE", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField E_TNF_FIELD_DESC = new org.apache.thrift.protocol.TField("eTNF", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField E_NF_FIELD_DESC = new org.apache.thrift.protocol.TField("eNF", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    public everfeeds.thrift.domain.Account success;
    public everfeeds.thrift.error.Forbidden eF;
    public everfeeds.thrift.error.TokenExpired eE;
    public everfeeds.thrift.error.TokenNotFound eTNF;
    public everfeeds.thrift.error.NotFound eNF;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E_F((short)1, "eF"),
      E_E((short)2, "eE"),
      E_TNF((short)3, "eTNF"),
      E_NF((short)4, "eNF");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E_F
            return E_F;
          case 2: // E_E
            return E_E;
          case 3: // E_TNF
            return E_TNF;
          case 4: // E_NF
            return E_NF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, everfeeds.thrift.domain.Account.class)));
      tmpMap.put(_Fields.E_F, new org.apache.thrift.meta_data.FieldMetaData("eF", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_E, new org.apache.thrift.meta_data.FieldMetaData("eE", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_TNF, new org.apache.thrift.meta_data.FieldMetaData("eTNF", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_NF, new org.apache.thrift.meta_data.FieldMetaData("eNF", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAccount_result.class, metaDataMap);
    }

    public getAccount_result() {
    }

    public getAccount_result(
      everfeeds.thrift.domain.Account success,
      everfeeds.thrift.error.Forbidden eF,
      everfeeds.thrift.error.TokenExpired eE,
      everfeeds.thrift.error.TokenNotFound eTNF,
      everfeeds.thrift.error.NotFound eNF)
    {
      this();
      this.success = success;
      this.eF = eF;
      this.eE = eE;
      this.eTNF = eTNF;
      this.eNF = eNF;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAccount_result(getAccount_result other) {
      if (other.isSetSuccess()) {
        this.success = new everfeeds.thrift.domain.Account(other.success);
      }
      if (other.isSetEF()) {
        this.eF = new everfeeds.thrift.error.Forbidden(other.eF);
      }
      if (other.isSetEE()) {
        this.eE = new everfeeds.thrift.error.TokenExpired(other.eE);
      }
      if (other.isSetETNF()) {
        this.eTNF = new everfeeds.thrift.error.TokenNotFound(other.eTNF);
      }
      if (other.isSetENF()) {
        this.eNF = new everfeeds.thrift.error.NotFound(other.eNF);
      }
    }

    public getAccount_result deepCopy() {
      return new getAccount_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.eF = null;
      this.eE = null;
      this.eTNF = null;
      this.eNF = null;
    }

    public everfeeds.thrift.domain.Account getSuccess() {
      return this.success;
    }

    public getAccount_result setSuccess(everfeeds.thrift.domain.Account success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public everfeeds.thrift.error.Forbidden getEF() {
      return this.eF;
    }

    public getAccount_result setEF(everfeeds.thrift.error.Forbidden eF) {
      this.eF = eF;
      return this;
    }

    public void unsetEF() {
      this.eF = null;
    }

    /** Returns true if field eF is set (has been assigned a value) and false otherwise */
    public boolean isSetEF() {
      return this.eF != null;
    }

    public void setEFIsSet(boolean value) {
      if (!value) {
        this.eF = null;
      }
    }

    public everfeeds.thrift.error.TokenExpired getEE() {
      return this.eE;
    }

    public getAccount_result setEE(everfeeds.thrift.error.TokenExpired eE) {
      this.eE = eE;
      return this;
    }

    public void unsetEE() {
      this.eE = null;
    }

    /** Returns true if field eE is set (has been assigned a value) and false otherwise */
    public boolean isSetEE() {
      return this.eE != null;
    }

    public void setEEIsSet(boolean value) {
      if (!value) {
        this.eE = null;
      }
    }

    public everfeeds.thrift.error.TokenNotFound getETNF() {
      return this.eTNF;
    }

    public getAccount_result setETNF(everfeeds.thrift.error.TokenNotFound eTNF) {
      this.eTNF = eTNF;
      return this;
    }

    public void unsetETNF() {
      this.eTNF = null;
    }

    /** Returns true if field eTNF is set (has been assigned a value) and false otherwise */
    public boolean isSetETNF() {
      return this.eTNF != null;
    }

    public void setETNFIsSet(boolean value) {
      if (!value) {
        this.eTNF = null;
      }
    }

    public everfeeds.thrift.error.NotFound getENF() {
      return this.eNF;
    }

    public getAccount_result setENF(everfeeds.thrift.error.NotFound eNF) {
      this.eNF = eNF;
      return this;
    }

    public void unsetENF() {
      this.eNF = null;
    }

    /** Returns true if field eNF is set (has been assigned a value) and false otherwise */
    public boolean isSetENF() {
      return this.eNF != null;
    }

    public void setENFIsSet(boolean value) {
      if (!value) {
        this.eNF = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((everfeeds.thrift.domain.Account)value);
        }
        break;

      case E_F:
        if (value == null) {
          unsetEF();
        } else {
          setEF((everfeeds.thrift.error.Forbidden)value);
        }
        break;

      case E_E:
        if (value == null) {
          unsetEE();
        } else {
          setEE((everfeeds.thrift.error.TokenExpired)value);
        }
        break;

      case E_TNF:
        if (value == null) {
          unsetETNF();
        } else {
          setETNF((everfeeds.thrift.error.TokenNotFound)value);
        }
        break;

      case E_NF:
        if (value == null) {
          unsetENF();
        } else {
          setENF((everfeeds.thrift.error.NotFound)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E_F:
        return getEF();

      case E_E:
        return getEE();

      case E_TNF:
        return getETNF();

      case E_NF:
        return getENF();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E_F:
        return isSetEF();
      case E_E:
        return isSetEE();
      case E_TNF:
        return isSetETNF();
      case E_NF:
        return isSetENF();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAccount_result)
        return this.equals((getAccount_result)that);
      return false;
    }

    public boolean equals(getAccount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_eF = true && this.isSetEF();
      boolean that_present_eF = true && that.isSetEF();
      if (this_present_eF || that_present_eF) {
        if (!(this_present_eF && that_present_eF))
          return false;
        if (!this.eF.equals(that.eF))
          return false;
      }

      boolean this_present_eE = true && this.isSetEE();
      boolean that_present_eE = true && that.isSetEE();
      if (this_present_eE || that_present_eE) {
        if (!(this_present_eE && that_present_eE))
          return false;
        if (!this.eE.equals(that.eE))
          return false;
      }

      boolean this_present_eTNF = true && this.isSetETNF();
      boolean that_present_eTNF = true && that.isSetETNF();
      if (this_present_eTNF || that_present_eTNF) {
        if (!(this_present_eTNF && that_present_eTNF))
          return false;
        if (!this.eTNF.equals(that.eTNF))
          return false;
      }

      boolean this_present_eNF = true && this.isSetENF();
      boolean that_present_eNF = true && that.isSetENF();
      if (this_present_eNF || that_present_eNF) {
        if (!(this_present_eNF && that_present_eNF))
          return false;
        if (!this.eNF.equals(that.eNF))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getAccount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getAccount_result typedOther = (getAccount_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEF()).compareTo(typedOther.isSetEF());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEF()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eF, typedOther.eF);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEE()).compareTo(typedOther.isSetEE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eE, typedOther.eE);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetETNF()).compareTo(typedOther.isSetETNF());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetETNF()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eTNF, typedOther.eTNF);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetENF()).compareTo(typedOther.isSetENF());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetENF()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eNF, typedOther.eNF);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.success = new everfeeds.thrift.domain.Account();
              this.success.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E_F
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eF = new everfeeds.thrift.error.Forbidden();
              this.eF.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // E_E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eE = new everfeeds.thrift.error.TokenExpired();
              this.eE.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // E_TNF
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eTNF = new everfeeds.thrift.error.TokenNotFound();
              this.eTNF.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // E_NF
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eNF = new everfeeds.thrift.error.NotFound();
              this.eNF.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetEF()) {
        oprot.writeFieldBegin(E_F_FIELD_DESC);
        this.eF.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetEE()) {
        oprot.writeFieldBegin(E_E_FIELD_DESC);
        this.eE.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetETNF()) {
        oprot.writeFieldBegin(E_TNF_FIELD_DESC);
        this.eTNF.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetENF()) {
        oprot.writeFieldBegin(E_NF_FIELD_DESC);
        this.eNF.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAccount_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eF:");
      if (this.eF == null) {
        sb.append("null");
      } else {
        sb.append(this.eF);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eE:");
      if (this.eE == null) {
        sb.append("null");
      } else {
        sb.append(this.eE);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eTNF:");
      if (this.eTNF == null) {
        sb.append("null");
      } else {
        sb.append(this.eTNF);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eNF:");
      if (this.eNF == null) {
        sb.append("null");
      } else {
        sb.append(this.eNF);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getAccesses_args implements org.apache.thrift.TBase<getAccesses_args, getAccesses_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAccesses_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)1);

    public String token;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "String")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAccesses_args.class, metaDataMap);
    }

    public getAccesses_args() {
    }

    public getAccesses_args(
      String token)
    {
      this();
      this.token = token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAccesses_args(getAccesses_args other) {
      if (other.isSetToken()) {
        this.token = other.token;
      }
    }

    public getAccesses_args deepCopy() {
      return new getAccesses_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
    }

    public String getToken() {
      return this.token;
    }

    public getAccesses_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAccesses_args)
        return this.equals((getAccesses_args)that);
      return false;
    }

    public boolean equals(getAccesses_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getAccesses_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getAccesses_args typedOther = (getAccesses_args)other;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(typedOther.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, typedOther.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // TOKEN
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.token = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.token != null) {
        oprot.writeFieldBegin(TOKEN_FIELD_DESC);
        oprot.writeString(this.token);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAccesses_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getAccesses_result implements org.apache.thrift.TBase<getAccesses_result, getAccesses_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAccesses_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_F_FIELD_DESC = new org.apache.thrift.protocol.TField("eF", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField E_E_FIELD_DESC = new org.apache.thrift.protocol.TField("eE", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField E_TNF_FIELD_DESC = new org.apache.thrift.protocol.TField("eTNF", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField E_NF_FIELD_DESC = new org.apache.thrift.protocol.TField("eNF", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    public List<everfeeds.thrift.domain.Access> success;
    public everfeeds.thrift.error.Forbidden eF;
    public everfeeds.thrift.error.TokenExpired eE;
    public everfeeds.thrift.error.TokenNotFound eTNF;
    public everfeeds.thrift.error.NotFound eNF;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E_F((short)1, "eF"),
      E_E((short)2, "eE"),
      E_TNF((short)3, "eTNF"),
      E_NF((short)4, "eNF");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E_F
            return E_F;
          case 2: // E_E
            return E_E;
          case 3: // E_TNF
            return E_TNF;
          case 4: // E_NF
            return E_NF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, everfeeds.thrift.domain.Access.class))));
      tmpMap.put(_Fields.E_F, new org.apache.thrift.meta_data.FieldMetaData("eF", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_E, new org.apache.thrift.meta_data.FieldMetaData("eE", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_TNF, new org.apache.thrift.meta_data.FieldMetaData("eTNF", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_NF, new org.apache.thrift.meta_data.FieldMetaData("eNF", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAccesses_result.class, metaDataMap);
    }

    public getAccesses_result() {
    }

    public getAccesses_result(
      List<everfeeds.thrift.domain.Access> success,
      everfeeds.thrift.error.Forbidden eF,
      everfeeds.thrift.error.TokenExpired eE,
      everfeeds.thrift.error.TokenNotFound eTNF,
      everfeeds.thrift.error.NotFound eNF)
    {
      this();
      this.success = success;
      this.eF = eF;
      this.eE = eE;
      this.eTNF = eTNF;
      this.eNF = eNF;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAccesses_result(getAccesses_result other) {
      if (other.isSetSuccess()) {
        List<everfeeds.thrift.domain.Access> __this__success = new ArrayList<everfeeds.thrift.domain.Access>();
        for (everfeeds.thrift.domain.Access other_element : other.success) {
          __this__success.add(new everfeeds.thrift.domain.Access(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetEF()) {
        this.eF = new everfeeds.thrift.error.Forbidden(other.eF);
      }
      if (other.isSetEE()) {
        this.eE = new everfeeds.thrift.error.TokenExpired(other.eE);
      }
      if (other.isSetETNF()) {
        this.eTNF = new everfeeds.thrift.error.TokenNotFound(other.eTNF);
      }
      if (other.isSetENF()) {
        this.eNF = new everfeeds.thrift.error.NotFound(other.eNF);
      }
    }

    public getAccesses_result deepCopy() {
      return new getAccesses_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.eF = null;
      this.eE = null;
      this.eTNF = null;
      this.eNF = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<everfeeds.thrift.domain.Access> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(everfeeds.thrift.domain.Access elem) {
      if (this.success == null) {
        this.success = new ArrayList<everfeeds.thrift.domain.Access>();
      }
      this.success.add(elem);
    }

    public List<everfeeds.thrift.domain.Access> getSuccess() {
      return this.success;
    }

    public getAccesses_result setSuccess(List<everfeeds.thrift.domain.Access> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public everfeeds.thrift.error.Forbidden getEF() {
      return this.eF;
    }

    public getAccesses_result setEF(everfeeds.thrift.error.Forbidden eF) {
      this.eF = eF;
      return this;
    }

    public void unsetEF() {
      this.eF = null;
    }

    /** Returns true if field eF is set (has been assigned a value) and false otherwise */
    public boolean isSetEF() {
      return this.eF != null;
    }

    public void setEFIsSet(boolean value) {
      if (!value) {
        this.eF = null;
      }
    }

    public everfeeds.thrift.error.TokenExpired getEE() {
      return this.eE;
    }

    public getAccesses_result setEE(everfeeds.thrift.error.TokenExpired eE) {
      this.eE = eE;
      return this;
    }

    public void unsetEE() {
      this.eE = null;
    }

    /** Returns true if field eE is set (has been assigned a value) and false otherwise */
    public boolean isSetEE() {
      return this.eE != null;
    }

    public void setEEIsSet(boolean value) {
      if (!value) {
        this.eE = null;
      }
    }

    public everfeeds.thrift.error.TokenNotFound getETNF() {
      return this.eTNF;
    }

    public getAccesses_result setETNF(everfeeds.thrift.error.TokenNotFound eTNF) {
      this.eTNF = eTNF;
      return this;
    }

    public void unsetETNF() {
      this.eTNF = null;
    }

    /** Returns true if field eTNF is set (has been assigned a value) and false otherwise */
    public boolean isSetETNF() {
      return this.eTNF != null;
    }

    public void setETNFIsSet(boolean value) {
      if (!value) {
        this.eTNF = null;
      }
    }

    public everfeeds.thrift.error.NotFound getENF() {
      return this.eNF;
    }

    public getAccesses_result setENF(everfeeds.thrift.error.NotFound eNF) {
      this.eNF = eNF;
      return this;
    }

    public void unsetENF() {
      this.eNF = null;
    }

    /** Returns true if field eNF is set (has been assigned a value) and false otherwise */
    public boolean isSetENF() {
      return this.eNF != null;
    }

    public void setENFIsSet(boolean value) {
      if (!value) {
        this.eNF = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<everfeeds.thrift.domain.Access>)value);
        }
        break;

      case E_F:
        if (value == null) {
          unsetEF();
        } else {
          setEF((everfeeds.thrift.error.Forbidden)value);
        }
        break;

      case E_E:
        if (value == null) {
          unsetEE();
        } else {
          setEE((everfeeds.thrift.error.TokenExpired)value);
        }
        break;

      case E_TNF:
        if (value == null) {
          unsetETNF();
        } else {
          setETNF((everfeeds.thrift.error.TokenNotFound)value);
        }
        break;

      case E_NF:
        if (value == null) {
          unsetENF();
        } else {
          setENF((everfeeds.thrift.error.NotFound)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E_F:
        return getEF();

      case E_E:
        return getEE();

      case E_TNF:
        return getETNF();

      case E_NF:
        return getENF();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E_F:
        return isSetEF();
      case E_E:
        return isSetEE();
      case E_TNF:
        return isSetETNF();
      case E_NF:
        return isSetENF();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAccesses_result)
        return this.equals((getAccesses_result)that);
      return false;
    }

    public boolean equals(getAccesses_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_eF = true && this.isSetEF();
      boolean that_present_eF = true && that.isSetEF();
      if (this_present_eF || that_present_eF) {
        if (!(this_present_eF && that_present_eF))
          return false;
        if (!this.eF.equals(that.eF))
          return false;
      }

      boolean this_present_eE = true && this.isSetEE();
      boolean that_present_eE = true && that.isSetEE();
      if (this_present_eE || that_present_eE) {
        if (!(this_present_eE && that_present_eE))
          return false;
        if (!this.eE.equals(that.eE))
          return false;
      }

      boolean this_present_eTNF = true && this.isSetETNF();
      boolean that_present_eTNF = true && that.isSetETNF();
      if (this_present_eTNF || that_present_eTNF) {
        if (!(this_present_eTNF && that_present_eTNF))
          return false;
        if (!this.eTNF.equals(that.eTNF))
          return false;
      }

      boolean this_present_eNF = true && this.isSetENF();
      boolean that_present_eNF = true && that.isSetENF();
      if (this_present_eNF || that_present_eNF) {
        if (!(this_present_eNF && that_present_eNF))
          return false;
        if (!this.eNF.equals(that.eNF))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getAccesses_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getAccesses_result typedOther = (getAccesses_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEF()).compareTo(typedOther.isSetEF());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEF()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eF, typedOther.eF);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEE()).compareTo(typedOther.isSetEE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eE, typedOther.eE);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetETNF()).compareTo(typedOther.isSetETNF());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetETNF()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eTNF, typedOther.eTNF);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetENF()).compareTo(typedOther.isSetENF());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetENF()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eNF, typedOther.eNF);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                this.success = new ArrayList<everfeeds.thrift.domain.Access>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  everfeeds.thrift.domain.Access _elem2;
                  _elem2 = new everfeeds.thrift.domain.Access();
                  _elem2.read(iprot);
                  this.success.add(_elem2);
                }
                iprot.readListEnd();
              }
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E_F
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eF = new everfeeds.thrift.error.Forbidden();
              this.eF.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // E_E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eE = new everfeeds.thrift.error.TokenExpired();
              this.eE.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // E_TNF
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eTNF = new everfeeds.thrift.error.TokenNotFound();
              this.eTNF.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // E_NF
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eNF = new everfeeds.thrift.error.NotFound();
              this.eNF.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, this.success.size()));
          for (everfeeds.thrift.domain.Access _iter3 : this.success)
          {
            _iter3.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetEF()) {
        oprot.writeFieldBegin(E_F_FIELD_DESC);
        this.eF.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetEE()) {
        oprot.writeFieldBegin(E_E_FIELD_DESC);
        this.eE.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetETNF()) {
        oprot.writeFieldBegin(E_TNF_FIELD_DESC);
        this.eTNF.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetENF()) {
        oprot.writeFieldBegin(E_NF_FIELD_DESC);
        this.eNF.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAccesses_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eF:");
      if (this.eF == null) {
        sb.append("null");
      } else {
        sb.append(this.eF);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eE:");
      if (this.eE == null) {
        sb.append("null");
      } else {
        sb.append(this.eE);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eTNF:");
      if (this.eTNF == null) {
        sb.append("null");
      } else {
        sb.append(this.eTNF);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eNF:");
      if (this.eNF == null) {
        sb.append("null");
      } else {
        sb.append(this.eNF);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class saveAccess_args implements org.apache.thrift.TBase<saveAccess_args, saveAccess_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveAccess_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ACCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("access", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    public String token;
    public everfeeds.thrift.domain.Access access;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token"),
      ACCESS((short)2, "access");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 2: // ACCESS
            return ACCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "String")));
      tmpMap.put(_Fields.ACCESS, new org.apache.thrift.meta_data.FieldMetaData("access", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, everfeeds.thrift.domain.Access.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveAccess_args.class, metaDataMap);
    }

    public saveAccess_args() {
    }

    public saveAccess_args(
      String token,
      everfeeds.thrift.domain.Access access)
    {
      this();
      this.token = token;
      this.access = access;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveAccess_args(saveAccess_args other) {
      if (other.isSetToken()) {
        this.token = other.token;
      }
      if (other.isSetAccess()) {
        this.access = new everfeeds.thrift.domain.Access(other.access);
      }
    }

    public saveAccess_args deepCopy() {
      return new saveAccess_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      this.access = null;
    }

    public String getToken() {
      return this.token;
    }

    public saveAccess_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public everfeeds.thrift.domain.Access getAccess() {
      return this.access;
    }

    public saveAccess_args setAccess(everfeeds.thrift.domain.Access access) {
      this.access = access;
      return this;
    }

    public void unsetAccess() {
      this.access = null;
    }

    /** Returns true if field access is set (has been assigned a value) and false otherwise */
    public boolean isSetAccess() {
      return this.access != null;
    }

    public void setAccessIsSet(boolean value) {
      if (!value) {
        this.access = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case ACCESS:
        if (value == null) {
          unsetAccess();
        } else {
          setAccess((everfeeds.thrift.domain.Access)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case ACCESS:
        return getAccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case ACCESS:
        return isSetAccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveAccess_args)
        return this.equals((saveAccess_args)that);
      return false;
    }

    public boolean equals(saveAccess_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_access = true && this.isSetAccess();
      boolean that_present_access = true && that.isSetAccess();
      if (this_present_access || that_present_access) {
        if (!(this_present_access && that_present_access))
          return false;
        if (!this.access.equals(that.access))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(saveAccess_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      saveAccess_args typedOther = (saveAccess_args)other;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(typedOther.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, typedOther.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAccess()).compareTo(typedOther.isSetAccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.access, typedOther.access);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // TOKEN
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.token = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // ACCESS
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.access = new everfeeds.thrift.domain.Access();
              this.access.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.token != null) {
        oprot.writeFieldBegin(TOKEN_FIELD_DESC);
        oprot.writeString(this.token);
        oprot.writeFieldEnd();
      }
      if (this.access != null) {
        oprot.writeFieldBegin(ACCESS_FIELD_DESC);
        this.access.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveAccess_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("access:");
      if (this.access == null) {
        sb.append("null");
      } else {
        sb.append(this.access);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class saveAccess_result implements org.apache.thrift.TBase<saveAccess_result, saveAccess_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveAccess_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_F_FIELD_DESC = new org.apache.thrift.protocol.TField("eF", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField E_E_FIELD_DESC = new org.apache.thrift.protocol.TField("eE", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField E_TNF_FIELD_DESC = new org.apache.thrift.protocol.TField("eTNF", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField E_NF_FIELD_DESC = new org.apache.thrift.protocol.TField("eNF", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    public everfeeds.thrift.domain.Access success;
    public everfeeds.thrift.error.Forbidden eF;
    public everfeeds.thrift.error.TokenExpired eE;
    public everfeeds.thrift.error.TokenNotFound eTNF;
    public everfeeds.thrift.error.NotFound eNF;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E_F((short)1, "eF"),
      E_E((short)2, "eE"),
      E_TNF((short)3, "eTNF"),
      E_NF((short)4, "eNF");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E_F
            return E_F;
          case 2: // E_E
            return E_E;
          case 3: // E_TNF
            return E_TNF;
          case 4: // E_NF
            return E_NF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, everfeeds.thrift.domain.Access.class)));
      tmpMap.put(_Fields.E_F, new org.apache.thrift.meta_data.FieldMetaData("eF", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_E, new org.apache.thrift.meta_data.FieldMetaData("eE", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_TNF, new org.apache.thrift.meta_data.FieldMetaData("eTNF", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_NF, new org.apache.thrift.meta_data.FieldMetaData("eNF", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveAccess_result.class, metaDataMap);
    }

    public saveAccess_result() {
    }

    public saveAccess_result(
      everfeeds.thrift.domain.Access success,
      everfeeds.thrift.error.Forbidden eF,
      everfeeds.thrift.error.TokenExpired eE,
      everfeeds.thrift.error.TokenNotFound eTNF,
      everfeeds.thrift.error.NotFound eNF)
    {
      this();
      this.success = success;
      this.eF = eF;
      this.eE = eE;
      this.eTNF = eTNF;
      this.eNF = eNF;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveAccess_result(saveAccess_result other) {
      if (other.isSetSuccess()) {
        this.success = new everfeeds.thrift.domain.Access(other.success);
      }
      if (other.isSetEF()) {
        this.eF = new everfeeds.thrift.error.Forbidden(other.eF);
      }
      if (other.isSetEE()) {
        this.eE = new everfeeds.thrift.error.TokenExpired(other.eE);
      }
      if (other.isSetETNF()) {
        this.eTNF = new everfeeds.thrift.error.TokenNotFound(other.eTNF);
      }
      if (other.isSetENF()) {
        this.eNF = new everfeeds.thrift.error.NotFound(other.eNF);
      }
    }

    public saveAccess_result deepCopy() {
      return new saveAccess_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.eF = null;
      this.eE = null;
      this.eTNF = null;
      this.eNF = null;
    }

    public everfeeds.thrift.domain.Access getSuccess() {
      return this.success;
    }

    public saveAccess_result setSuccess(everfeeds.thrift.domain.Access success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public everfeeds.thrift.error.Forbidden getEF() {
      return this.eF;
    }

    public saveAccess_result setEF(everfeeds.thrift.error.Forbidden eF) {
      this.eF = eF;
      return this;
    }

    public void unsetEF() {
      this.eF = null;
    }

    /** Returns true if field eF is set (has been assigned a value) and false otherwise */
    public boolean isSetEF() {
      return this.eF != null;
    }

    public void setEFIsSet(boolean value) {
      if (!value) {
        this.eF = null;
      }
    }

    public everfeeds.thrift.error.TokenExpired getEE() {
      return this.eE;
    }

    public saveAccess_result setEE(everfeeds.thrift.error.TokenExpired eE) {
      this.eE = eE;
      return this;
    }

    public void unsetEE() {
      this.eE = null;
    }

    /** Returns true if field eE is set (has been assigned a value) and false otherwise */
    public boolean isSetEE() {
      return this.eE != null;
    }

    public void setEEIsSet(boolean value) {
      if (!value) {
        this.eE = null;
      }
    }

    public everfeeds.thrift.error.TokenNotFound getETNF() {
      return this.eTNF;
    }

    public saveAccess_result setETNF(everfeeds.thrift.error.TokenNotFound eTNF) {
      this.eTNF = eTNF;
      return this;
    }

    public void unsetETNF() {
      this.eTNF = null;
    }

    /** Returns true if field eTNF is set (has been assigned a value) and false otherwise */
    public boolean isSetETNF() {
      return this.eTNF != null;
    }

    public void setETNFIsSet(boolean value) {
      if (!value) {
        this.eTNF = null;
      }
    }

    public everfeeds.thrift.error.NotFound getENF() {
      return this.eNF;
    }

    public saveAccess_result setENF(everfeeds.thrift.error.NotFound eNF) {
      this.eNF = eNF;
      return this;
    }

    public void unsetENF() {
      this.eNF = null;
    }

    /** Returns true if field eNF is set (has been assigned a value) and false otherwise */
    public boolean isSetENF() {
      return this.eNF != null;
    }

    public void setENFIsSet(boolean value) {
      if (!value) {
        this.eNF = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((everfeeds.thrift.domain.Access)value);
        }
        break;

      case E_F:
        if (value == null) {
          unsetEF();
        } else {
          setEF((everfeeds.thrift.error.Forbidden)value);
        }
        break;

      case E_E:
        if (value == null) {
          unsetEE();
        } else {
          setEE((everfeeds.thrift.error.TokenExpired)value);
        }
        break;

      case E_TNF:
        if (value == null) {
          unsetETNF();
        } else {
          setETNF((everfeeds.thrift.error.TokenNotFound)value);
        }
        break;

      case E_NF:
        if (value == null) {
          unsetENF();
        } else {
          setENF((everfeeds.thrift.error.NotFound)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E_F:
        return getEF();

      case E_E:
        return getEE();

      case E_TNF:
        return getETNF();

      case E_NF:
        return getENF();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E_F:
        return isSetEF();
      case E_E:
        return isSetEE();
      case E_TNF:
        return isSetETNF();
      case E_NF:
        return isSetENF();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveAccess_result)
        return this.equals((saveAccess_result)that);
      return false;
    }

    public boolean equals(saveAccess_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_eF = true && this.isSetEF();
      boolean that_present_eF = true && that.isSetEF();
      if (this_present_eF || that_present_eF) {
        if (!(this_present_eF && that_present_eF))
          return false;
        if (!this.eF.equals(that.eF))
          return false;
      }

      boolean this_present_eE = true && this.isSetEE();
      boolean that_present_eE = true && that.isSetEE();
      if (this_present_eE || that_present_eE) {
        if (!(this_present_eE && that_present_eE))
          return false;
        if (!this.eE.equals(that.eE))
          return false;
      }

      boolean this_present_eTNF = true && this.isSetETNF();
      boolean that_present_eTNF = true && that.isSetETNF();
      if (this_present_eTNF || that_present_eTNF) {
        if (!(this_present_eTNF && that_present_eTNF))
          return false;
        if (!this.eTNF.equals(that.eTNF))
          return false;
      }

      boolean this_present_eNF = true && this.isSetENF();
      boolean that_present_eNF = true && that.isSetENF();
      if (this_present_eNF || that_present_eNF) {
        if (!(this_present_eNF && that_present_eNF))
          return false;
        if (!this.eNF.equals(that.eNF))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(saveAccess_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      saveAccess_result typedOther = (saveAccess_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEF()).compareTo(typedOther.isSetEF());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEF()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eF, typedOther.eF);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEE()).compareTo(typedOther.isSetEE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eE, typedOther.eE);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetETNF()).compareTo(typedOther.isSetETNF());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetETNF()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eTNF, typedOther.eTNF);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetENF()).compareTo(typedOther.isSetENF());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetENF()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eNF, typedOther.eNF);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.success = new everfeeds.thrift.domain.Access();
              this.success.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E_F
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eF = new everfeeds.thrift.error.Forbidden();
              this.eF.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // E_E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eE = new everfeeds.thrift.error.TokenExpired();
              this.eE.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // E_TNF
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eTNF = new everfeeds.thrift.error.TokenNotFound();
              this.eTNF.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // E_NF
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eNF = new everfeeds.thrift.error.NotFound();
              this.eNF.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetEF()) {
        oprot.writeFieldBegin(E_F_FIELD_DESC);
        this.eF.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetEE()) {
        oprot.writeFieldBegin(E_E_FIELD_DESC);
        this.eE.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetETNF()) {
        oprot.writeFieldBegin(E_TNF_FIELD_DESC);
        this.eTNF.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetENF()) {
        oprot.writeFieldBegin(E_NF_FIELD_DESC);
        this.eNF.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveAccess_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eF:");
      if (this.eF == null) {
        sb.append("null");
      } else {
        sb.append(this.eF);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eE:");
      if (this.eE == null) {
        sb.append("null");
      } else {
        sb.append(this.eE);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eTNF:");
      if (this.eTNF == null) {
        sb.append("null");
      } else {
        sb.append(this.eTNF);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eNF:");
      if (this.eNF == null) {
        sb.append("null");
      } else {
        sb.append(this.eNF);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class saveAccount_args implements org.apache.thrift.TBase<saveAccount_args, saveAccount_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveAccount_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ACCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("account", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    public String token;
    public everfeeds.thrift.domain.Account account;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token"),
      ACCOUNT((short)2, "account");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 2: // ACCOUNT
            return ACCOUNT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "String")));
      tmpMap.put(_Fields.ACCOUNT, new org.apache.thrift.meta_data.FieldMetaData("account", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, everfeeds.thrift.domain.Account.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveAccount_args.class, metaDataMap);
    }

    public saveAccount_args() {
    }

    public saveAccount_args(
      String token,
      everfeeds.thrift.domain.Account account)
    {
      this();
      this.token = token;
      this.account = account;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveAccount_args(saveAccount_args other) {
      if (other.isSetToken()) {
        this.token = other.token;
      }
      if (other.isSetAccount()) {
        this.account = new everfeeds.thrift.domain.Account(other.account);
      }
    }

    public saveAccount_args deepCopy() {
      return new saveAccount_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      this.account = null;
    }

    public String getToken() {
      return this.token;
    }

    public saveAccount_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public everfeeds.thrift.domain.Account getAccount() {
      return this.account;
    }

    public saveAccount_args setAccount(everfeeds.thrift.domain.Account account) {
      this.account = account;
      return this;
    }

    public void unsetAccount() {
      this.account = null;
    }

    /** Returns true if field account is set (has been assigned a value) and false otherwise */
    public boolean isSetAccount() {
      return this.account != null;
    }

    public void setAccountIsSet(boolean value) {
      if (!value) {
        this.account = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case ACCOUNT:
        if (value == null) {
          unsetAccount();
        } else {
          setAccount((everfeeds.thrift.domain.Account)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case ACCOUNT:
        return getAccount();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case ACCOUNT:
        return isSetAccount();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveAccount_args)
        return this.equals((saveAccount_args)that);
      return false;
    }

    public boolean equals(saveAccount_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_account = true && this.isSetAccount();
      boolean that_present_account = true && that.isSetAccount();
      if (this_present_account || that_present_account) {
        if (!(this_present_account && that_present_account))
          return false;
        if (!this.account.equals(that.account))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(saveAccount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      saveAccount_args typedOther = (saveAccount_args)other;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(typedOther.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, typedOther.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAccount()).compareTo(typedOther.isSetAccount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.account, typedOther.account);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // TOKEN
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.token = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // ACCOUNT
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.account = new everfeeds.thrift.domain.Account();
              this.account.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.token != null) {
        oprot.writeFieldBegin(TOKEN_FIELD_DESC);
        oprot.writeString(this.token);
        oprot.writeFieldEnd();
      }
      if (this.account != null) {
        oprot.writeFieldBegin(ACCOUNT_FIELD_DESC);
        this.account.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveAccount_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("account:");
      if (this.account == null) {
        sb.append("null");
      } else {
        sb.append(this.account);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class saveAccount_result implements org.apache.thrift.TBase<saveAccount_result, saveAccount_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveAccount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_F_FIELD_DESC = new org.apache.thrift.protocol.TField("eF", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField E_E_FIELD_DESC = new org.apache.thrift.protocol.TField("eE", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField E_TNF_FIELD_DESC = new org.apache.thrift.protocol.TField("eTNF", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField E_NF_FIELD_DESC = new org.apache.thrift.protocol.TField("eNF", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    public everfeeds.thrift.domain.Account success;
    public everfeeds.thrift.error.Forbidden eF;
    public everfeeds.thrift.error.TokenExpired eE;
    public everfeeds.thrift.error.TokenNotFound eTNF;
    public everfeeds.thrift.error.NotFound eNF;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E_F((short)1, "eF"),
      E_E((short)2, "eE"),
      E_TNF((short)3, "eTNF"),
      E_NF((short)4, "eNF");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E_F
            return E_F;
          case 2: // E_E
            return E_E;
          case 3: // E_TNF
            return E_TNF;
          case 4: // E_NF
            return E_NF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, everfeeds.thrift.domain.Account.class)));
      tmpMap.put(_Fields.E_F, new org.apache.thrift.meta_data.FieldMetaData("eF", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_E, new org.apache.thrift.meta_data.FieldMetaData("eE", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_TNF, new org.apache.thrift.meta_data.FieldMetaData("eTNF", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_NF, new org.apache.thrift.meta_data.FieldMetaData("eNF", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveAccount_result.class, metaDataMap);
    }

    public saveAccount_result() {
    }

    public saveAccount_result(
      everfeeds.thrift.domain.Account success,
      everfeeds.thrift.error.Forbidden eF,
      everfeeds.thrift.error.TokenExpired eE,
      everfeeds.thrift.error.TokenNotFound eTNF,
      everfeeds.thrift.error.NotFound eNF)
    {
      this();
      this.success = success;
      this.eF = eF;
      this.eE = eE;
      this.eTNF = eTNF;
      this.eNF = eNF;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveAccount_result(saveAccount_result other) {
      if (other.isSetSuccess()) {
        this.success = new everfeeds.thrift.domain.Account(other.success);
      }
      if (other.isSetEF()) {
        this.eF = new everfeeds.thrift.error.Forbidden(other.eF);
      }
      if (other.isSetEE()) {
        this.eE = new everfeeds.thrift.error.TokenExpired(other.eE);
      }
      if (other.isSetETNF()) {
        this.eTNF = new everfeeds.thrift.error.TokenNotFound(other.eTNF);
      }
      if (other.isSetENF()) {
        this.eNF = new everfeeds.thrift.error.NotFound(other.eNF);
      }
    }

    public saveAccount_result deepCopy() {
      return new saveAccount_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.eF = null;
      this.eE = null;
      this.eTNF = null;
      this.eNF = null;
    }

    public everfeeds.thrift.domain.Account getSuccess() {
      return this.success;
    }

    public saveAccount_result setSuccess(everfeeds.thrift.domain.Account success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public everfeeds.thrift.error.Forbidden getEF() {
      return this.eF;
    }

    public saveAccount_result setEF(everfeeds.thrift.error.Forbidden eF) {
      this.eF = eF;
      return this;
    }

    public void unsetEF() {
      this.eF = null;
    }

    /** Returns true if field eF is set (has been assigned a value) and false otherwise */
    public boolean isSetEF() {
      return this.eF != null;
    }

    public void setEFIsSet(boolean value) {
      if (!value) {
        this.eF = null;
      }
    }

    public everfeeds.thrift.error.TokenExpired getEE() {
      return this.eE;
    }

    public saveAccount_result setEE(everfeeds.thrift.error.TokenExpired eE) {
      this.eE = eE;
      return this;
    }

    public void unsetEE() {
      this.eE = null;
    }

    /** Returns true if field eE is set (has been assigned a value) and false otherwise */
    public boolean isSetEE() {
      return this.eE != null;
    }

    public void setEEIsSet(boolean value) {
      if (!value) {
        this.eE = null;
      }
    }

    public everfeeds.thrift.error.TokenNotFound getETNF() {
      return this.eTNF;
    }

    public saveAccount_result setETNF(everfeeds.thrift.error.TokenNotFound eTNF) {
      this.eTNF = eTNF;
      return this;
    }

    public void unsetETNF() {
      this.eTNF = null;
    }

    /** Returns true if field eTNF is set (has been assigned a value) and false otherwise */
    public boolean isSetETNF() {
      return this.eTNF != null;
    }

    public void setETNFIsSet(boolean value) {
      if (!value) {
        this.eTNF = null;
      }
    }

    public everfeeds.thrift.error.NotFound getENF() {
      return this.eNF;
    }

    public saveAccount_result setENF(everfeeds.thrift.error.NotFound eNF) {
      this.eNF = eNF;
      return this;
    }

    public void unsetENF() {
      this.eNF = null;
    }

    /** Returns true if field eNF is set (has been assigned a value) and false otherwise */
    public boolean isSetENF() {
      return this.eNF != null;
    }

    public void setENFIsSet(boolean value) {
      if (!value) {
        this.eNF = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((everfeeds.thrift.domain.Account)value);
        }
        break;

      case E_F:
        if (value == null) {
          unsetEF();
        } else {
          setEF((everfeeds.thrift.error.Forbidden)value);
        }
        break;

      case E_E:
        if (value == null) {
          unsetEE();
        } else {
          setEE((everfeeds.thrift.error.TokenExpired)value);
        }
        break;

      case E_TNF:
        if (value == null) {
          unsetETNF();
        } else {
          setETNF((everfeeds.thrift.error.TokenNotFound)value);
        }
        break;

      case E_NF:
        if (value == null) {
          unsetENF();
        } else {
          setENF((everfeeds.thrift.error.NotFound)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E_F:
        return getEF();

      case E_E:
        return getEE();

      case E_TNF:
        return getETNF();

      case E_NF:
        return getENF();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E_F:
        return isSetEF();
      case E_E:
        return isSetEE();
      case E_TNF:
        return isSetETNF();
      case E_NF:
        return isSetENF();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveAccount_result)
        return this.equals((saveAccount_result)that);
      return false;
    }

    public boolean equals(saveAccount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_eF = true && this.isSetEF();
      boolean that_present_eF = true && that.isSetEF();
      if (this_present_eF || that_present_eF) {
        if (!(this_present_eF && that_present_eF))
          return false;
        if (!this.eF.equals(that.eF))
          return false;
      }

      boolean this_present_eE = true && this.isSetEE();
      boolean that_present_eE = true && that.isSetEE();
      if (this_present_eE || that_present_eE) {
        if (!(this_present_eE && that_present_eE))
          return false;
        if (!this.eE.equals(that.eE))
          return false;
      }

      boolean this_present_eTNF = true && this.isSetETNF();
      boolean that_present_eTNF = true && that.isSetETNF();
      if (this_present_eTNF || that_present_eTNF) {
        if (!(this_present_eTNF && that_present_eTNF))
          return false;
        if (!this.eTNF.equals(that.eTNF))
          return false;
      }

      boolean this_present_eNF = true && this.isSetENF();
      boolean that_present_eNF = true && that.isSetENF();
      if (this_present_eNF || that_present_eNF) {
        if (!(this_present_eNF && that_present_eNF))
          return false;
        if (!this.eNF.equals(that.eNF))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(saveAccount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      saveAccount_result typedOther = (saveAccount_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEF()).compareTo(typedOther.isSetEF());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEF()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eF, typedOther.eF);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEE()).compareTo(typedOther.isSetEE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eE, typedOther.eE);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetETNF()).compareTo(typedOther.isSetETNF());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetETNF()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eTNF, typedOther.eTNF);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetENF()).compareTo(typedOther.isSetENF());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetENF()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eNF, typedOther.eNF);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.success = new everfeeds.thrift.domain.Account();
              this.success.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E_F
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eF = new everfeeds.thrift.error.Forbidden();
              this.eF.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // E_E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eE = new everfeeds.thrift.error.TokenExpired();
              this.eE.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // E_TNF
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eTNF = new everfeeds.thrift.error.TokenNotFound();
              this.eTNF.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // E_NF
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eNF = new everfeeds.thrift.error.NotFound();
              this.eNF.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetEF()) {
        oprot.writeFieldBegin(E_F_FIELD_DESC);
        this.eF.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetEE()) {
        oprot.writeFieldBegin(E_E_FIELD_DESC);
        this.eE.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetETNF()) {
        oprot.writeFieldBegin(E_TNF_FIELD_DESC);
        this.eTNF.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetENF()) {
        oprot.writeFieldBegin(E_NF_FIELD_DESC);
        this.eNF.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveAccount_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eF:");
      if (this.eF == null) {
        sb.append("null");
      } else {
        sb.append(this.eF);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eE:");
      if (this.eE == null) {
        sb.append("null");
      } else {
        sb.append(this.eE);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eTNF:");
      if (this.eTNF == null) {
        sb.append("null");
      } else {
        sb.append(this.eTNF);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eNF:");
      if (this.eNF == null) {
        sb.append("null");
      } else {
        sb.append(this.eNF);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getTags_args implements org.apache.thrift.TBase<getTags_args, getTags_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTags_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ACCESS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("accessId", org.apache.thrift.protocol.TType.STRING, (short)5);

    public String token;
    public String accessId;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token"),
      ACCESS_ID((short)5, "accessId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 5: // ACCESS_ID
            return ACCESS_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "String")));
      tmpMap.put(_Fields.ACCESS_ID, new org.apache.thrift.meta_data.FieldMetaData("accessId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "Id")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTags_args.class, metaDataMap);
    }

    public getTags_args() {
    }

    public getTags_args(
      String token,
      String accessId)
    {
      this();
      this.token = token;
      this.accessId = accessId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTags_args(getTags_args other) {
      if (other.isSetToken()) {
        this.token = other.token;
      }
      if (other.isSetAccessId()) {
        this.accessId = other.accessId;
      }
    }

    public getTags_args deepCopy() {
      return new getTags_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      this.accessId = null;
    }

    public String getToken() {
      return this.token;
    }

    public getTags_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public String getAccessId() {
      return this.accessId;
    }

    public getTags_args setAccessId(String accessId) {
      this.accessId = accessId;
      return this;
    }

    public void unsetAccessId() {
      this.accessId = null;
    }

    /** Returns true if field accessId is set (has been assigned a value) and false otherwise */
    public boolean isSetAccessId() {
      return this.accessId != null;
    }

    public void setAccessIdIsSet(boolean value) {
      if (!value) {
        this.accessId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case ACCESS_ID:
        if (value == null) {
          unsetAccessId();
        } else {
          setAccessId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case ACCESS_ID:
        return getAccessId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case ACCESS_ID:
        return isSetAccessId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTags_args)
        return this.equals((getTags_args)that);
      return false;
    }

    public boolean equals(getTags_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_accessId = true && this.isSetAccessId();
      boolean that_present_accessId = true && that.isSetAccessId();
      if (this_present_accessId || that_present_accessId) {
        if (!(this_present_accessId && that_present_accessId))
          return false;
        if (!this.accessId.equals(that.accessId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getTags_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getTags_args typedOther = (getTags_args)other;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(typedOther.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, typedOther.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAccessId()).compareTo(typedOther.isSetAccessId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccessId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accessId, typedOther.accessId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // TOKEN
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.token = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // ACCESS_ID
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.accessId = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.token != null) {
        oprot.writeFieldBegin(TOKEN_FIELD_DESC);
        oprot.writeString(this.token);
        oprot.writeFieldEnd();
      }
      if (this.accessId != null) {
        oprot.writeFieldBegin(ACCESS_ID_FIELD_DESC);
        oprot.writeString(this.accessId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTags_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("accessId:");
      if (this.accessId == null) {
        sb.append("null");
      } else {
        sb.append(this.accessId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getTags_result implements org.apache.thrift.TBase<getTags_result, getTags_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTags_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_F_FIELD_DESC = new org.apache.thrift.protocol.TField("eF", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField E_E_FIELD_DESC = new org.apache.thrift.protocol.TField("eE", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField E_TNF_FIELD_DESC = new org.apache.thrift.protocol.TField("eTNF", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField E_NF_FIELD_DESC = new org.apache.thrift.protocol.TField("eNF", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    public List<everfeeds.thrift.domain.Tag> success;
    public everfeeds.thrift.error.Forbidden eF;
    public everfeeds.thrift.error.TokenExpired eE;
    public everfeeds.thrift.error.TokenNotFound eTNF;
    public everfeeds.thrift.error.NotFound eNF;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E_F((short)1, "eF"),
      E_E((short)2, "eE"),
      E_TNF((short)3, "eTNF"),
      E_NF((short)4, "eNF");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E_F
            return E_F;
          case 2: // E_E
            return E_E;
          case 3: // E_TNF
            return E_TNF;
          case 4: // E_NF
            return E_NF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, everfeeds.thrift.domain.Tag.class))));
      tmpMap.put(_Fields.E_F, new org.apache.thrift.meta_data.FieldMetaData("eF", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_E, new org.apache.thrift.meta_data.FieldMetaData("eE", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_TNF, new org.apache.thrift.meta_data.FieldMetaData("eTNF", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_NF, new org.apache.thrift.meta_data.FieldMetaData("eNF", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTags_result.class, metaDataMap);
    }

    public getTags_result() {
    }

    public getTags_result(
      List<everfeeds.thrift.domain.Tag> success,
      everfeeds.thrift.error.Forbidden eF,
      everfeeds.thrift.error.TokenExpired eE,
      everfeeds.thrift.error.TokenNotFound eTNF,
      everfeeds.thrift.error.NotFound eNF)
    {
      this();
      this.success = success;
      this.eF = eF;
      this.eE = eE;
      this.eTNF = eTNF;
      this.eNF = eNF;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTags_result(getTags_result other) {
      if (other.isSetSuccess()) {
        List<everfeeds.thrift.domain.Tag> __this__success = new ArrayList<everfeeds.thrift.domain.Tag>();
        for (everfeeds.thrift.domain.Tag other_element : other.success) {
          __this__success.add(new everfeeds.thrift.domain.Tag(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetEF()) {
        this.eF = new everfeeds.thrift.error.Forbidden(other.eF);
      }
      if (other.isSetEE()) {
        this.eE = new everfeeds.thrift.error.TokenExpired(other.eE);
      }
      if (other.isSetETNF()) {
        this.eTNF = new everfeeds.thrift.error.TokenNotFound(other.eTNF);
      }
      if (other.isSetENF()) {
        this.eNF = new everfeeds.thrift.error.NotFound(other.eNF);
      }
    }

    public getTags_result deepCopy() {
      return new getTags_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.eF = null;
      this.eE = null;
      this.eTNF = null;
      this.eNF = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<everfeeds.thrift.domain.Tag> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(everfeeds.thrift.domain.Tag elem) {
      if (this.success == null) {
        this.success = new ArrayList<everfeeds.thrift.domain.Tag>();
      }
      this.success.add(elem);
    }

    public List<everfeeds.thrift.domain.Tag> getSuccess() {
      return this.success;
    }

    public getTags_result setSuccess(List<everfeeds.thrift.domain.Tag> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public everfeeds.thrift.error.Forbidden getEF() {
      return this.eF;
    }

    public getTags_result setEF(everfeeds.thrift.error.Forbidden eF) {
      this.eF = eF;
      return this;
    }

    public void unsetEF() {
      this.eF = null;
    }

    /** Returns true if field eF is set (has been assigned a value) and false otherwise */
    public boolean isSetEF() {
      return this.eF != null;
    }

    public void setEFIsSet(boolean value) {
      if (!value) {
        this.eF = null;
      }
    }

    public everfeeds.thrift.error.TokenExpired getEE() {
      return this.eE;
    }

    public getTags_result setEE(everfeeds.thrift.error.TokenExpired eE) {
      this.eE = eE;
      return this;
    }

    public void unsetEE() {
      this.eE = null;
    }

    /** Returns true if field eE is set (has been assigned a value) and false otherwise */
    public boolean isSetEE() {
      return this.eE != null;
    }

    public void setEEIsSet(boolean value) {
      if (!value) {
        this.eE = null;
      }
    }

    public everfeeds.thrift.error.TokenNotFound getETNF() {
      return this.eTNF;
    }

    public getTags_result setETNF(everfeeds.thrift.error.TokenNotFound eTNF) {
      this.eTNF = eTNF;
      return this;
    }

    public void unsetETNF() {
      this.eTNF = null;
    }

    /** Returns true if field eTNF is set (has been assigned a value) and false otherwise */
    public boolean isSetETNF() {
      return this.eTNF != null;
    }

    public void setETNFIsSet(boolean value) {
      if (!value) {
        this.eTNF = null;
      }
    }

    public everfeeds.thrift.error.NotFound getENF() {
      return this.eNF;
    }

    public getTags_result setENF(everfeeds.thrift.error.NotFound eNF) {
      this.eNF = eNF;
      return this;
    }

    public void unsetENF() {
      this.eNF = null;
    }

    /** Returns true if field eNF is set (has been assigned a value) and false otherwise */
    public boolean isSetENF() {
      return this.eNF != null;
    }

    public void setENFIsSet(boolean value) {
      if (!value) {
        this.eNF = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<everfeeds.thrift.domain.Tag>)value);
        }
        break;

      case E_F:
        if (value == null) {
          unsetEF();
        } else {
          setEF((everfeeds.thrift.error.Forbidden)value);
        }
        break;

      case E_E:
        if (value == null) {
          unsetEE();
        } else {
          setEE((everfeeds.thrift.error.TokenExpired)value);
        }
        break;

      case E_TNF:
        if (value == null) {
          unsetETNF();
        } else {
          setETNF((everfeeds.thrift.error.TokenNotFound)value);
        }
        break;

      case E_NF:
        if (value == null) {
          unsetENF();
        } else {
          setENF((everfeeds.thrift.error.NotFound)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E_F:
        return getEF();

      case E_E:
        return getEE();

      case E_TNF:
        return getETNF();

      case E_NF:
        return getENF();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E_F:
        return isSetEF();
      case E_E:
        return isSetEE();
      case E_TNF:
        return isSetETNF();
      case E_NF:
        return isSetENF();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTags_result)
        return this.equals((getTags_result)that);
      return false;
    }

    public boolean equals(getTags_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_eF = true && this.isSetEF();
      boolean that_present_eF = true && that.isSetEF();
      if (this_present_eF || that_present_eF) {
        if (!(this_present_eF && that_present_eF))
          return false;
        if (!this.eF.equals(that.eF))
          return false;
      }

      boolean this_present_eE = true && this.isSetEE();
      boolean that_present_eE = true && that.isSetEE();
      if (this_present_eE || that_present_eE) {
        if (!(this_present_eE && that_present_eE))
          return false;
        if (!this.eE.equals(that.eE))
          return false;
      }

      boolean this_present_eTNF = true && this.isSetETNF();
      boolean that_present_eTNF = true && that.isSetETNF();
      if (this_present_eTNF || that_present_eTNF) {
        if (!(this_present_eTNF && that_present_eTNF))
          return false;
        if (!this.eTNF.equals(that.eTNF))
          return false;
      }

      boolean this_present_eNF = true && this.isSetENF();
      boolean that_present_eNF = true && that.isSetENF();
      if (this_present_eNF || that_present_eNF) {
        if (!(this_present_eNF && that_present_eNF))
          return false;
        if (!this.eNF.equals(that.eNF))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getTags_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getTags_result typedOther = (getTags_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEF()).compareTo(typedOther.isSetEF());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEF()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eF, typedOther.eF);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEE()).compareTo(typedOther.isSetEE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eE, typedOther.eE);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetETNF()).compareTo(typedOther.isSetETNF());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetETNF()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eTNF, typedOther.eTNF);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetENF()).compareTo(typedOther.isSetENF());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetENF()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eNF, typedOther.eNF);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list4 = iprot.readListBegin();
                this.success = new ArrayList<everfeeds.thrift.domain.Tag>(_list4.size);
                for (int _i5 = 0; _i5 < _list4.size; ++_i5)
                {
                  everfeeds.thrift.domain.Tag _elem6;
                  _elem6 = new everfeeds.thrift.domain.Tag();
                  _elem6.read(iprot);
                  this.success.add(_elem6);
                }
                iprot.readListEnd();
              }
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E_F
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eF = new everfeeds.thrift.error.Forbidden();
              this.eF.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // E_E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eE = new everfeeds.thrift.error.TokenExpired();
              this.eE.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // E_TNF
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eTNF = new everfeeds.thrift.error.TokenNotFound();
              this.eTNF.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // E_NF
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eNF = new everfeeds.thrift.error.NotFound();
              this.eNF.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, this.success.size()));
          for (everfeeds.thrift.domain.Tag _iter7 : this.success)
          {
            _iter7.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetEF()) {
        oprot.writeFieldBegin(E_F_FIELD_DESC);
        this.eF.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetEE()) {
        oprot.writeFieldBegin(E_E_FIELD_DESC);
        this.eE.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetETNF()) {
        oprot.writeFieldBegin(E_TNF_FIELD_DESC);
        this.eTNF.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetENF()) {
        oprot.writeFieldBegin(E_NF_FIELD_DESC);
        this.eNF.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTags_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eF:");
      if (this.eF == null) {
        sb.append("null");
      } else {
        sb.append(this.eF);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eE:");
      if (this.eE == null) {
        sb.append("null");
      } else {
        sb.append(this.eE);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eTNF:");
      if (this.eTNF == null) {
        sb.append("null");
      } else {
        sb.append(this.eTNF);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eNF:");
      if (this.eNF == null) {
        sb.append("null");
      } else {
        sb.append(this.eNF);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getCategories_args implements org.apache.thrift.TBase<getCategories_args, getCategories_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCategories_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ACCESS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("accessId", org.apache.thrift.protocol.TType.STRING, (short)5);

    public String token;
    public String accessId;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token"),
      ACCESS_ID((short)5, "accessId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 5: // ACCESS_ID
            return ACCESS_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "String")));
      tmpMap.put(_Fields.ACCESS_ID, new org.apache.thrift.meta_data.FieldMetaData("accessId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "Id")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCategories_args.class, metaDataMap);
    }

    public getCategories_args() {
    }

    public getCategories_args(
      String token,
      String accessId)
    {
      this();
      this.token = token;
      this.accessId = accessId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCategories_args(getCategories_args other) {
      if (other.isSetToken()) {
        this.token = other.token;
      }
      if (other.isSetAccessId()) {
        this.accessId = other.accessId;
      }
    }

    public getCategories_args deepCopy() {
      return new getCategories_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      this.accessId = null;
    }

    public String getToken() {
      return this.token;
    }

    public getCategories_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public String getAccessId() {
      return this.accessId;
    }

    public getCategories_args setAccessId(String accessId) {
      this.accessId = accessId;
      return this;
    }

    public void unsetAccessId() {
      this.accessId = null;
    }

    /** Returns true if field accessId is set (has been assigned a value) and false otherwise */
    public boolean isSetAccessId() {
      return this.accessId != null;
    }

    public void setAccessIdIsSet(boolean value) {
      if (!value) {
        this.accessId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case ACCESS_ID:
        if (value == null) {
          unsetAccessId();
        } else {
          setAccessId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case ACCESS_ID:
        return getAccessId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case ACCESS_ID:
        return isSetAccessId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCategories_args)
        return this.equals((getCategories_args)that);
      return false;
    }

    public boolean equals(getCategories_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_accessId = true && this.isSetAccessId();
      boolean that_present_accessId = true && that.isSetAccessId();
      if (this_present_accessId || that_present_accessId) {
        if (!(this_present_accessId && that_present_accessId))
          return false;
        if (!this.accessId.equals(that.accessId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getCategories_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getCategories_args typedOther = (getCategories_args)other;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(typedOther.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, typedOther.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAccessId()).compareTo(typedOther.isSetAccessId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccessId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accessId, typedOther.accessId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // TOKEN
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.token = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // ACCESS_ID
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.accessId = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.token != null) {
        oprot.writeFieldBegin(TOKEN_FIELD_DESC);
        oprot.writeString(this.token);
        oprot.writeFieldEnd();
      }
      if (this.accessId != null) {
        oprot.writeFieldBegin(ACCESS_ID_FIELD_DESC);
        oprot.writeString(this.accessId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCategories_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("accessId:");
      if (this.accessId == null) {
        sb.append("null");
      } else {
        sb.append(this.accessId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getCategories_result implements org.apache.thrift.TBase<getCategories_result, getCategories_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCategories_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_F_FIELD_DESC = new org.apache.thrift.protocol.TField("eF", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField E_E_FIELD_DESC = new org.apache.thrift.protocol.TField("eE", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField E_TNF_FIELD_DESC = new org.apache.thrift.protocol.TField("eTNF", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField E_NF_FIELD_DESC = new org.apache.thrift.protocol.TField("eNF", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    public List<everfeeds.thrift.domain.Category> success;
    public everfeeds.thrift.error.Forbidden eF;
    public everfeeds.thrift.error.TokenExpired eE;
    public everfeeds.thrift.error.TokenNotFound eTNF;
    public everfeeds.thrift.error.NotFound eNF;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E_F((short)1, "eF"),
      E_E((short)2, "eE"),
      E_TNF((short)3, "eTNF"),
      E_NF((short)4, "eNF");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E_F
            return E_F;
          case 2: // E_E
            return E_E;
          case 3: // E_TNF
            return E_TNF;
          case 4: // E_NF
            return E_NF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, everfeeds.thrift.domain.Category.class))));
      tmpMap.put(_Fields.E_F, new org.apache.thrift.meta_data.FieldMetaData("eF", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_E, new org.apache.thrift.meta_data.FieldMetaData("eE", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_TNF, new org.apache.thrift.meta_data.FieldMetaData("eTNF", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_NF, new org.apache.thrift.meta_data.FieldMetaData("eNF", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCategories_result.class, metaDataMap);
    }

    public getCategories_result() {
    }

    public getCategories_result(
      List<everfeeds.thrift.domain.Category> success,
      everfeeds.thrift.error.Forbidden eF,
      everfeeds.thrift.error.TokenExpired eE,
      everfeeds.thrift.error.TokenNotFound eTNF,
      everfeeds.thrift.error.NotFound eNF)
    {
      this();
      this.success = success;
      this.eF = eF;
      this.eE = eE;
      this.eTNF = eTNF;
      this.eNF = eNF;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCategories_result(getCategories_result other) {
      if (other.isSetSuccess()) {
        List<everfeeds.thrift.domain.Category> __this__success = new ArrayList<everfeeds.thrift.domain.Category>();
        for (everfeeds.thrift.domain.Category other_element : other.success) {
          __this__success.add(new everfeeds.thrift.domain.Category(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetEF()) {
        this.eF = new everfeeds.thrift.error.Forbidden(other.eF);
      }
      if (other.isSetEE()) {
        this.eE = new everfeeds.thrift.error.TokenExpired(other.eE);
      }
      if (other.isSetETNF()) {
        this.eTNF = new everfeeds.thrift.error.TokenNotFound(other.eTNF);
      }
      if (other.isSetENF()) {
        this.eNF = new everfeeds.thrift.error.NotFound(other.eNF);
      }
    }

    public getCategories_result deepCopy() {
      return new getCategories_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.eF = null;
      this.eE = null;
      this.eTNF = null;
      this.eNF = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<everfeeds.thrift.domain.Category> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(everfeeds.thrift.domain.Category elem) {
      if (this.success == null) {
        this.success = new ArrayList<everfeeds.thrift.domain.Category>();
      }
      this.success.add(elem);
    }

    public List<everfeeds.thrift.domain.Category> getSuccess() {
      return this.success;
    }

    public getCategories_result setSuccess(List<everfeeds.thrift.domain.Category> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public everfeeds.thrift.error.Forbidden getEF() {
      return this.eF;
    }

    public getCategories_result setEF(everfeeds.thrift.error.Forbidden eF) {
      this.eF = eF;
      return this;
    }

    public void unsetEF() {
      this.eF = null;
    }

    /** Returns true if field eF is set (has been assigned a value) and false otherwise */
    public boolean isSetEF() {
      return this.eF != null;
    }

    public void setEFIsSet(boolean value) {
      if (!value) {
        this.eF = null;
      }
    }

    public everfeeds.thrift.error.TokenExpired getEE() {
      return this.eE;
    }

    public getCategories_result setEE(everfeeds.thrift.error.TokenExpired eE) {
      this.eE = eE;
      return this;
    }

    public void unsetEE() {
      this.eE = null;
    }

    /** Returns true if field eE is set (has been assigned a value) and false otherwise */
    public boolean isSetEE() {
      return this.eE != null;
    }

    public void setEEIsSet(boolean value) {
      if (!value) {
        this.eE = null;
      }
    }

    public everfeeds.thrift.error.TokenNotFound getETNF() {
      return this.eTNF;
    }

    public getCategories_result setETNF(everfeeds.thrift.error.TokenNotFound eTNF) {
      this.eTNF = eTNF;
      return this;
    }

    public void unsetETNF() {
      this.eTNF = null;
    }

    /** Returns true if field eTNF is set (has been assigned a value) and false otherwise */
    public boolean isSetETNF() {
      return this.eTNF != null;
    }

    public void setETNFIsSet(boolean value) {
      if (!value) {
        this.eTNF = null;
      }
    }

    public everfeeds.thrift.error.NotFound getENF() {
      return this.eNF;
    }

    public getCategories_result setENF(everfeeds.thrift.error.NotFound eNF) {
      this.eNF = eNF;
      return this;
    }

    public void unsetENF() {
      this.eNF = null;
    }

    /** Returns true if field eNF is set (has been assigned a value) and false otherwise */
    public boolean isSetENF() {
      return this.eNF != null;
    }

    public void setENFIsSet(boolean value) {
      if (!value) {
        this.eNF = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<everfeeds.thrift.domain.Category>)value);
        }
        break;

      case E_F:
        if (value == null) {
          unsetEF();
        } else {
          setEF((everfeeds.thrift.error.Forbidden)value);
        }
        break;

      case E_E:
        if (value == null) {
          unsetEE();
        } else {
          setEE((everfeeds.thrift.error.TokenExpired)value);
        }
        break;

      case E_TNF:
        if (value == null) {
          unsetETNF();
        } else {
          setETNF((everfeeds.thrift.error.TokenNotFound)value);
        }
        break;

      case E_NF:
        if (value == null) {
          unsetENF();
        } else {
          setENF((everfeeds.thrift.error.NotFound)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E_F:
        return getEF();

      case E_E:
        return getEE();

      case E_TNF:
        return getETNF();

      case E_NF:
        return getENF();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E_F:
        return isSetEF();
      case E_E:
        return isSetEE();
      case E_TNF:
        return isSetETNF();
      case E_NF:
        return isSetENF();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCategories_result)
        return this.equals((getCategories_result)that);
      return false;
    }

    public boolean equals(getCategories_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_eF = true && this.isSetEF();
      boolean that_present_eF = true && that.isSetEF();
      if (this_present_eF || that_present_eF) {
        if (!(this_present_eF && that_present_eF))
          return false;
        if (!this.eF.equals(that.eF))
          return false;
      }

      boolean this_present_eE = true && this.isSetEE();
      boolean that_present_eE = true && that.isSetEE();
      if (this_present_eE || that_present_eE) {
        if (!(this_present_eE && that_present_eE))
          return false;
        if (!this.eE.equals(that.eE))
          return false;
      }

      boolean this_present_eTNF = true && this.isSetETNF();
      boolean that_present_eTNF = true && that.isSetETNF();
      if (this_present_eTNF || that_present_eTNF) {
        if (!(this_present_eTNF && that_present_eTNF))
          return false;
        if (!this.eTNF.equals(that.eTNF))
          return false;
      }

      boolean this_present_eNF = true && this.isSetENF();
      boolean that_present_eNF = true && that.isSetENF();
      if (this_present_eNF || that_present_eNF) {
        if (!(this_present_eNF && that_present_eNF))
          return false;
        if (!this.eNF.equals(that.eNF))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getCategories_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getCategories_result typedOther = (getCategories_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEF()).compareTo(typedOther.isSetEF());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEF()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eF, typedOther.eF);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEE()).compareTo(typedOther.isSetEE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eE, typedOther.eE);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetETNF()).compareTo(typedOther.isSetETNF());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetETNF()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eTNF, typedOther.eTNF);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetENF()).compareTo(typedOther.isSetENF());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetENF()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eNF, typedOther.eNF);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                this.success = new ArrayList<everfeeds.thrift.domain.Category>(_list8.size);
                for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                {
                  everfeeds.thrift.domain.Category _elem10;
                  _elem10 = new everfeeds.thrift.domain.Category();
                  _elem10.read(iprot);
                  this.success.add(_elem10);
                }
                iprot.readListEnd();
              }
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E_F
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eF = new everfeeds.thrift.error.Forbidden();
              this.eF.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // E_E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eE = new everfeeds.thrift.error.TokenExpired();
              this.eE.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // E_TNF
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eTNF = new everfeeds.thrift.error.TokenNotFound();
              this.eTNF.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // E_NF
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eNF = new everfeeds.thrift.error.NotFound();
              this.eNF.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, this.success.size()));
          for (everfeeds.thrift.domain.Category _iter11 : this.success)
          {
            _iter11.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetEF()) {
        oprot.writeFieldBegin(E_F_FIELD_DESC);
        this.eF.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetEE()) {
        oprot.writeFieldBegin(E_E_FIELD_DESC);
        this.eE.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetETNF()) {
        oprot.writeFieldBegin(E_TNF_FIELD_DESC);
        this.eTNF.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetENF()) {
        oprot.writeFieldBegin(E_NF_FIELD_DESC);
        this.eNF.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCategories_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eF:");
      if (this.eF == null) {
        sb.append("null");
      } else {
        sb.append(this.eF);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eE:");
      if (this.eE == null) {
        sb.append("null");
      } else {
        sb.append(this.eE);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eTNF:");
      if (this.eTNF == null) {
        sb.append("null");
      } else {
        sb.append(this.eTNF);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eNF:");
      if (this.eNF == null) {
        sb.append("null");
      } else {
        sb.append(this.eNF);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getKinds_args implements org.apache.thrift.TBase<getKinds_args, getKinds_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getKinds_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ACCESS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("accessId", org.apache.thrift.protocol.TType.STRING, (short)5);

    public String token;
    public String accessId;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token"),
      ACCESS_ID((short)5, "accessId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 5: // ACCESS_ID
            return ACCESS_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "String")));
      tmpMap.put(_Fields.ACCESS_ID, new org.apache.thrift.meta_data.FieldMetaData("accessId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "Id")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getKinds_args.class, metaDataMap);
    }

    public getKinds_args() {
    }

    public getKinds_args(
      String token,
      String accessId)
    {
      this();
      this.token = token;
      this.accessId = accessId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getKinds_args(getKinds_args other) {
      if (other.isSetToken()) {
        this.token = other.token;
      }
      if (other.isSetAccessId()) {
        this.accessId = other.accessId;
      }
    }

    public getKinds_args deepCopy() {
      return new getKinds_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      this.accessId = null;
    }

    public String getToken() {
      return this.token;
    }

    public getKinds_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public String getAccessId() {
      return this.accessId;
    }

    public getKinds_args setAccessId(String accessId) {
      this.accessId = accessId;
      return this;
    }

    public void unsetAccessId() {
      this.accessId = null;
    }

    /** Returns true if field accessId is set (has been assigned a value) and false otherwise */
    public boolean isSetAccessId() {
      return this.accessId != null;
    }

    public void setAccessIdIsSet(boolean value) {
      if (!value) {
        this.accessId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case ACCESS_ID:
        if (value == null) {
          unsetAccessId();
        } else {
          setAccessId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case ACCESS_ID:
        return getAccessId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case ACCESS_ID:
        return isSetAccessId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getKinds_args)
        return this.equals((getKinds_args)that);
      return false;
    }

    public boolean equals(getKinds_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_accessId = true && this.isSetAccessId();
      boolean that_present_accessId = true && that.isSetAccessId();
      if (this_present_accessId || that_present_accessId) {
        if (!(this_present_accessId && that_present_accessId))
          return false;
        if (!this.accessId.equals(that.accessId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getKinds_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getKinds_args typedOther = (getKinds_args)other;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(typedOther.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, typedOther.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAccessId()).compareTo(typedOther.isSetAccessId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccessId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accessId, typedOther.accessId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // TOKEN
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.token = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // ACCESS_ID
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.accessId = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.token != null) {
        oprot.writeFieldBegin(TOKEN_FIELD_DESC);
        oprot.writeString(this.token);
        oprot.writeFieldEnd();
      }
      if (this.accessId != null) {
        oprot.writeFieldBegin(ACCESS_ID_FIELD_DESC);
        oprot.writeString(this.accessId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getKinds_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("accessId:");
      if (this.accessId == null) {
        sb.append("null");
      } else {
        sb.append(this.accessId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getKinds_result implements org.apache.thrift.TBase<getKinds_result, getKinds_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getKinds_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_F_FIELD_DESC = new org.apache.thrift.protocol.TField("eF", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField E_E_FIELD_DESC = new org.apache.thrift.protocol.TField("eE", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField E_TNF_FIELD_DESC = new org.apache.thrift.protocol.TField("eTNF", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField E_NF_FIELD_DESC = new org.apache.thrift.protocol.TField("eNF", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    public List<everfeeds.thrift.ttype.EntryKind> success;
    public everfeeds.thrift.error.Forbidden eF;
    public everfeeds.thrift.error.TokenExpired eE;
    public everfeeds.thrift.error.TokenNotFound eTNF;
    public everfeeds.thrift.error.NotFound eNF;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E_F((short)1, "eF"),
      E_E((short)2, "eE"),
      E_TNF((short)3, "eTNF"),
      E_NF((short)4, "eNF");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E_F
            return E_F;
          case 2: // E_E
            return E_E;
          case 3: // E_TNF
            return E_TNF;
          case 4: // E_NF
            return E_NF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, everfeeds.thrift.ttype.EntryKind.class))));
      tmpMap.put(_Fields.E_F, new org.apache.thrift.meta_data.FieldMetaData("eF", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_E, new org.apache.thrift.meta_data.FieldMetaData("eE", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_TNF, new org.apache.thrift.meta_data.FieldMetaData("eTNF", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_NF, new org.apache.thrift.meta_data.FieldMetaData("eNF", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getKinds_result.class, metaDataMap);
    }

    public getKinds_result() {
    }

    public getKinds_result(
      List<everfeeds.thrift.ttype.EntryKind> success,
      everfeeds.thrift.error.Forbidden eF,
      everfeeds.thrift.error.TokenExpired eE,
      everfeeds.thrift.error.TokenNotFound eTNF,
      everfeeds.thrift.error.NotFound eNF)
    {
      this();
      this.success = success;
      this.eF = eF;
      this.eE = eE;
      this.eTNF = eTNF;
      this.eNF = eNF;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getKinds_result(getKinds_result other) {
      if (other.isSetSuccess()) {
        List<everfeeds.thrift.ttype.EntryKind> __this__success = new ArrayList<everfeeds.thrift.ttype.EntryKind>();
        for (everfeeds.thrift.ttype.EntryKind other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetEF()) {
        this.eF = new everfeeds.thrift.error.Forbidden(other.eF);
      }
      if (other.isSetEE()) {
        this.eE = new everfeeds.thrift.error.TokenExpired(other.eE);
      }
      if (other.isSetETNF()) {
        this.eTNF = new everfeeds.thrift.error.TokenNotFound(other.eTNF);
      }
      if (other.isSetENF()) {
        this.eNF = new everfeeds.thrift.error.NotFound(other.eNF);
      }
    }

    public getKinds_result deepCopy() {
      return new getKinds_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.eF = null;
      this.eE = null;
      this.eTNF = null;
      this.eNF = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<everfeeds.thrift.ttype.EntryKind> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(everfeeds.thrift.ttype.EntryKind elem) {
      if (this.success == null) {
        this.success = new ArrayList<everfeeds.thrift.ttype.EntryKind>();
      }
      this.success.add(elem);
    }

    public List<everfeeds.thrift.ttype.EntryKind> getSuccess() {
      return this.success;
    }

    public getKinds_result setSuccess(List<everfeeds.thrift.ttype.EntryKind> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public everfeeds.thrift.error.Forbidden getEF() {
      return this.eF;
    }

    public getKinds_result setEF(everfeeds.thrift.error.Forbidden eF) {
      this.eF = eF;
      return this;
    }

    public void unsetEF() {
      this.eF = null;
    }

    /** Returns true if field eF is set (has been assigned a value) and false otherwise */
    public boolean isSetEF() {
      return this.eF != null;
    }

    public void setEFIsSet(boolean value) {
      if (!value) {
        this.eF = null;
      }
    }

    public everfeeds.thrift.error.TokenExpired getEE() {
      return this.eE;
    }

    public getKinds_result setEE(everfeeds.thrift.error.TokenExpired eE) {
      this.eE = eE;
      return this;
    }

    public void unsetEE() {
      this.eE = null;
    }

    /** Returns true if field eE is set (has been assigned a value) and false otherwise */
    public boolean isSetEE() {
      return this.eE != null;
    }

    public void setEEIsSet(boolean value) {
      if (!value) {
        this.eE = null;
      }
    }

    public everfeeds.thrift.error.TokenNotFound getETNF() {
      return this.eTNF;
    }

    public getKinds_result setETNF(everfeeds.thrift.error.TokenNotFound eTNF) {
      this.eTNF = eTNF;
      return this;
    }

    public void unsetETNF() {
      this.eTNF = null;
    }

    /** Returns true if field eTNF is set (has been assigned a value) and false otherwise */
    public boolean isSetETNF() {
      return this.eTNF != null;
    }

    public void setETNFIsSet(boolean value) {
      if (!value) {
        this.eTNF = null;
      }
    }

    public everfeeds.thrift.error.NotFound getENF() {
      return this.eNF;
    }

    public getKinds_result setENF(everfeeds.thrift.error.NotFound eNF) {
      this.eNF = eNF;
      return this;
    }

    public void unsetENF() {
      this.eNF = null;
    }

    /** Returns true if field eNF is set (has been assigned a value) and false otherwise */
    public boolean isSetENF() {
      return this.eNF != null;
    }

    public void setENFIsSet(boolean value) {
      if (!value) {
        this.eNF = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<everfeeds.thrift.ttype.EntryKind>)value);
        }
        break;

      case E_F:
        if (value == null) {
          unsetEF();
        } else {
          setEF((everfeeds.thrift.error.Forbidden)value);
        }
        break;

      case E_E:
        if (value == null) {
          unsetEE();
        } else {
          setEE((everfeeds.thrift.error.TokenExpired)value);
        }
        break;

      case E_TNF:
        if (value == null) {
          unsetETNF();
        } else {
          setETNF((everfeeds.thrift.error.TokenNotFound)value);
        }
        break;

      case E_NF:
        if (value == null) {
          unsetENF();
        } else {
          setENF((everfeeds.thrift.error.NotFound)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E_F:
        return getEF();

      case E_E:
        return getEE();

      case E_TNF:
        return getETNF();

      case E_NF:
        return getENF();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E_F:
        return isSetEF();
      case E_E:
        return isSetEE();
      case E_TNF:
        return isSetETNF();
      case E_NF:
        return isSetENF();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getKinds_result)
        return this.equals((getKinds_result)that);
      return false;
    }

    public boolean equals(getKinds_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_eF = true && this.isSetEF();
      boolean that_present_eF = true && that.isSetEF();
      if (this_present_eF || that_present_eF) {
        if (!(this_present_eF && that_present_eF))
          return false;
        if (!this.eF.equals(that.eF))
          return false;
      }

      boolean this_present_eE = true && this.isSetEE();
      boolean that_present_eE = true && that.isSetEE();
      if (this_present_eE || that_present_eE) {
        if (!(this_present_eE && that_present_eE))
          return false;
        if (!this.eE.equals(that.eE))
          return false;
      }

      boolean this_present_eTNF = true && this.isSetETNF();
      boolean that_present_eTNF = true && that.isSetETNF();
      if (this_present_eTNF || that_present_eTNF) {
        if (!(this_present_eTNF && that_present_eTNF))
          return false;
        if (!this.eTNF.equals(that.eTNF))
          return false;
      }

      boolean this_present_eNF = true && this.isSetENF();
      boolean that_present_eNF = true && that.isSetENF();
      if (this_present_eNF || that_present_eNF) {
        if (!(this_present_eNF && that_present_eNF))
          return false;
        if (!this.eNF.equals(that.eNF))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getKinds_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getKinds_result typedOther = (getKinds_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEF()).compareTo(typedOther.isSetEF());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEF()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eF, typedOther.eF);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEE()).compareTo(typedOther.isSetEE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eE, typedOther.eE);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetETNF()).compareTo(typedOther.isSetETNF());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetETNF()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eTNF, typedOther.eTNF);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetENF()).compareTo(typedOther.isSetENF());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetENF()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eNF, typedOther.eNF);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list12 = iprot.readListBegin();
                this.success = new ArrayList<everfeeds.thrift.ttype.EntryKind>(_list12.size);
                for (int _i13 = 0; _i13 < _list12.size; ++_i13)
                {
                  everfeeds.thrift.ttype.EntryKind _elem14;
                  _elem14 = everfeeds.thrift.ttype.EntryKind.findByValue(iprot.readI32());
                  this.success.add(_elem14);
                }
                iprot.readListEnd();
              }
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E_F
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eF = new everfeeds.thrift.error.Forbidden();
              this.eF.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // E_E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eE = new everfeeds.thrift.error.TokenExpired();
              this.eE.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // E_TNF
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eTNF = new everfeeds.thrift.error.TokenNotFound();
              this.eTNF.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // E_NF
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eNF = new everfeeds.thrift.error.NotFound();
              this.eNF.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, this.success.size()));
          for (everfeeds.thrift.ttype.EntryKind _iter15 : this.success)
          {
            oprot.writeI32(_iter15.getValue());
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetEF()) {
        oprot.writeFieldBegin(E_F_FIELD_DESC);
        this.eF.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetEE()) {
        oprot.writeFieldBegin(E_E_FIELD_DESC);
        this.eE.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetETNF()) {
        oprot.writeFieldBegin(E_TNF_FIELD_DESC);
        this.eTNF.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetENF()) {
        oprot.writeFieldBegin(E_NF_FIELD_DESC);
        this.eNF.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getKinds_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eF:");
      if (this.eF == null) {
        sb.append("null");
      } else {
        sb.append(this.eF);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eE:");
      if (this.eE == null) {
        sb.append("null");
      } else {
        sb.append(this.eE);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eTNF:");
      if (this.eTNF == null) {
        sb.append("null");
      } else {
        sb.append(this.eTNF);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eNF:");
      if (this.eNF == null) {
        sb.append("null");
      } else {
        sb.append(this.eNF);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class saveTag_args implements org.apache.thrift.TBase<saveTag_args, saveTag_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveTag_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField TAG_FIELD_DESC = new org.apache.thrift.protocol.TField("tag", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    public String token;
    public everfeeds.thrift.domain.Tag tag;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token"),
      TAG((short)3, "tag");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 3: // TAG
            return TAG;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "String")));
      tmpMap.put(_Fields.TAG, new org.apache.thrift.meta_data.FieldMetaData("tag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, everfeeds.thrift.domain.Tag.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveTag_args.class, metaDataMap);
    }

    public saveTag_args() {
    }

    public saveTag_args(
      String token,
      everfeeds.thrift.domain.Tag tag)
    {
      this();
      this.token = token;
      this.tag = tag;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveTag_args(saveTag_args other) {
      if (other.isSetToken()) {
        this.token = other.token;
      }
      if (other.isSetTag()) {
        this.tag = new everfeeds.thrift.domain.Tag(other.tag);
      }
    }

    public saveTag_args deepCopy() {
      return new saveTag_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      this.tag = null;
    }

    public String getToken() {
      return this.token;
    }

    public saveTag_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public everfeeds.thrift.domain.Tag getTag() {
      return this.tag;
    }

    public saveTag_args setTag(everfeeds.thrift.domain.Tag tag) {
      this.tag = tag;
      return this;
    }

    public void unsetTag() {
      this.tag = null;
    }

    /** Returns true if field tag is set (has been assigned a value) and false otherwise */
    public boolean isSetTag() {
      return this.tag != null;
    }

    public void setTagIsSet(boolean value) {
      if (!value) {
        this.tag = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case TAG:
        if (value == null) {
          unsetTag();
        } else {
          setTag((everfeeds.thrift.domain.Tag)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case TAG:
        return getTag();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case TAG:
        return isSetTag();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveTag_args)
        return this.equals((saveTag_args)that);
      return false;
    }

    public boolean equals(saveTag_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_tag = true && this.isSetTag();
      boolean that_present_tag = true && that.isSetTag();
      if (this_present_tag || that_present_tag) {
        if (!(this_present_tag && that_present_tag))
          return false;
        if (!this.tag.equals(that.tag))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(saveTag_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      saveTag_args typedOther = (saveTag_args)other;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(typedOther.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, typedOther.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTag()).compareTo(typedOther.isSetTag());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTag()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tag, typedOther.tag);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // TOKEN
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.token = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // TAG
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.tag = new everfeeds.thrift.domain.Tag();
              this.tag.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.token != null) {
        oprot.writeFieldBegin(TOKEN_FIELD_DESC);
        oprot.writeString(this.token);
        oprot.writeFieldEnd();
      }
      if (this.tag != null) {
        oprot.writeFieldBegin(TAG_FIELD_DESC);
        this.tag.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveTag_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tag:");
      if (this.tag == null) {
        sb.append("null");
      } else {
        sb.append(this.tag);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class saveTag_result implements org.apache.thrift.TBase<saveTag_result, saveTag_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveTag_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_F_FIELD_DESC = new org.apache.thrift.protocol.TField("eF", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField E_E_FIELD_DESC = new org.apache.thrift.protocol.TField("eE", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField E_TNF_FIELD_DESC = new org.apache.thrift.protocol.TField("eTNF", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField E_NF_FIELD_DESC = new org.apache.thrift.protocol.TField("eNF", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    public everfeeds.thrift.domain.Tag success;
    public everfeeds.thrift.error.Forbidden eF;
    public everfeeds.thrift.error.TokenExpired eE;
    public everfeeds.thrift.error.TokenNotFound eTNF;
    public everfeeds.thrift.error.NotFound eNF;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E_F((short)1, "eF"),
      E_E((short)2, "eE"),
      E_TNF((short)3, "eTNF"),
      E_NF((short)4, "eNF");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E_F
            return E_F;
          case 2: // E_E
            return E_E;
          case 3: // E_TNF
            return E_TNF;
          case 4: // E_NF
            return E_NF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, everfeeds.thrift.domain.Tag.class)));
      tmpMap.put(_Fields.E_F, new org.apache.thrift.meta_data.FieldMetaData("eF", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_E, new org.apache.thrift.meta_data.FieldMetaData("eE", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_TNF, new org.apache.thrift.meta_data.FieldMetaData("eTNF", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_NF, new org.apache.thrift.meta_data.FieldMetaData("eNF", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveTag_result.class, metaDataMap);
    }

    public saveTag_result() {
    }

    public saveTag_result(
      everfeeds.thrift.domain.Tag success,
      everfeeds.thrift.error.Forbidden eF,
      everfeeds.thrift.error.TokenExpired eE,
      everfeeds.thrift.error.TokenNotFound eTNF,
      everfeeds.thrift.error.NotFound eNF)
    {
      this();
      this.success = success;
      this.eF = eF;
      this.eE = eE;
      this.eTNF = eTNF;
      this.eNF = eNF;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveTag_result(saveTag_result other) {
      if (other.isSetSuccess()) {
        this.success = new everfeeds.thrift.domain.Tag(other.success);
      }
      if (other.isSetEF()) {
        this.eF = new everfeeds.thrift.error.Forbidden(other.eF);
      }
      if (other.isSetEE()) {
        this.eE = new everfeeds.thrift.error.TokenExpired(other.eE);
      }
      if (other.isSetETNF()) {
        this.eTNF = new everfeeds.thrift.error.TokenNotFound(other.eTNF);
      }
      if (other.isSetENF()) {
        this.eNF = new everfeeds.thrift.error.NotFound(other.eNF);
      }
    }

    public saveTag_result deepCopy() {
      return new saveTag_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.eF = null;
      this.eE = null;
      this.eTNF = null;
      this.eNF = null;
    }

    public everfeeds.thrift.domain.Tag getSuccess() {
      return this.success;
    }

    public saveTag_result setSuccess(everfeeds.thrift.domain.Tag success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public everfeeds.thrift.error.Forbidden getEF() {
      return this.eF;
    }

    public saveTag_result setEF(everfeeds.thrift.error.Forbidden eF) {
      this.eF = eF;
      return this;
    }

    public void unsetEF() {
      this.eF = null;
    }

    /** Returns true if field eF is set (has been assigned a value) and false otherwise */
    public boolean isSetEF() {
      return this.eF != null;
    }

    public void setEFIsSet(boolean value) {
      if (!value) {
        this.eF = null;
      }
    }

    public everfeeds.thrift.error.TokenExpired getEE() {
      return this.eE;
    }

    public saveTag_result setEE(everfeeds.thrift.error.TokenExpired eE) {
      this.eE = eE;
      return this;
    }

    public void unsetEE() {
      this.eE = null;
    }

    /** Returns true if field eE is set (has been assigned a value) and false otherwise */
    public boolean isSetEE() {
      return this.eE != null;
    }

    public void setEEIsSet(boolean value) {
      if (!value) {
        this.eE = null;
      }
    }

    public everfeeds.thrift.error.TokenNotFound getETNF() {
      return this.eTNF;
    }

    public saveTag_result setETNF(everfeeds.thrift.error.TokenNotFound eTNF) {
      this.eTNF = eTNF;
      return this;
    }

    public void unsetETNF() {
      this.eTNF = null;
    }

    /** Returns true if field eTNF is set (has been assigned a value) and false otherwise */
    public boolean isSetETNF() {
      return this.eTNF != null;
    }

    public void setETNFIsSet(boolean value) {
      if (!value) {
        this.eTNF = null;
      }
    }

    public everfeeds.thrift.error.NotFound getENF() {
      return this.eNF;
    }

    public saveTag_result setENF(everfeeds.thrift.error.NotFound eNF) {
      this.eNF = eNF;
      return this;
    }

    public void unsetENF() {
      this.eNF = null;
    }

    /** Returns true if field eNF is set (has been assigned a value) and false otherwise */
    public boolean isSetENF() {
      return this.eNF != null;
    }

    public void setENFIsSet(boolean value) {
      if (!value) {
        this.eNF = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((everfeeds.thrift.domain.Tag)value);
        }
        break;

      case E_F:
        if (value == null) {
          unsetEF();
        } else {
          setEF((everfeeds.thrift.error.Forbidden)value);
        }
        break;

      case E_E:
        if (value == null) {
          unsetEE();
        } else {
          setEE((everfeeds.thrift.error.TokenExpired)value);
        }
        break;

      case E_TNF:
        if (value == null) {
          unsetETNF();
        } else {
          setETNF((everfeeds.thrift.error.TokenNotFound)value);
        }
        break;

      case E_NF:
        if (value == null) {
          unsetENF();
        } else {
          setENF((everfeeds.thrift.error.NotFound)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E_F:
        return getEF();

      case E_E:
        return getEE();

      case E_TNF:
        return getETNF();

      case E_NF:
        return getENF();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E_F:
        return isSetEF();
      case E_E:
        return isSetEE();
      case E_TNF:
        return isSetETNF();
      case E_NF:
        return isSetENF();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveTag_result)
        return this.equals((saveTag_result)that);
      return false;
    }

    public boolean equals(saveTag_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_eF = true && this.isSetEF();
      boolean that_present_eF = true && that.isSetEF();
      if (this_present_eF || that_present_eF) {
        if (!(this_present_eF && that_present_eF))
          return false;
        if (!this.eF.equals(that.eF))
          return false;
      }

      boolean this_present_eE = true && this.isSetEE();
      boolean that_present_eE = true && that.isSetEE();
      if (this_present_eE || that_present_eE) {
        if (!(this_present_eE && that_present_eE))
          return false;
        if (!this.eE.equals(that.eE))
          return false;
      }

      boolean this_present_eTNF = true && this.isSetETNF();
      boolean that_present_eTNF = true && that.isSetETNF();
      if (this_present_eTNF || that_present_eTNF) {
        if (!(this_present_eTNF && that_present_eTNF))
          return false;
        if (!this.eTNF.equals(that.eTNF))
          return false;
      }

      boolean this_present_eNF = true && this.isSetENF();
      boolean that_present_eNF = true && that.isSetENF();
      if (this_present_eNF || that_present_eNF) {
        if (!(this_present_eNF && that_present_eNF))
          return false;
        if (!this.eNF.equals(that.eNF))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(saveTag_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      saveTag_result typedOther = (saveTag_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEF()).compareTo(typedOther.isSetEF());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEF()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eF, typedOther.eF);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEE()).compareTo(typedOther.isSetEE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eE, typedOther.eE);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetETNF()).compareTo(typedOther.isSetETNF());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetETNF()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eTNF, typedOther.eTNF);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetENF()).compareTo(typedOther.isSetENF());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetENF()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eNF, typedOther.eNF);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.success = new everfeeds.thrift.domain.Tag();
              this.success.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E_F
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eF = new everfeeds.thrift.error.Forbidden();
              this.eF.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // E_E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eE = new everfeeds.thrift.error.TokenExpired();
              this.eE.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // E_TNF
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eTNF = new everfeeds.thrift.error.TokenNotFound();
              this.eTNF.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // E_NF
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eNF = new everfeeds.thrift.error.NotFound();
              this.eNF.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetEF()) {
        oprot.writeFieldBegin(E_F_FIELD_DESC);
        this.eF.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetEE()) {
        oprot.writeFieldBegin(E_E_FIELD_DESC);
        this.eE.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetETNF()) {
        oprot.writeFieldBegin(E_TNF_FIELD_DESC);
        this.eTNF.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetENF()) {
        oprot.writeFieldBegin(E_NF_FIELD_DESC);
        this.eNF.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveTag_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eF:");
      if (this.eF == null) {
        sb.append("null");
      } else {
        sb.append(this.eF);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eE:");
      if (this.eE == null) {
        sb.append("null");
      } else {
        sb.append(this.eE);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eTNF:");
      if (this.eTNF == null) {
        sb.append("null");
      } else {
        sb.append(this.eTNF);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eNF:");
      if (this.eNF == null) {
        sb.append("null");
      } else {
        sb.append(this.eNF);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class saveCategory_args implements org.apache.thrift.TBase<saveCategory_args, saveCategory_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveCategory_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CATEGORY_FIELD_DESC = new org.apache.thrift.protocol.TField("category", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    public String token;
    public everfeeds.thrift.domain.Category category;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token"),
      CATEGORY((short)3, "category");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 3: // CATEGORY
            return CATEGORY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "String")));
      tmpMap.put(_Fields.CATEGORY, new org.apache.thrift.meta_data.FieldMetaData("category", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, everfeeds.thrift.domain.Category.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveCategory_args.class, metaDataMap);
    }

    public saveCategory_args() {
    }

    public saveCategory_args(
      String token,
      everfeeds.thrift.domain.Category category)
    {
      this();
      this.token = token;
      this.category = category;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveCategory_args(saveCategory_args other) {
      if (other.isSetToken()) {
        this.token = other.token;
      }
      if (other.isSetCategory()) {
        this.category = new everfeeds.thrift.domain.Category(other.category);
      }
    }

    public saveCategory_args deepCopy() {
      return new saveCategory_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      this.category = null;
    }

    public String getToken() {
      return this.token;
    }

    public saveCategory_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public everfeeds.thrift.domain.Category getCategory() {
      return this.category;
    }

    public saveCategory_args setCategory(everfeeds.thrift.domain.Category category) {
      this.category = category;
      return this;
    }

    public void unsetCategory() {
      this.category = null;
    }

    /** Returns true if field category is set (has been assigned a value) and false otherwise */
    public boolean isSetCategory() {
      return this.category != null;
    }

    public void setCategoryIsSet(boolean value) {
      if (!value) {
        this.category = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case CATEGORY:
        if (value == null) {
          unsetCategory();
        } else {
          setCategory((everfeeds.thrift.domain.Category)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case CATEGORY:
        return getCategory();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case CATEGORY:
        return isSetCategory();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveCategory_args)
        return this.equals((saveCategory_args)that);
      return false;
    }

    public boolean equals(saveCategory_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_category = true && this.isSetCategory();
      boolean that_present_category = true && that.isSetCategory();
      if (this_present_category || that_present_category) {
        if (!(this_present_category && that_present_category))
          return false;
        if (!this.category.equals(that.category))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(saveCategory_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      saveCategory_args typedOther = (saveCategory_args)other;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(typedOther.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, typedOther.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCategory()).compareTo(typedOther.isSetCategory());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCategory()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.category, typedOther.category);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // TOKEN
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.token = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // CATEGORY
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.category = new everfeeds.thrift.domain.Category();
              this.category.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.token != null) {
        oprot.writeFieldBegin(TOKEN_FIELD_DESC);
        oprot.writeString(this.token);
        oprot.writeFieldEnd();
      }
      if (this.category != null) {
        oprot.writeFieldBegin(CATEGORY_FIELD_DESC);
        this.category.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveCategory_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("category:");
      if (this.category == null) {
        sb.append("null");
      } else {
        sb.append(this.category);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class saveCategory_result implements org.apache.thrift.TBase<saveCategory_result, saveCategory_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveCategory_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_F_FIELD_DESC = new org.apache.thrift.protocol.TField("eF", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField E_E_FIELD_DESC = new org.apache.thrift.protocol.TField("eE", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField E_TNF_FIELD_DESC = new org.apache.thrift.protocol.TField("eTNF", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField E_NF_FIELD_DESC = new org.apache.thrift.protocol.TField("eNF", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    public everfeeds.thrift.domain.Category success;
    public everfeeds.thrift.error.Forbidden eF;
    public everfeeds.thrift.error.TokenExpired eE;
    public everfeeds.thrift.error.TokenNotFound eTNF;
    public everfeeds.thrift.error.NotFound eNF;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E_F((short)1, "eF"),
      E_E((short)2, "eE"),
      E_TNF((short)3, "eTNF"),
      E_NF((short)4, "eNF");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E_F
            return E_F;
          case 2: // E_E
            return E_E;
          case 3: // E_TNF
            return E_TNF;
          case 4: // E_NF
            return E_NF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, everfeeds.thrift.domain.Category.class)));
      tmpMap.put(_Fields.E_F, new org.apache.thrift.meta_data.FieldMetaData("eF", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_E, new org.apache.thrift.meta_data.FieldMetaData("eE", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_TNF, new org.apache.thrift.meta_data.FieldMetaData("eTNF", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_NF, new org.apache.thrift.meta_data.FieldMetaData("eNF", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveCategory_result.class, metaDataMap);
    }

    public saveCategory_result() {
    }

    public saveCategory_result(
      everfeeds.thrift.domain.Category success,
      everfeeds.thrift.error.Forbidden eF,
      everfeeds.thrift.error.TokenExpired eE,
      everfeeds.thrift.error.TokenNotFound eTNF,
      everfeeds.thrift.error.NotFound eNF)
    {
      this();
      this.success = success;
      this.eF = eF;
      this.eE = eE;
      this.eTNF = eTNF;
      this.eNF = eNF;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveCategory_result(saveCategory_result other) {
      if (other.isSetSuccess()) {
        this.success = new everfeeds.thrift.domain.Category(other.success);
      }
      if (other.isSetEF()) {
        this.eF = new everfeeds.thrift.error.Forbidden(other.eF);
      }
      if (other.isSetEE()) {
        this.eE = new everfeeds.thrift.error.TokenExpired(other.eE);
      }
      if (other.isSetETNF()) {
        this.eTNF = new everfeeds.thrift.error.TokenNotFound(other.eTNF);
      }
      if (other.isSetENF()) {
        this.eNF = new everfeeds.thrift.error.NotFound(other.eNF);
      }
    }

    public saveCategory_result deepCopy() {
      return new saveCategory_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.eF = null;
      this.eE = null;
      this.eTNF = null;
      this.eNF = null;
    }

    public everfeeds.thrift.domain.Category getSuccess() {
      return this.success;
    }

    public saveCategory_result setSuccess(everfeeds.thrift.domain.Category success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public everfeeds.thrift.error.Forbidden getEF() {
      return this.eF;
    }

    public saveCategory_result setEF(everfeeds.thrift.error.Forbidden eF) {
      this.eF = eF;
      return this;
    }

    public void unsetEF() {
      this.eF = null;
    }

    /** Returns true if field eF is set (has been assigned a value) and false otherwise */
    public boolean isSetEF() {
      return this.eF != null;
    }

    public void setEFIsSet(boolean value) {
      if (!value) {
        this.eF = null;
      }
    }

    public everfeeds.thrift.error.TokenExpired getEE() {
      return this.eE;
    }

    public saveCategory_result setEE(everfeeds.thrift.error.TokenExpired eE) {
      this.eE = eE;
      return this;
    }

    public void unsetEE() {
      this.eE = null;
    }

    /** Returns true if field eE is set (has been assigned a value) and false otherwise */
    public boolean isSetEE() {
      return this.eE != null;
    }

    public void setEEIsSet(boolean value) {
      if (!value) {
        this.eE = null;
      }
    }

    public everfeeds.thrift.error.TokenNotFound getETNF() {
      return this.eTNF;
    }

    public saveCategory_result setETNF(everfeeds.thrift.error.TokenNotFound eTNF) {
      this.eTNF = eTNF;
      return this;
    }

    public void unsetETNF() {
      this.eTNF = null;
    }

    /** Returns true if field eTNF is set (has been assigned a value) and false otherwise */
    public boolean isSetETNF() {
      return this.eTNF != null;
    }

    public void setETNFIsSet(boolean value) {
      if (!value) {
        this.eTNF = null;
      }
    }

    public everfeeds.thrift.error.NotFound getENF() {
      return this.eNF;
    }

    public saveCategory_result setENF(everfeeds.thrift.error.NotFound eNF) {
      this.eNF = eNF;
      return this;
    }

    public void unsetENF() {
      this.eNF = null;
    }

    /** Returns true if field eNF is set (has been assigned a value) and false otherwise */
    public boolean isSetENF() {
      return this.eNF != null;
    }

    public void setENFIsSet(boolean value) {
      if (!value) {
        this.eNF = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((everfeeds.thrift.domain.Category)value);
        }
        break;

      case E_F:
        if (value == null) {
          unsetEF();
        } else {
          setEF((everfeeds.thrift.error.Forbidden)value);
        }
        break;

      case E_E:
        if (value == null) {
          unsetEE();
        } else {
          setEE((everfeeds.thrift.error.TokenExpired)value);
        }
        break;

      case E_TNF:
        if (value == null) {
          unsetETNF();
        } else {
          setETNF((everfeeds.thrift.error.TokenNotFound)value);
        }
        break;

      case E_NF:
        if (value == null) {
          unsetENF();
        } else {
          setENF((everfeeds.thrift.error.NotFound)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E_F:
        return getEF();

      case E_E:
        return getEE();

      case E_TNF:
        return getETNF();

      case E_NF:
        return getENF();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E_F:
        return isSetEF();
      case E_E:
        return isSetEE();
      case E_TNF:
        return isSetETNF();
      case E_NF:
        return isSetENF();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveCategory_result)
        return this.equals((saveCategory_result)that);
      return false;
    }

    public boolean equals(saveCategory_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_eF = true && this.isSetEF();
      boolean that_present_eF = true && that.isSetEF();
      if (this_present_eF || that_present_eF) {
        if (!(this_present_eF && that_present_eF))
          return false;
        if (!this.eF.equals(that.eF))
          return false;
      }

      boolean this_present_eE = true && this.isSetEE();
      boolean that_present_eE = true && that.isSetEE();
      if (this_present_eE || that_present_eE) {
        if (!(this_present_eE && that_present_eE))
          return false;
        if (!this.eE.equals(that.eE))
          return false;
      }

      boolean this_present_eTNF = true && this.isSetETNF();
      boolean that_present_eTNF = true && that.isSetETNF();
      if (this_present_eTNF || that_present_eTNF) {
        if (!(this_present_eTNF && that_present_eTNF))
          return false;
        if (!this.eTNF.equals(that.eTNF))
          return false;
      }

      boolean this_present_eNF = true && this.isSetENF();
      boolean that_present_eNF = true && that.isSetENF();
      if (this_present_eNF || that_present_eNF) {
        if (!(this_present_eNF && that_present_eNF))
          return false;
        if (!this.eNF.equals(that.eNF))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(saveCategory_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      saveCategory_result typedOther = (saveCategory_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEF()).compareTo(typedOther.isSetEF());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEF()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eF, typedOther.eF);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEE()).compareTo(typedOther.isSetEE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eE, typedOther.eE);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetETNF()).compareTo(typedOther.isSetETNF());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetETNF()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eTNF, typedOther.eTNF);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetENF()).compareTo(typedOther.isSetENF());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetENF()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eNF, typedOther.eNF);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.success = new everfeeds.thrift.domain.Category();
              this.success.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E_F
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eF = new everfeeds.thrift.error.Forbidden();
              this.eF.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // E_E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eE = new everfeeds.thrift.error.TokenExpired();
              this.eE.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // E_TNF
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eTNF = new everfeeds.thrift.error.TokenNotFound();
              this.eTNF.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // E_NF
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eNF = new everfeeds.thrift.error.NotFound();
              this.eNF.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetEF()) {
        oprot.writeFieldBegin(E_F_FIELD_DESC);
        this.eF.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetEE()) {
        oprot.writeFieldBegin(E_E_FIELD_DESC);
        this.eE.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetETNF()) {
        oprot.writeFieldBegin(E_TNF_FIELD_DESC);
        this.eTNF.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetENF()) {
        oprot.writeFieldBegin(E_NF_FIELD_DESC);
        this.eNF.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveCategory_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eF:");
      if (this.eF == null) {
        sb.append("null");
      } else {
        sb.append(this.eF);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eE:");
      if (this.eE == null) {
        sb.append("null");
      } else {
        sb.append(this.eE);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eTNF:");
      if (this.eTNF == null) {
        sb.append("null");
      } else {
        sb.append(this.eTNF);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eNF:");
      if (this.eNF == null) {
        sb.append("null");
      } else {
        sb.append(this.eNF);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class saveFilter_args implements org.apache.thrift.TBase<saveFilter_args, saveFilter_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveFilter_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField FILTER_FIELD_DESC = new org.apache.thrift.protocol.TField("filter", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    public String token;
    public everfeeds.thrift.domain.Filter filter;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token"),
      FILTER((short)2, "filter");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 2: // FILTER
            return FILTER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "String")));
      tmpMap.put(_Fields.FILTER, new org.apache.thrift.meta_data.FieldMetaData("filter", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, everfeeds.thrift.domain.Filter.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveFilter_args.class, metaDataMap);
    }

    public saveFilter_args() {
    }

    public saveFilter_args(
      String token,
      everfeeds.thrift.domain.Filter filter)
    {
      this();
      this.token = token;
      this.filter = filter;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveFilter_args(saveFilter_args other) {
      if (other.isSetToken()) {
        this.token = other.token;
      }
      if (other.isSetFilter()) {
        this.filter = new everfeeds.thrift.domain.Filter(other.filter);
      }
    }

    public saveFilter_args deepCopy() {
      return new saveFilter_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      this.filter = null;
    }

    public String getToken() {
      return this.token;
    }

    public saveFilter_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public everfeeds.thrift.domain.Filter getFilter() {
      return this.filter;
    }

    public saveFilter_args setFilter(everfeeds.thrift.domain.Filter filter) {
      this.filter = filter;
      return this;
    }

    public void unsetFilter() {
      this.filter = null;
    }

    /** Returns true if field filter is set (has been assigned a value) and false otherwise */
    public boolean isSetFilter() {
      return this.filter != null;
    }

    public void setFilterIsSet(boolean value) {
      if (!value) {
        this.filter = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case FILTER:
        if (value == null) {
          unsetFilter();
        } else {
          setFilter((everfeeds.thrift.domain.Filter)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case FILTER:
        return getFilter();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case FILTER:
        return isSetFilter();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveFilter_args)
        return this.equals((saveFilter_args)that);
      return false;
    }

    public boolean equals(saveFilter_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_filter = true && this.isSetFilter();
      boolean that_present_filter = true && that.isSetFilter();
      if (this_present_filter || that_present_filter) {
        if (!(this_present_filter && that_present_filter))
          return false;
        if (!this.filter.equals(that.filter))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(saveFilter_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      saveFilter_args typedOther = (saveFilter_args)other;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(typedOther.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, typedOther.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFilter()).compareTo(typedOther.isSetFilter());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFilter()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filter, typedOther.filter);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // TOKEN
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.token = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // FILTER
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.filter = new everfeeds.thrift.domain.Filter();
              this.filter.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.token != null) {
        oprot.writeFieldBegin(TOKEN_FIELD_DESC);
        oprot.writeString(this.token);
        oprot.writeFieldEnd();
      }
      if (this.filter != null) {
        oprot.writeFieldBegin(FILTER_FIELD_DESC);
        this.filter.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveFilter_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("filter:");
      if (this.filter == null) {
        sb.append("null");
      } else {
        sb.append(this.filter);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class saveFilter_result implements org.apache.thrift.TBase<saveFilter_result, saveFilter_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveFilter_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_F_FIELD_DESC = new org.apache.thrift.protocol.TField("eF", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField E_E_FIELD_DESC = new org.apache.thrift.protocol.TField("eE", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField E_TNF_FIELD_DESC = new org.apache.thrift.protocol.TField("eTNF", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField E_NF_FIELD_DESC = new org.apache.thrift.protocol.TField("eNF", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    public everfeeds.thrift.domain.Filter success;
    public everfeeds.thrift.error.Forbidden eF;
    public everfeeds.thrift.error.TokenExpired eE;
    public everfeeds.thrift.error.TokenNotFound eTNF;
    public everfeeds.thrift.error.NotFound eNF;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E_F((short)1, "eF"),
      E_E((short)2, "eE"),
      E_TNF((short)3, "eTNF"),
      E_NF((short)4, "eNF");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E_F
            return E_F;
          case 2: // E_E
            return E_E;
          case 3: // E_TNF
            return E_TNF;
          case 4: // E_NF
            return E_NF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, everfeeds.thrift.domain.Filter.class)));
      tmpMap.put(_Fields.E_F, new org.apache.thrift.meta_data.FieldMetaData("eF", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_E, new org.apache.thrift.meta_data.FieldMetaData("eE", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_TNF, new org.apache.thrift.meta_data.FieldMetaData("eTNF", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_NF, new org.apache.thrift.meta_data.FieldMetaData("eNF", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveFilter_result.class, metaDataMap);
    }

    public saveFilter_result() {
    }

    public saveFilter_result(
      everfeeds.thrift.domain.Filter success,
      everfeeds.thrift.error.Forbidden eF,
      everfeeds.thrift.error.TokenExpired eE,
      everfeeds.thrift.error.TokenNotFound eTNF,
      everfeeds.thrift.error.NotFound eNF)
    {
      this();
      this.success = success;
      this.eF = eF;
      this.eE = eE;
      this.eTNF = eTNF;
      this.eNF = eNF;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveFilter_result(saveFilter_result other) {
      if (other.isSetSuccess()) {
        this.success = new everfeeds.thrift.domain.Filter(other.success);
      }
      if (other.isSetEF()) {
        this.eF = new everfeeds.thrift.error.Forbidden(other.eF);
      }
      if (other.isSetEE()) {
        this.eE = new everfeeds.thrift.error.TokenExpired(other.eE);
      }
      if (other.isSetETNF()) {
        this.eTNF = new everfeeds.thrift.error.TokenNotFound(other.eTNF);
      }
      if (other.isSetENF()) {
        this.eNF = new everfeeds.thrift.error.NotFound(other.eNF);
      }
    }

    public saveFilter_result deepCopy() {
      return new saveFilter_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.eF = null;
      this.eE = null;
      this.eTNF = null;
      this.eNF = null;
    }

    public everfeeds.thrift.domain.Filter getSuccess() {
      return this.success;
    }

    public saveFilter_result setSuccess(everfeeds.thrift.domain.Filter success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public everfeeds.thrift.error.Forbidden getEF() {
      return this.eF;
    }

    public saveFilter_result setEF(everfeeds.thrift.error.Forbidden eF) {
      this.eF = eF;
      return this;
    }

    public void unsetEF() {
      this.eF = null;
    }

    /** Returns true if field eF is set (has been assigned a value) and false otherwise */
    public boolean isSetEF() {
      return this.eF != null;
    }

    public void setEFIsSet(boolean value) {
      if (!value) {
        this.eF = null;
      }
    }

    public everfeeds.thrift.error.TokenExpired getEE() {
      return this.eE;
    }

    public saveFilter_result setEE(everfeeds.thrift.error.TokenExpired eE) {
      this.eE = eE;
      return this;
    }

    public void unsetEE() {
      this.eE = null;
    }

    /** Returns true if field eE is set (has been assigned a value) and false otherwise */
    public boolean isSetEE() {
      return this.eE != null;
    }

    public void setEEIsSet(boolean value) {
      if (!value) {
        this.eE = null;
      }
    }

    public everfeeds.thrift.error.TokenNotFound getETNF() {
      return this.eTNF;
    }

    public saveFilter_result setETNF(everfeeds.thrift.error.TokenNotFound eTNF) {
      this.eTNF = eTNF;
      return this;
    }

    public void unsetETNF() {
      this.eTNF = null;
    }

    /** Returns true if field eTNF is set (has been assigned a value) and false otherwise */
    public boolean isSetETNF() {
      return this.eTNF != null;
    }

    public void setETNFIsSet(boolean value) {
      if (!value) {
        this.eTNF = null;
      }
    }

    public everfeeds.thrift.error.NotFound getENF() {
      return this.eNF;
    }

    public saveFilter_result setENF(everfeeds.thrift.error.NotFound eNF) {
      this.eNF = eNF;
      return this;
    }

    public void unsetENF() {
      this.eNF = null;
    }

    /** Returns true if field eNF is set (has been assigned a value) and false otherwise */
    public boolean isSetENF() {
      return this.eNF != null;
    }

    public void setENFIsSet(boolean value) {
      if (!value) {
        this.eNF = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((everfeeds.thrift.domain.Filter)value);
        }
        break;

      case E_F:
        if (value == null) {
          unsetEF();
        } else {
          setEF((everfeeds.thrift.error.Forbidden)value);
        }
        break;

      case E_E:
        if (value == null) {
          unsetEE();
        } else {
          setEE((everfeeds.thrift.error.TokenExpired)value);
        }
        break;

      case E_TNF:
        if (value == null) {
          unsetETNF();
        } else {
          setETNF((everfeeds.thrift.error.TokenNotFound)value);
        }
        break;

      case E_NF:
        if (value == null) {
          unsetENF();
        } else {
          setENF((everfeeds.thrift.error.NotFound)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E_F:
        return getEF();

      case E_E:
        return getEE();

      case E_TNF:
        return getETNF();

      case E_NF:
        return getENF();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E_F:
        return isSetEF();
      case E_E:
        return isSetEE();
      case E_TNF:
        return isSetETNF();
      case E_NF:
        return isSetENF();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveFilter_result)
        return this.equals((saveFilter_result)that);
      return false;
    }

    public boolean equals(saveFilter_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_eF = true && this.isSetEF();
      boolean that_present_eF = true && that.isSetEF();
      if (this_present_eF || that_present_eF) {
        if (!(this_present_eF && that_present_eF))
          return false;
        if (!this.eF.equals(that.eF))
          return false;
      }

      boolean this_present_eE = true && this.isSetEE();
      boolean that_present_eE = true && that.isSetEE();
      if (this_present_eE || that_present_eE) {
        if (!(this_present_eE && that_present_eE))
          return false;
        if (!this.eE.equals(that.eE))
          return false;
      }

      boolean this_present_eTNF = true && this.isSetETNF();
      boolean that_present_eTNF = true && that.isSetETNF();
      if (this_present_eTNF || that_present_eTNF) {
        if (!(this_present_eTNF && that_present_eTNF))
          return false;
        if (!this.eTNF.equals(that.eTNF))
          return false;
      }

      boolean this_present_eNF = true && this.isSetENF();
      boolean that_present_eNF = true && that.isSetENF();
      if (this_present_eNF || that_present_eNF) {
        if (!(this_present_eNF && that_present_eNF))
          return false;
        if (!this.eNF.equals(that.eNF))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(saveFilter_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      saveFilter_result typedOther = (saveFilter_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEF()).compareTo(typedOther.isSetEF());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEF()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eF, typedOther.eF);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEE()).compareTo(typedOther.isSetEE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eE, typedOther.eE);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetETNF()).compareTo(typedOther.isSetETNF());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetETNF()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eTNF, typedOther.eTNF);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetENF()).compareTo(typedOther.isSetENF());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetENF()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eNF, typedOther.eNF);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.success = new everfeeds.thrift.domain.Filter();
              this.success.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E_F
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eF = new everfeeds.thrift.error.Forbidden();
              this.eF.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // E_E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eE = new everfeeds.thrift.error.TokenExpired();
              this.eE.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // E_TNF
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eTNF = new everfeeds.thrift.error.TokenNotFound();
              this.eTNF.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // E_NF
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eNF = new everfeeds.thrift.error.NotFound();
              this.eNF.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetEF()) {
        oprot.writeFieldBegin(E_F_FIELD_DESC);
        this.eF.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetEE()) {
        oprot.writeFieldBegin(E_E_FIELD_DESC);
        this.eE.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetETNF()) {
        oprot.writeFieldBegin(E_TNF_FIELD_DESC);
        this.eTNF.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetENF()) {
        oprot.writeFieldBegin(E_NF_FIELD_DESC);
        this.eNF.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveFilter_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eF:");
      if (this.eF == null) {
        sb.append("null");
      } else {
        sb.append(this.eF);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eE:");
      if (this.eE == null) {
        sb.append("null");
      } else {
        sb.append(this.eE);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eTNF:");
      if (this.eTNF == null) {
        sb.append("null");
      } else {
        sb.append(this.eTNF);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eNF:");
      if (this.eNF == null) {
        sb.append("null");
      } else {
        sb.append(this.eNF);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getMash_args implements org.apache.thrift.TBase<getMash_args, getMash_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMash_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SPLIT_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("splitDate", org.apache.thrift.protocol.TType.I64, (short)10);
    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I16, (short)20);
    private static final org.apache.thrift.protocol.TField MAX_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("maxCount", org.apache.thrift.protocol.TType.I16, (short)30);

    public String token;
    public long splitDate;
    public short page;
    public short maxCount;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token"),
      SPLIT_DATE((short)10, "splitDate"),
      PAGE((short)20, "page"),
      MAX_COUNT((short)30, "maxCount");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 10: // SPLIT_DATE
            return SPLIT_DATE;
          case 20: // PAGE
            return PAGE;
          case 30: // MAX_COUNT
            return MAX_COUNT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SPLITDATE_ISSET_ID = 0;
    private static final int __PAGE_ISSET_ID = 1;
    private static final int __MAXCOUNT_ISSET_ID = 2;
    private BitSet __isset_bit_vector = new BitSet(3);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "String")));
      tmpMap.put(_Fields.SPLIT_DATE, new org.apache.thrift.meta_data.FieldMetaData("splitDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Timestamp")));
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
      tmpMap.put(_Fields.MAX_COUNT, new org.apache.thrift.meta_data.FieldMetaData("maxCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMash_args.class, metaDataMap);
    }

    public getMash_args() {
    }

    public getMash_args(
      String token,
      long splitDate,
      short page,
      short maxCount)
    {
      this();
      this.token = token;
      this.splitDate = splitDate;
      setSplitDateIsSet(true);
      this.page = page;
      setPageIsSet(true);
      this.maxCount = maxCount;
      setMaxCountIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMash_args(getMash_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetToken()) {
        this.token = other.token;
      }
      this.splitDate = other.splitDate;
      this.page = other.page;
      this.maxCount = other.maxCount;
    }

    public getMash_args deepCopy() {
      return new getMash_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      setSplitDateIsSet(false);
      this.splitDate = 0;
      setPageIsSet(false);
      this.page = 0;
      setMaxCountIsSet(false);
      this.maxCount = 0;
    }

    public String getToken() {
      return this.token;
    }

    public getMash_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public long getSplitDate() {
      return this.splitDate;
    }

    public getMash_args setSplitDate(long splitDate) {
      this.splitDate = splitDate;
      setSplitDateIsSet(true);
      return this;
    }

    public void unsetSplitDate() {
      __isset_bit_vector.clear(__SPLITDATE_ISSET_ID);
    }

    /** Returns true if field splitDate is set (has been assigned a value) and false otherwise */
    public boolean isSetSplitDate() {
      return __isset_bit_vector.get(__SPLITDATE_ISSET_ID);
    }

    public void setSplitDateIsSet(boolean value) {
      __isset_bit_vector.set(__SPLITDATE_ISSET_ID, value);
    }

    public short getPage() {
      return this.page;
    }

    public getMash_args setPage(short page) {
      this.page = page;
      setPageIsSet(true);
      return this;
    }

    public void unsetPage() {
      __isset_bit_vector.clear(__PAGE_ISSET_ID);
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return __isset_bit_vector.get(__PAGE_ISSET_ID);
    }

    public void setPageIsSet(boolean value) {
      __isset_bit_vector.set(__PAGE_ISSET_ID, value);
    }

    public short getMaxCount() {
      return this.maxCount;
    }

    public getMash_args setMaxCount(short maxCount) {
      this.maxCount = maxCount;
      setMaxCountIsSet(true);
      return this;
    }

    public void unsetMaxCount() {
      __isset_bit_vector.clear(__MAXCOUNT_ISSET_ID);
    }

    /** Returns true if field maxCount is set (has been assigned a value) and false otherwise */
    public boolean isSetMaxCount() {
      return __isset_bit_vector.get(__MAXCOUNT_ISSET_ID);
    }

    public void setMaxCountIsSet(boolean value) {
      __isset_bit_vector.set(__MAXCOUNT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case SPLIT_DATE:
        if (value == null) {
          unsetSplitDate();
        } else {
          setSplitDate((Long)value);
        }
        break;

      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((Short)value);
        }
        break;

      case MAX_COUNT:
        if (value == null) {
          unsetMaxCount();
        } else {
          setMaxCount((Short)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case SPLIT_DATE:
        return new Long(getSplitDate());

      case PAGE:
        return new Short(getPage());

      case MAX_COUNT:
        return new Short(getMaxCount());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case SPLIT_DATE:
        return isSetSplitDate();
      case PAGE:
        return isSetPage();
      case MAX_COUNT:
        return isSetMaxCount();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMash_args)
        return this.equals((getMash_args)that);
      return false;
    }

    public boolean equals(getMash_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_splitDate = true;
      boolean that_present_splitDate = true;
      if (this_present_splitDate || that_present_splitDate) {
        if (!(this_present_splitDate && that_present_splitDate))
          return false;
        if (this.splitDate != that.splitDate)
          return false;
      }

      boolean this_present_page = true;
      boolean that_present_page = true;
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (this.page != that.page)
          return false;
      }

      boolean this_present_maxCount = true;
      boolean that_present_maxCount = true;
      if (this_present_maxCount || that_present_maxCount) {
        if (!(this_present_maxCount && that_present_maxCount))
          return false;
        if (this.maxCount != that.maxCount)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getMash_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getMash_args typedOther = (getMash_args)other;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(typedOther.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, typedOther.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSplitDate()).compareTo(typedOther.isSetSplitDate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSplitDate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.splitDate, typedOther.splitDate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPage()).compareTo(typedOther.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, typedOther.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMaxCount()).compareTo(typedOther.isSetMaxCount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMaxCount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxCount, typedOther.maxCount);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // TOKEN
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.token = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 10: // SPLIT_DATE
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.splitDate = iprot.readI64();
              setSplitDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 20: // PAGE
            if (field.type == org.apache.thrift.protocol.TType.I16) {
              this.page = iprot.readI16();
              setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 30: // MAX_COUNT
            if (field.type == org.apache.thrift.protocol.TType.I16) {
              this.maxCount = iprot.readI16();
              setMaxCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.token != null) {
        oprot.writeFieldBegin(TOKEN_FIELD_DESC);
        oprot.writeString(this.token);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SPLIT_DATE_FIELD_DESC);
      oprot.writeI64(this.splitDate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI16(this.page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_COUNT_FIELD_DESC);
      oprot.writeI16(this.maxCount);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMash_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("splitDate:");
      sb.append(this.splitDate);
      first = false;
      if (!first) sb.append(", ");
      sb.append("page:");
      sb.append(this.page);
      first = false;
      if (!first) sb.append(", ");
      sb.append("maxCount:");
      sb.append(this.maxCount);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getMash_result implements org.apache.thrift.TBase<getMash_result, getMash_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMash_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_F_FIELD_DESC = new org.apache.thrift.protocol.TField("eF", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField E_E_FIELD_DESC = new org.apache.thrift.protocol.TField("eE", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField E_TNF_FIELD_DESC = new org.apache.thrift.protocol.TField("eTNF", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField E_NF_FIELD_DESC = new org.apache.thrift.protocol.TField("eNF", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)5);

    public List<everfeeds.thrift.domain.Entry> success;
    public everfeeds.thrift.error.Forbidden eF;
    public everfeeds.thrift.error.TokenExpired eE;
    public everfeeds.thrift.error.TokenNotFound eTNF;
    public everfeeds.thrift.error.NotFound eNF;
    public everfeeds.thrift.error.WrongArgument e;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E_F((short)1, "eF"),
      E_E((short)2, "eE"),
      E_TNF((short)3, "eTNF"),
      E_NF((short)4, "eNF"),
      E((short)5, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E_F
            return E_F;
          case 2: // E_E
            return E_E;
          case 3: // E_TNF
            return E_TNF;
          case 4: // E_NF
            return E_NF;
          case 5: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, everfeeds.thrift.domain.Entry.class))));
      tmpMap.put(_Fields.E_F, new org.apache.thrift.meta_data.FieldMetaData("eF", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_E, new org.apache.thrift.meta_data.FieldMetaData("eE", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_TNF, new org.apache.thrift.meta_data.FieldMetaData("eTNF", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_NF, new org.apache.thrift.meta_data.FieldMetaData("eNF", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMash_result.class, metaDataMap);
    }

    public getMash_result() {
    }

    public getMash_result(
      List<everfeeds.thrift.domain.Entry> success,
      everfeeds.thrift.error.Forbidden eF,
      everfeeds.thrift.error.TokenExpired eE,
      everfeeds.thrift.error.TokenNotFound eTNF,
      everfeeds.thrift.error.NotFound eNF,
      everfeeds.thrift.error.WrongArgument e)
    {
      this();
      this.success = success;
      this.eF = eF;
      this.eE = eE;
      this.eTNF = eTNF;
      this.eNF = eNF;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMash_result(getMash_result other) {
      if (other.isSetSuccess()) {
        List<everfeeds.thrift.domain.Entry> __this__success = new ArrayList<everfeeds.thrift.domain.Entry>();
        for (everfeeds.thrift.domain.Entry other_element : other.success) {
          __this__success.add(new everfeeds.thrift.domain.Entry(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetEF()) {
        this.eF = new everfeeds.thrift.error.Forbidden(other.eF);
      }
      if (other.isSetEE()) {
        this.eE = new everfeeds.thrift.error.TokenExpired(other.eE);
      }
      if (other.isSetETNF()) {
        this.eTNF = new everfeeds.thrift.error.TokenNotFound(other.eTNF);
      }
      if (other.isSetENF()) {
        this.eNF = new everfeeds.thrift.error.NotFound(other.eNF);
      }
      if (other.isSetE()) {
        this.e = new everfeeds.thrift.error.WrongArgument(other.e);
      }
    }

    public getMash_result deepCopy() {
      return new getMash_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.eF = null;
      this.eE = null;
      this.eTNF = null;
      this.eNF = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<everfeeds.thrift.domain.Entry> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(everfeeds.thrift.domain.Entry elem) {
      if (this.success == null) {
        this.success = new ArrayList<everfeeds.thrift.domain.Entry>();
      }
      this.success.add(elem);
    }

    public List<everfeeds.thrift.domain.Entry> getSuccess() {
      return this.success;
    }

    public getMash_result setSuccess(List<everfeeds.thrift.domain.Entry> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public everfeeds.thrift.error.Forbidden getEF() {
      return this.eF;
    }

    public getMash_result setEF(everfeeds.thrift.error.Forbidden eF) {
      this.eF = eF;
      return this;
    }

    public void unsetEF() {
      this.eF = null;
    }

    /** Returns true if field eF is set (has been assigned a value) and false otherwise */
    public boolean isSetEF() {
      return this.eF != null;
    }

    public void setEFIsSet(boolean value) {
      if (!value) {
        this.eF = null;
      }
    }

    public everfeeds.thrift.error.TokenExpired getEE() {
      return this.eE;
    }

    public getMash_result setEE(everfeeds.thrift.error.TokenExpired eE) {
      this.eE = eE;
      return this;
    }

    public void unsetEE() {
      this.eE = null;
    }

    /** Returns true if field eE is set (has been assigned a value) and false otherwise */
    public boolean isSetEE() {
      return this.eE != null;
    }

    public void setEEIsSet(boolean value) {
      if (!value) {
        this.eE = null;
      }
    }

    public everfeeds.thrift.error.TokenNotFound getETNF() {
      return this.eTNF;
    }

    public getMash_result setETNF(everfeeds.thrift.error.TokenNotFound eTNF) {
      this.eTNF = eTNF;
      return this;
    }

    public void unsetETNF() {
      this.eTNF = null;
    }

    /** Returns true if field eTNF is set (has been assigned a value) and false otherwise */
    public boolean isSetETNF() {
      return this.eTNF != null;
    }

    public void setETNFIsSet(boolean value) {
      if (!value) {
        this.eTNF = null;
      }
    }

    public everfeeds.thrift.error.NotFound getENF() {
      return this.eNF;
    }

    public getMash_result setENF(everfeeds.thrift.error.NotFound eNF) {
      this.eNF = eNF;
      return this;
    }

    public void unsetENF() {
      this.eNF = null;
    }

    /** Returns true if field eNF is set (has been assigned a value) and false otherwise */
    public boolean isSetENF() {
      return this.eNF != null;
    }

    public void setENFIsSet(boolean value) {
      if (!value) {
        this.eNF = null;
      }
    }

    public everfeeds.thrift.error.WrongArgument getE() {
      return this.e;
    }

    public getMash_result setE(everfeeds.thrift.error.WrongArgument e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<everfeeds.thrift.domain.Entry>)value);
        }
        break;

      case E_F:
        if (value == null) {
          unsetEF();
        } else {
          setEF((everfeeds.thrift.error.Forbidden)value);
        }
        break;

      case E_E:
        if (value == null) {
          unsetEE();
        } else {
          setEE((everfeeds.thrift.error.TokenExpired)value);
        }
        break;

      case E_TNF:
        if (value == null) {
          unsetETNF();
        } else {
          setETNF((everfeeds.thrift.error.TokenNotFound)value);
        }
        break;

      case E_NF:
        if (value == null) {
          unsetENF();
        } else {
          setENF((everfeeds.thrift.error.NotFound)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((everfeeds.thrift.error.WrongArgument)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E_F:
        return getEF();

      case E_E:
        return getEE();

      case E_TNF:
        return getETNF();

      case E_NF:
        return getENF();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E_F:
        return isSetEF();
      case E_E:
        return isSetEE();
      case E_TNF:
        return isSetETNF();
      case E_NF:
        return isSetENF();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMash_result)
        return this.equals((getMash_result)that);
      return false;
    }

    public boolean equals(getMash_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_eF = true && this.isSetEF();
      boolean that_present_eF = true && that.isSetEF();
      if (this_present_eF || that_present_eF) {
        if (!(this_present_eF && that_present_eF))
          return false;
        if (!this.eF.equals(that.eF))
          return false;
      }

      boolean this_present_eE = true && this.isSetEE();
      boolean that_present_eE = true && that.isSetEE();
      if (this_present_eE || that_present_eE) {
        if (!(this_present_eE && that_present_eE))
          return false;
        if (!this.eE.equals(that.eE))
          return false;
      }

      boolean this_present_eTNF = true && this.isSetETNF();
      boolean that_present_eTNF = true && that.isSetETNF();
      if (this_present_eTNF || that_present_eTNF) {
        if (!(this_present_eTNF && that_present_eTNF))
          return false;
        if (!this.eTNF.equals(that.eTNF))
          return false;
      }

      boolean this_present_eNF = true && this.isSetENF();
      boolean that_present_eNF = true && that.isSetENF();
      if (this_present_eNF || that_present_eNF) {
        if (!(this_present_eNF && that_present_eNF))
          return false;
        if (!this.eNF.equals(that.eNF))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getMash_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getMash_result typedOther = (getMash_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEF()).compareTo(typedOther.isSetEF());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEF()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eF, typedOther.eF);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEE()).compareTo(typedOther.isSetEE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eE, typedOther.eE);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetETNF()).compareTo(typedOther.isSetETNF());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetETNF()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eTNF, typedOther.eTNF);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetENF()).compareTo(typedOther.isSetENF());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetENF()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eNF, typedOther.eNF);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                this.success = new ArrayList<everfeeds.thrift.domain.Entry>(_list16.size);
                for (int _i17 = 0; _i17 < _list16.size; ++_i17)
                {
                  everfeeds.thrift.domain.Entry _elem18;
                  _elem18 = new everfeeds.thrift.domain.Entry();
                  _elem18.read(iprot);
                  this.success.add(_elem18);
                }
                iprot.readListEnd();
              }
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E_F
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eF = new everfeeds.thrift.error.Forbidden();
              this.eF.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // E_E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eE = new everfeeds.thrift.error.TokenExpired();
              this.eE.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // E_TNF
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eTNF = new everfeeds.thrift.error.TokenNotFound();
              this.eTNF.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // E_NF
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eNF = new everfeeds.thrift.error.NotFound();
              this.eNF.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new everfeeds.thrift.error.WrongArgument();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, this.success.size()));
          for (everfeeds.thrift.domain.Entry _iter19 : this.success)
          {
            _iter19.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetEF()) {
        oprot.writeFieldBegin(E_F_FIELD_DESC);
        this.eF.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetEE()) {
        oprot.writeFieldBegin(E_E_FIELD_DESC);
        this.eE.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetETNF()) {
        oprot.writeFieldBegin(E_TNF_FIELD_DESC);
        this.eTNF.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetENF()) {
        oprot.writeFieldBegin(E_NF_FIELD_DESC);
        this.eNF.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMash_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eF:");
      if (this.eF == null) {
        sb.append("null");
      } else {
        sb.append(this.eF);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eE:");
      if (this.eE == null) {
        sb.append("null");
      } else {
        sb.append(this.eE);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eTNF:");
      if (this.eTNF == null) {
        sb.append("null");
      } else {
        sb.append(this.eTNF);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eNF:");
      if (this.eNF == null) {
        sb.append("null");
      } else {
        sb.append(this.eNF);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getMashNew_args implements org.apache.thrift.TBase<getMashNew_args, getMashNew_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMashNew_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SPLIT_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("splitDate", org.apache.thrift.protocol.TType.I64, (short)10);
    private static final org.apache.thrift.protocol.TField MAX_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("maxCount", org.apache.thrift.protocol.TType.I16, (short)20);

    public String token;
    public long splitDate;
    public short maxCount;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token"),
      SPLIT_DATE((short)10, "splitDate"),
      MAX_COUNT((short)20, "maxCount");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 10: // SPLIT_DATE
            return SPLIT_DATE;
          case 20: // MAX_COUNT
            return MAX_COUNT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SPLITDATE_ISSET_ID = 0;
    private static final int __MAXCOUNT_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "String")));
      tmpMap.put(_Fields.SPLIT_DATE, new org.apache.thrift.meta_data.FieldMetaData("splitDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Timestamp")));
      tmpMap.put(_Fields.MAX_COUNT, new org.apache.thrift.meta_data.FieldMetaData("maxCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMashNew_args.class, metaDataMap);
    }

    public getMashNew_args() {
    }

    public getMashNew_args(
      String token,
      long splitDate,
      short maxCount)
    {
      this();
      this.token = token;
      this.splitDate = splitDate;
      setSplitDateIsSet(true);
      this.maxCount = maxCount;
      setMaxCountIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMashNew_args(getMashNew_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetToken()) {
        this.token = other.token;
      }
      this.splitDate = other.splitDate;
      this.maxCount = other.maxCount;
    }

    public getMashNew_args deepCopy() {
      return new getMashNew_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      setSplitDateIsSet(false);
      this.splitDate = 0;
      setMaxCountIsSet(false);
      this.maxCount = 0;
    }

    public String getToken() {
      return this.token;
    }

    public getMashNew_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public long getSplitDate() {
      return this.splitDate;
    }

    public getMashNew_args setSplitDate(long splitDate) {
      this.splitDate = splitDate;
      setSplitDateIsSet(true);
      return this;
    }

    public void unsetSplitDate() {
      __isset_bit_vector.clear(__SPLITDATE_ISSET_ID);
    }

    /** Returns true if field splitDate is set (has been assigned a value) and false otherwise */
    public boolean isSetSplitDate() {
      return __isset_bit_vector.get(__SPLITDATE_ISSET_ID);
    }

    public void setSplitDateIsSet(boolean value) {
      __isset_bit_vector.set(__SPLITDATE_ISSET_ID, value);
    }

    public short getMaxCount() {
      return this.maxCount;
    }

    public getMashNew_args setMaxCount(short maxCount) {
      this.maxCount = maxCount;
      setMaxCountIsSet(true);
      return this;
    }

    public void unsetMaxCount() {
      __isset_bit_vector.clear(__MAXCOUNT_ISSET_ID);
    }

    /** Returns true if field maxCount is set (has been assigned a value) and false otherwise */
    public boolean isSetMaxCount() {
      return __isset_bit_vector.get(__MAXCOUNT_ISSET_ID);
    }

    public void setMaxCountIsSet(boolean value) {
      __isset_bit_vector.set(__MAXCOUNT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case SPLIT_DATE:
        if (value == null) {
          unsetSplitDate();
        } else {
          setSplitDate((Long)value);
        }
        break;

      case MAX_COUNT:
        if (value == null) {
          unsetMaxCount();
        } else {
          setMaxCount((Short)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case SPLIT_DATE:
        return new Long(getSplitDate());

      case MAX_COUNT:
        return new Short(getMaxCount());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case SPLIT_DATE:
        return isSetSplitDate();
      case MAX_COUNT:
        return isSetMaxCount();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMashNew_args)
        return this.equals((getMashNew_args)that);
      return false;
    }

    public boolean equals(getMashNew_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_splitDate = true;
      boolean that_present_splitDate = true;
      if (this_present_splitDate || that_present_splitDate) {
        if (!(this_present_splitDate && that_present_splitDate))
          return false;
        if (this.splitDate != that.splitDate)
          return false;
      }

      boolean this_present_maxCount = true;
      boolean that_present_maxCount = true;
      if (this_present_maxCount || that_present_maxCount) {
        if (!(this_present_maxCount && that_present_maxCount))
          return false;
        if (this.maxCount != that.maxCount)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getMashNew_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getMashNew_args typedOther = (getMashNew_args)other;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(typedOther.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, typedOther.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSplitDate()).compareTo(typedOther.isSetSplitDate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSplitDate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.splitDate, typedOther.splitDate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMaxCount()).compareTo(typedOther.isSetMaxCount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMaxCount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxCount, typedOther.maxCount);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // TOKEN
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.token = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 10: // SPLIT_DATE
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.splitDate = iprot.readI64();
              setSplitDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 20: // MAX_COUNT
            if (field.type == org.apache.thrift.protocol.TType.I16) {
              this.maxCount = iprot.readI16();
              setMaxCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.token != null) {
        oprot.writeFieldBegin(TOKEN_FIELD_DESC);
        oprot.writeString(this.token);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SPLIT_DATE_FIELD_DESC);
      oprot.writeI64(this.splitDate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_COUNT_FIELD_DESC);
      oprot.writeI16(this.maxCount);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMashNew_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("splitDate:");
      sb.append(this.splitDate);
      first = false;
      if (!first) sb.append(", ");
      sb.append("maxCount:");
      sb.append(this.maxCount);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getMashNew_result implements org.apache.thrift.TBase<getMashNew_result, getMashNew_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMashNew_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_F_FIELD_DESC = new org.apache.thrift.protocol.TField("eF", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField E_E_FIELD_DESC = new org.apache.thrift.protocol.TField("eE", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField E_TNF_FIELD_DESC = new org.apache.thrift.protocol.TField("eTNF", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField E_NF_FIELD_DESC = new org.apache.thrift.protocol.TField("eNF", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)5);

    public List<everfeeds.thrift.domain.Entry> success;
    public everfeeds.thrift.error.Forbidden eF;
    public everfeeds.thrift.error.TokenExpired eE;
    public everfeeds.thrift.error.TokenNotFound eTNF;
    public everfeeds.thrift.error.NotFound eNF;
    public everfeeds.thrift.error.WrongArgument e;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E_F((short)1, "eF"),
      E_E((short)2, "eE"),
      E_TNF((short)3, "eTNF"),
      E_NF((short)4, "eNF"),
      E((short)5, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E_F
            return E_F;
          case 2: // E_E
            return E_E;
          case 3: // E_TNF
            return E_TNF;
          case 4: // E_NF
            return E_NF;
          case 5: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, everfeeds.thrift.domain.Entry.class))));
      tmpMap.put(_Fields.E_F, new org.apache.thrift.meta_data.FieldMetaData("eF", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_E, new org.apache.thrift.meta_data.FieldMetaData("eE", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_TNF, new org.apache.thrift.meta_data.FieldMetaData("eTNF", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_NF, new org.apache.thrift.meta_data.FieldMetaData("eNF", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMashNew_result.class, metaDataMap);
    }

    public getMashNew_result() {
    }

    public getMashNew_result(
      List<everfeeds.thrift.domain.Entry> success,
      everfeeds.thrift.error.Forbidden eF,
      everfeeds.thrift.error.TokenExpired eE,
      everfeeds.thrift.error.TokenNotFound eTNF,
      everfeeds.thrift.error.NotFound eNF,
      everfeeds.thrift.error.WrongArgument e)
    {
      this();
      this.success = success;
      this.eF = eF;
      this.eE = eE;
      this.eTNF = eTNF;
      this.eNF = eNF;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMashNew_result(getMashNew_result other) {
      if (other.isSetSuccess()) {
        List<everfeeds.thrift.domain.Entry> __this__success = new ArrayList<everfeeds.thrift.domain.Entry>();
        for (everfeeds.thrift.domain.Entry other_element : other.success) {
          __this__success.add(new everfeeds.thrift.domain.Entry(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetEF()) {
        this.eF = new everfeeds.thrift.error.Forbidden(other.eF);
      }
      if (other.isSetEE()) {
        this.eE = new everfeeds.thrift.error.TokenExpired(other.eE);
      }
      if (other.isSetETNF()) {
        this.eTNF = new everfeeds.thrift.error.TokenNotFound(other.eTNF);
      }
      if (other.isSetENF()) {
        this.eNF = new everfeeds.thrift.error.NotFound(other.eNF);
      }
      if (other.isSetE()) {
        this.e = new everfeeds.thrift.error.WrongArgument(other.e);
      }
    }

    public getMashNew_result deepCopy() {
      return new getMashNew_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.eF = null;
      this.eE = null;
      this.eTNF = null;
      this.eNF = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<everfeeds.thrift.domain.Entry> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(everfeeds.thrift.domain.Entry elem) {
      if (this.success == null) {
        this.success = new ArrayList<everfeeds.thrift.domain.Entry>();
      }
      this.success.add(elem);
    }

    public List<everfeeds.thrift.domain.Entry> getSuccess() {
      return this.success;
    }

    public getMashNew_result setSuccess(List<everfeeds.thrift.domain.Entry> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public everfeeds.thrift.error.Forbidden getEF() {
      return this.eF;
    }

    public getMashNew_result setEF(everfeeds.thrift.error.Forbidden eF) {
      this.eF = eF;
      return this;
    }

    public void unsetEF() {
      this.eF = null;
    }

    /** Returns true if field eF is set (has been assigned a value) and false otherwise */
    public boolean isSetEF() {
      return this.eF != null;
    }

    public void setEFIsSet(boolean value) {
      if (!value) {
        this.eF = null;
      }
    }

    public everfeeds.thrift.error.TokenExpired getEE() {
      return this.eE;
    }

    public getMashNew_result setEE(everfeeds.thrift.error.TokenExpired eE) {
      this.eE = eE;
      return this;
    }

    public void unsetEE() {
      this.eE = null;
    }

    /** Returns true if field eE is set (has been assigned a value) and false otherwise */
    public boolean isSetEE() {
      return this.eE != null;
    }

    public void setEEIsSet(boolean value) {
      if (!value) {
        this.eE = null;
      }
    }

    public everfeeds.thrift.error.TokenNotFound getETNF() {
      return this.eTNF;
    }

    public getMashNew_result setETNF(everfeeds.thrift.error.TokenNotFound eTNF) {
      this.eTNF = eTNF;
      return this;
    }

    public void unsetETNF() {
      this.eTNF = null;
    }

    /** Returns true if field eTNF is set (has been assigned a value) and false otherwise */
    public boolean isSetETNF() {
      return this.eTNF != null;
    }

    public void setETNFIsSet(boolean value) {
      if (!value) {
        this.eTNF = null;
      }
    }

    public everfeeds.thrift.error.NotFound getENF() {
      return this.eNF;
    }

    public getMashNew_result setENF(everfeeds.thrift.error.NotFound eNF) {
      this.eNF = eNF;
      return this;
    }

    public void unsetENF() {
      this.eNF = null;
    }

    /** Returns true if field eNF is set (has been assigned a value) and false otherwise */
    public boolean isSetENF() {
      return this.eNF != null;
    }

    public void setENFIsSet(boolean value) {
      if (!value) {
        this.eNF = null;
      }
    }

    public everfeeds.thrift.error.WrongArgument getE() {
      return this.e;
    }

    public getMashNew_result setE(everfeeds.thrift.error.WrongArgument e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<everfeeds.thrift.domain.Entry>)value);
        }
        break;

      case E_F:
        if (value == null) {
          unsetEF();
        } else {
          setEF((everfeeds.thrift.error.Forbidden)value);
        }
        break;

      case E_E:
        if (value == null) {
          unsetEE();
        } else {
          setEE((everfeeds.thrift.error.TokenExpired)value);
        }
        break;

      case E_TNF:
        if (value == null) {
          unsetETNF();
        } else {
          setETNF((everfeeds.thrift.error.TokenNotFound)value);
        }
        break;

      case E_NF:
        if (value == null) {
          unsetENF();
        } else {
          setENF((everfeeds.thrift.error.NotFound)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((everfeeds.thrift.error.WrongArgument)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E_F:
        return getEF();

      case E_E:
        return getEE();

      case E_TNF:
        return getETNF();

      case E_NF:
        return getENF();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E_F:
        return isSetEF();
      case E_E:
        return isSetEE();
      case E_TNF:
        return isSetETNF();
      case E_NF:
        return isSetENF();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMashNew_result)
        return this.equals((getMashNew_result)that);
      return false;
    }

    public boolean equals(getMashNew_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_eF = true && this.isSetEF();
      boolean that_present_eF = true && that.isSetEF();
      if (this_present_eF || that_present_eF) {
        if (!(this_present_eF && that_present_eF))
          return false;
        if (!this.eF.equals(that.eF))
          return false;
      }

      boolean this_present_eE = true && this.isSetEE();
      boolean that_present_eE = true && that.isSetEE();
      if (this_present_eE || that_present_eE) {
        if (!(this_present_eE && that_present_eE))
          return false;
        if (!this.eE.equals(that.eE))
          return false;
      }

      boolean this_present_eTNF = true && this.isSetETNF();
      boolean that_present_eTNF = true && that.isSetETNF();
      if (this_present_eTNF || that_present_eTNF) {
        if (!(this_present_eTNF && that_present_eTNF))
          return false;
        if (!this.eTNF.equals(that.eTNF))
          return false;
      }

      boolean this_present_eNF = true && this.isSetENF();
      boolean that_present_eNF = true && that.isSetENF();
      if (this_present_eNF || that_present_eNF) {
        if (!(this_present_eNF && that_present_eNF))
          return false;
        if (!this.eNF.equals(that.eNF))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getMashNew_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getMashNew_result typedOther = (getMashNew_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEF()).compareTo(typedOther.isSetEF());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEF()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eF, typedOther.eF);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEE()).compareTo(typedOther.isSetEE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eE, typedOther.eE);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetETNF()).compareTo(typedOther.isSetETNF());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetETNF()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eTNF, typedOther.eTNF);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetENF()).compareTo(typedOther.isSetENF());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetENF()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eNF, typedOther.eNF);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list20 = iprot.readListBegin();
                this.success = new ArrayList<everfeeds.thrift.domain.Entry>(_list20.size);
                for (int _i21 = 0; _i21 < _list20.size; ++_i21)
                {
                  everfeeds.thrift.domain.Entry _elem22;
                  _elem22 = new everfeeds.thrift.domain.Entry();
                  _elem22.read(iprot);
                  this.success.add(_elem22);
                }
                iprot.readListEnd();
              }
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E_F
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eF = new everfeeds.thrift.error.Forbidden();
              this.eF.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // E_E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eE = new everfeeds.thrift.error.TokenExpired();
              this.eE.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // E_TNF
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eTNF = new everfeeds.thrift.error.TokenNotFound();
              this.eTNF.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // E_NF
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eNF = new everfeeds.thrift.error.NotFound();
              this.eNF.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new everfeeds.thrift.error.WrongArgument();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, this.success.size()));
          for (everfeeds.thrift.domain.Entry _iter23 : this.success)
          {
            _iter23.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetEF()) {
        oprot.writeFieldBegin(E_F_FIELD_DESC);
        this.eF.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetEE()) {
        oprot.writeFieldBegin(E_E_FIELD_DESC);
        this.eE.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetETNF()) {
        oprot.writeFieldBegin(E_TNF_FIELD_DESC);
        this.eTNF.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetENF()) {
        oprot.writeFieldBegin(E_NF_FIELD_DESC);
        this.eNF.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMashNew_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eF:");
      if (this.eF == null) {
        sb.append("null");
      } else {
        sb.append(this.eF);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eE:");
      if (this.eE == null) {
        sb.append("null");
      } else {
        sb.append(this.eE);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eTNF:");
      if (this.eTNF == null) {
        sb.append("null");
      } else {
        sb.append(this.eTNF);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eNF:");
      if (this.eNF == null) {
        sb.append("null");
      } else {
        sb.append(this.eNF);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getFiltered_args implements org.apache.thrift.TBase<getFiltered_args, getFiltered_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFiltered_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField FILTER_FIELD_DESC = new org.apache.thrift.protocol.TField("filter", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I16, (short)3);
    private static final org.apache.thrift.protocol.TField MAX_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("maxCount", org.apache.thrift.protocol.TType.I16, (short)4);

    public String token;
    public everfeeds.thrift.domain.Filter filter;
    public short page;
    public short maxCount;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token"),
      FILTER((short)2, "filter"),
      PAGE((short)3, "page"),
      MAX_COUNT((short)4, "maxCount");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 2: // FILTER
            return FILTER;
          case 3: // PAGE
            return PAGE;
          case 4: // MAX_COUNT
            return MAX_COUNT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PAGE_ISSET_ID = 0;
    private static final int __MAXCOUNT_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "String")));
      tmpMap.put(_Fields.FILTER, new org.apache.thrift.meta_data.FieldMetaData("filter", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, everfeeds.thrift.domain.Filter.class)));
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
      tmpMap.put(_Fields.MAX_COUNT, new org.apache.thrift.meta_data.FieldMetaData("maxCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFiltered_args.class, metaDataMap);
    }

    public getFiltered_args() {
    }

    public getFiltered_args(
      String token,
      everfeeds.thrift.domain.Filter filter,
      short page,
      short maxCount)
    {
      this();
      this.token = token;
      this.filter = filter;
      this.page = page;
      setPageIsSet(true);
      this.maxCount = maxCount;
      setMaxCountIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFiltered_args(getFiltered_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetToken()) {
        this.token = other.token;
      }
      if (other.isSetFilter()) {
        this.filter = new everfeeds.thrift.domain.Filter(other.filter);
      }
      this.page = other.page;
      this.maxCount = other.maxCount;
    }

    public getFiltered_args deepCopy() {
      return new getFiltered_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      this.filter = null;
      setPageIsSet(false);
      this.page = 0;
      setMaxCountIsSet(false);
      this.maxCount = 0;
    }

    public String getToken() {
      return this.token;
    }

    public getFiltered_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public everfeeds.thrift.domain.Filter getFilter() {
      return this.filter;
    }

    public getFiltered_args setFilter(everfeeds.thrift.domain.Filter filter) {
      this.filter = filter;
      return this;
    }

    public void unsetFilter() {
      this.filter = null;
    }

    /** Returns true if field filter is set (has been assigned a value) and false otherwise */
    public boolean isSetFilter() {
      return this.filter != null;
    }

    public void setFilterIsSet(boolean value) {
      if (!value) {
        this.filter = null;
      }
    }

    public short getPage() {
      return this.page;
    }

    public getFiltered_args setPage(short page) {
      this.page = page;
      setPageIsSet(true);
      return this;
    }

    public void unsetPage() {
      __isset_bit_vector.clear(__PAGE_ISSET_ID);
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return __isset_bit_vector.get(__PAGE_ISSET_ID);
    }

    public void setPageIsSet(boolean value) {
      __isset_bit_vector.set(__PAGE_ISSET_ID, value);
    }

    public short getMaxCount() {
      return this.maxCount;
    }

    public getFiltered_args setMaxCount(short maxCount) {
      this.maxCount = maxCount;
      setMaxCountIsSet(true);
      return this;
    }

    public void unsetMaxCount() {
      __isset_bit_vector.clear(__MAXCOUNT_ISSET_ID);
    }

    /** Returns true if field maxCount is set (has been assigned a value) and false otherwise */
    public boolean isSetMaxCount() {
      return __isset_bit_vector.get(__MAXCOUNT_ISSET_ID);
    }

    public void setMaxCountIsSet(boolean value) {
      __isset_bit_vector.set(__MAXCOUNT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case FILTER:
        if (value == null) {
          unsetFilter();
        } else {
          setFilter((everfeeds.thrift.domain.Filter)value);
        }
        break;

      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((Short)value);
        }
        break;

      case MAX_COUNT:
        if (value == null) {
          unsetMaxCount();
        } else {
          setMaxCount((Short)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case FILTER:
        return getFilter();

      case PAGE:
        return new Short(getPage());

      case MAX_COUNT:
        return new Short(getMaxCount());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case FILTER:
        return isSetFilter();
      case PAGE:
        return isSetPage();
      case MAX_COUNT:
        return isSetMaxCount();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFiltered_args)
        return this.equals((getFiltered_args)that);
      return false;
    }

    public boolean equals(getFiltered_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_filter = true && this.isSetFilter();
      boolean that_present_filter = true && that.isSetFilter();
      if (this_present_filter || that_present_filter) {
        if (!(this_present_filter && that_present_filter))
          return false;
        if (!this.filter.equals(that.filter))
          return false;
      }

      boolean this_present_page = true;
      boolean that_present_page = true;
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (this.page != that.page)
          return false;
      }

      boolean this_present_maxCount = true;
      boolean that_present_maxCount = true;
      if (this_present_maxCount || that_present_maxCount) {
        if (!(this_present_maxCount && that_present_maxCount))
          return false;
        if (this.maxCount != that.maxCount)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getFiltered_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getFiltered_args typedOther = (getFiltered_args)other;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(typedOther.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, typedOther.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFilter()).compareTo(typedOther.isSetFilter());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFilter()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filter, typedOther.filter);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPage()).compareTo(typedOther.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, typedOther.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMaxCount()).compareTo(typedOther.isSetMaxCount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMaxCount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxCount, typedOther.maxCount);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // TOKEN
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.token = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // FILTER
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.filter = new everfeeds.thrift.domain.Filter();
              this.filter.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // PAGE
            if (field.type == org.apache.thrift.protocol.TType.I16) {
              this.page = iprot.readI16();
              setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // MAX_COUNT
            if (field.type == org.apache.thrift.protocol.TType.I16) {
              this.maxCount = iprot.readI16();
              setMaxCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.token != null) {
        oprot.writeFieldBegin(TOKEN_FIELD_DESC);
        oprot.writeString(this.token);
        oprot.writeFieldEnd();
      }
      if (this.filter != null) {
        oprot.writeFieldBegin(FILTER_FIELD_DESC);
        this.filter.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI16(this.page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_COUNT_FIELD_DESC);
      oprot.writeI16(this.maxCount);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFiltered_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("filter:");
      if (this.filter == null) {
        sb.append("null");
      } else {
        sb.append(this.filter);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("page:");
      sb.append(this.page);
      first = false;
      if (!first) sb.append(", ");
      sb.append("maxCount:");
      sb.append(this.maxCount);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getFiltered_result implements org.apache.thrift.TBase<getFiltered_result, getFiltered_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFiltered_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_F_FIELD_DESC = new org.apache.thrift.protocol.TField("eF", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField E_E_FIELD_DESC = new org.apache.thrift.protocol.TField("eE", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField E_TNF_FIELD_DESC = new org.apache.thrift.protocol.TField("eTNF", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField E_NF_FIELD_DESC = new org.apache.thrift.protocol.TField("eNF", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)5);

    public List<everfeeds.thrift.domain.Entry> success;
    public everfeeds.thrift.error.Forbidden eF;
    public everfeeds.thrift.error.TokenExpired eE;
    public everfeeds.thrift.error.TokenNotFound eTNF;
    public everfeeds.thrift.error.NotFound eNF;
    public everfeeds.thrift.error.WrongArgument e;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E_F((short)1, "eF"),
      E_E((short)2, "eE"),
      E_TNF((short)3, "eTNF"),
      E_NF((short)4, "eNF"),
      E((short)5, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E_F
            return E_F;
          case 2: // E_E
            return E_E;
          case 3: // E_TNF
            return E_TNF;
          case 4: // E_NF
            return E_NF;
          case 5: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, everfeeds.thrift.domain.Entry.class))));
      tmpMap.put(_Fields.E_F, new org.apache.thrift.meta_data.FieldMetaData("eF", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_E, new org.apache.thrift.meta_data.FieldMetaData("eE", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_TNF, new org.apache.thrift.meta_data.FieldMetaData("eTNF", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_NF, new org.apache.thrift.meta_data.FieldMetaData("eNF", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFiltered_result.class, metaDataMap);
    }

    public getFiltered_result() {
    }

    public getFiltered_result(
      List<everfeeds.thrift.domain.Entry> success,
      everfeeds.thrift.error.Forbidden eF,
      everfeeds.thrift.error.TokenExpired eE,
      everfeeds.thrift.error.TokenNotFound eTNF,
      everfeeds.thrift.error.NotFound eNF,
      everfeeds.thrift.error.WrongArgument e)
    {
      this();
      this.success = success;
      this.eF = eF;
      this.eE = eE;
      this.eTNF = eTNF;
      this.eNF = eNF;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFiltered_result(getFiltered_result other) {
      if (other.isSetSuccess()) {
        List<everfeeds.thrift.domain.Entry> __this__success = new ArrayList<everfeeds.thrift.domain.Entry>();
        for (everfeeds.thrift.domain.Entry other_element : other.success) {
          __this__success.add(new everfeeds.thrift.domain.Entry(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetEF()) {
        this.eF = new everfeeds.thrift.error.Forbidden(other.eF);
      }
      if (other.isSetEE()) {
        this.eE = new everfeeds.thrift.error.TokenExpired(other.eE);
      }
      if (other.isSetETNF()) {
        this.eTNF = new everfeeds.thrift.error.TokenNotFound(other.eTNF);
      }
      if (other.isSetENF()) {
        this.eNF = new everfeeds.thrift.error.NotFound(other.eNF);
      }
      if (other.isSetE()) {
        this.e = new everfeeds.thrift.error.WrongArgument(other.e);
      }
    }

    public getFiltered_result deepCopy() {
      return new getFiltered_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.eF = null;
      this.eE = null;
      this.eTNF = null;
      this.eNF = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<everfeeds.thrift.domain.Entry> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(everfeeds.thrift.domain.Entry elem) {
      if (this.success == null) {
        this.success = new ArrayList<everfeeds.thrift.domain.Entry>();
      }
      this.success.add(elem);
    }

    public List<everfeeds.thrift.domain.Entry> getSuccess() {
      return this.success;
    }

    public getFiltered_result setSuccess(List<everfeeds.thrift.domain.Entry> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public everfeeds.thrift.error.Forbidden getEF() {
      return this.eF;
    }

    public getFiltered_result setEF(everfeeds.thrift.error.Forbidden eF) {
      this.eF = eF;
      return this;
    }

    public void unsetEF() {
      this.eF = null;
    }

    /** Returns true if field eF is set (has been assigned a value) and false otherwise */
    public boolean isSetEF() {
      return this.eF != null;
    }

    public void setEFIsSet(boolean value) {
      if (!value) {
        this.eF = null;
      }
    }

    public everfeeds.thrift.error.TokenExpired getEE() {
      return this.eE;
    }

    public getFiltered_result setEE(everfeeds.thrift.error.TokenExpired eE) {
      this.eE = eE;
      return this;
    }

    public void unsetEE() {
      this.eE = null;
    }

    /** Returns true if field eE is set (has been assigned a value) and false otherwise */
    public boolean isSetEE() {
      return this.eE != null;
    }

    public void setEEIsSet(boolean value) {
      if (!value) {
        this.eE = null;
      }
    }

    public everfeeds.thrift.error.TokenNotFound getETNF() {
      return this.eTNF;
    }

    public getFiltered_result setETNF(everfeeds.thrift.error.TokenNotFound eTNF) {
      this.eTNF = eTNF;
      return this;
    }

    public void unsetETNF() {
      this.eTNF = null;
    }

    /** Returns true if field eTNF is set (has been assigned a value) and false otherwise */
    public boolean isSetETNF() {
      return this.eTNF != null;
    }

    public void setETNFIsSet(boolean value) {
      if (!value) {
        this.eTNF = null;
      }
    }

    public everfeeds.thrift.error.NotFound getENF() {
      return this.eNF;
    }

    public getFiltered_result setENF(everfeeds.thrift.error.NotFound eNF) {
      this.eNF = eNF;
      return this;
    }

    public void unsetENF() {
      this.eNF = null;
    }

    /** Returns true if field eNF is set (has been assigned a value) and false otherwise */
    public boolean isSetENF() {
      return this.eNF != null;
    }

    public void setENFIsSet(boolean value) {
      if (!value) {
        this.eNF = null;
      }
    }

    public everfeeds.thrift.error.WrongArgument getE() {
      return this.e;
    }

    public getFiltered_result setE(everfeeds.thrift.error.WrongArgument e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<everfeeds.thrift.domain.Entry>)value);
        }
        break;

      case E_F:
        if (value == null) {
          unsetEF();
        } else {
          setEF((everfeeds.thrift.error.Forbidden)value);
        }
        break;

      case E_E:
        if (value == null) {
          unsetEE();
        } else {
          setEE((everfeeds.thrift.error.TokenExpired)value);
        }
        break;

      case E_TNF:
        if (value == null) {
          unsetETNF();
        } else {
          setETNF((everfeeds.thrift.error.TokenNotFound)value);
        }
        break;

      case E_NF:
        if (value == null) {
          unsetENF();
        } else {
          setENF((everfeeds.thrift.error.NotFound)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((everfeeds.thrift.error.WrongArgument)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E_F:
        return getEF();

      case E_E:
        return getEE();

      case E_TNF:
        return getETNF();

      case E_NF:
        return getENF();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E_F:
        return isSetEF();
      case E_E:
        return isSetEE();
      case E_TNF:
        return isSetETNF();
      case E_NF:
        return isSetENF();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFiltered_result)
        return this.equals((getFiltered_result)that);
      return false;
    }

    public boolean equals(getFiltered_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_eF = true && this.isSetEF();
      boolean that_present_eF = true && that.isSetEF();
      if (this_present_eF || that_present_eF) {
        if (!(this_present_eF && that_present_eF))
          return false;
        if (!this.eF.equals(that.eF))
          return false;
      }

      boolean this_present_eE = true && this.isSetEE();
      boolean that_present_eE = true && that.isSetEE();
      if (this_present_eE || that_present_eE) {
        if (!(this_present_eE && that_present_eE))
          return false;
        if (!this.eE.equals(that.eE))
          return false;
      }

      boolean this_present_eTNF = true && this.isSetETNF();
      boolean that_present_eTNF = true && that.isSetETNF();
      if (this_present_eTNF || that_present_eTNF) {
        if (!(this_present_eTNF && that_present_eTNF))
          return false;
        if (!this.eTNF.equals(that.eTNF))
          return false;
      }

      boolean this_present_eNF = true && this.isSetENF();
      boolean that_present_eNF = true && that.isSetENF();
      if (this_present_eNF || that_present_eNF) {
        if (!(this_present_eNF && that_present_eNF))
          return false;
        if (!this.eNF.equals(that.eNF))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getFiltered_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getFiltered_result typedOther = (getFiltered_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEF()).compareTo(typedOther.isSetEF());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEF()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eF, typedOther.eF);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEE()).compareTo(typedOther.isSetEE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eE, typedOther.eE);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetETNF()).compareTo(typedOther.isSetETNF());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetETNF()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eTNF, typedOther.eTNF);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetENF()).compareTo(typedOther.isSetENF());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetENF()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eNF, typedOther.eNF);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                this.success = new ArrayList<everfeeds.thrift.domain.Entry>(_list24.size);
                for (int _i25 = 0; _i25 < _list24.size; ++_i25)
                {
                  everfeeds.thrift.domain.Entry _elem26;
                  _elem26 = new everfeeds.thrift.domain.Entry();
                  _elem26.read(iprot);
                  this.success.add(_elem26);
                }
                iprot.readListEnd();
              }
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E_F
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eF = new everfeeds.thrift.error.Forbidden();
              this.eF.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // E_E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eE = new everfeeds.thrift.error.TokenExpired();
              this.eE.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // E_TNF
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eTNF = new everfeeds.thrift.error.TokenNotFound();
              this.eTNF.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // E_NF
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eNF = new everfeeds.thrift.error.NotFound();
              this.eNF.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new everfeeds.thrift.error.WrongArgument();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, this.success.size()));
          for (everfeeds.thrift.domain.Entry _iter27 : this.success)
          {
            _iter27.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetEF()) {
        oprot.writeFieldBegin(E_F_FIELD_DESC);
        this.eF.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetEE()) {
        oprot.writeFieldBegin(E_E_FIELD_DESC);
        this.eE.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetETNF()) {
        oprot.writeFieldBegin(E_TNF_FIELD_DESC);
        this.eTNF.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetENF()) {
        oprot.writeFieldBegin(E_NF_FIELD_DESC);
        this.eNF.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFiltered_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eF:");
      if (this.eF == null) {
        sb.append("null");
      } else {
        sb.append(this.eF);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eE:");
      if (this.eE == null) {
        sb.append("null");
      } else {
        sb.append(this.eE);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eTNF:");
      if (this.eTNF == null) {
        sb.append("null");
      } else {
        sb.append(this.eTNF);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eNF:");
      if (this.eNF == null) {
        sb.append("null");
      } else {
        sb.append(this.eNF);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getFilteredNew_args implements org.apache.thrift.TBase<getFilteredNew_args, getFilteredNew_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFilteredNew_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField FILTER_FIELD_DESC = new org.apache.thrift.protocol.TField("filter", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    public String token;
    public everfeeds.thrift.domain.Filter filter;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token"),
      FILTER((short)2, "filter");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 2: // FILTER
            return FILTER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "String")));
      tmpMap.put(_Fields.FILTER, new org.apache.thrift.meta_data.FieldMetaData("filter", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, everfeeds.thrift.domain.Filter.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFilteredNew_args.class, metaDataMap);
    }

    public getFilteredNew_args() {
    }

    public getFilteredNew_args(
      String token,
      everfeeds.thrift.domain.Filter filter)
    {
      this();
      this.token = token;
      this.filter = filter;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFilteredNew_args(getFilteredNew_args other) {
      if (other.isSetToken()) {
        this.token = other.token;
      }
      if (other.isSetFilter()) {
        this.filter = new everfeeds.thrift.domain.Filter(other.filter);
      }
    }

    public getFilteredNew_args deepCopy() {
      return new getFilteredNew_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      this.filter = null;
    }

    public String getToken() {
      return this.token;
    }

    public getFilteredNew_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public everfeeds.thrift.domain.Filter getFilter() {
      return this.filter;
    }

    public getFilteredNew_args setFilter(everfeeds.thrift.domain.Filter filter) {
      this.filter = filter;
      return this;
    }

    public void unsetFilter() {
      this.filter = null;
    }

    /** Returns true if field filter is set (has been assigned a value) and false otherwise */
    public boolean isSetFilter() {
      return this.filter != null;
    }

    public void setFilterIsSet(boolean value) {
      if (!value) {
        this.filter = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case FILTER:
        if (value == null) {
          unsetFilter();
        } else {
          setFilter((everfeeds.thrift.domain.Filter)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case FILTER:
        return getFilter();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case FILTER:
        return isSetFilter();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFilteredNew_args)
        return this.equals((getFilteredNew_args)that);
      return false;
    }

    public boolean equals(getFilteredNew_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_filter = true && this.isSetFilter();
      boolean that_present_filter = true && that.isSetFilter();
      if (this_present_filter || that_present_filter) {
        if (!(this_present_filter && that_present_filter))
          return false;
        if (!this.filter.equals(that.filter))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getFilteredNew_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getFilteredNew_args typedOther = (getFilteredNew_args)other;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(typedOther.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, typedOther.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFilter()).compareTo(typedOther.isSetFilter());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFilter()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filter, typedOther.filter);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // TOKEN
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.token = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // FILTER
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.filter = new everfeeds.thrift.domain.Filter();
              this.filter.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.token != null) {
        oprot.writeFieldBegin(TOKEN_FIELD_DESC);
        oprot.writeString(this.token);
        oprot.writeFieldEnd();
      }
      if (this.filter != null) {
        oprot.writeFieldBegin(FILTER_FIELD_DESC);
        this.filter.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFilteredNew_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("filter:");
      if (this.filter == null) {
        sb.append("null");
      } else {
        sb.append(this.filter);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getFilteredNew_result implements org.apache.thrift.TBase<getFilteredNew_result, getFilteredNew_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFilteredNew_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_F_FIELD_DESC = new org.apache.thrift.protocol.TField("eF", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField E_E_FIELD_DESC = new org.apache.thrift.protocol.TField("eE", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField E_TNF_FIELD_DESC = new org.apache.thrift.protocol.TField("eTNF", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField E_NF_FIELD_DESC = new org.apache.thrift.protocol.TField("eNF", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)5);

    public List<everfeeds.thrift.domain.Entry> success;
    public everfeeds.thrift.error.Forbidden eF;
    public everfeeds.thrift.error.TokenExpired eE;
    public everfeeds.thrift.error.TokenNotFound eTNF;
    public everfeeds.thrift.error.NotFound eNF;
    public everfeeds.thrift.error.WrongArgument e;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E_F((short)1, "eF"),
      E_E((short)2, "eE"),
      E_TNF((short)3, "eTNF"),
      E_NF((short)4, "eNF"),
      E((short)5, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E_F
            return E_F;
          case 2: // E_E
            return E_E;
          case 3: // E_TNF
            return E_TNF;
          case 4: // E_NF
            return E_NF;
          case 5: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, everfeeds.thrift.domain.Entry.class))));
      tmpMap.put(_Fields.E_F, new org.apache.thrift.meta_data.FieldMetaData("eF", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_E, new org.apache.thrift.meta_data.FieldMetaData("eE", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_TNF, new org.apache.thrift.meta_data.FieldMetaData("eTNF", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_NF, new org.apache.thrift.meta_data.FieldMetaData("eNF", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFilteredNew_result.class, metaDataMap);
    }

    public getFilteredNew_result() {
    }

    public getFilteredNew_result(
      List<everfeeds.thrift.domain.Entry> success,
      everfeeds.thrift.error.Forbidden eF,
      everfeeds.thrift.error.TokenExpired eE,
      everfeeds.thrift.error.TokenNotFound eTNF,
      everfeeds.thrift.error.NotFound eNF,
      everfeeds.thrift.error.WrongArgument e)
    {
      this();
      this.success = success;
      this.eF = eF;
      this.eE = eE;
      this.eTNF = eTNF;
      this.eNF = eNF;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFilteredNew_result(getFilteredNew_result other) {
      if (other.isSetSuccess()) {
        List<everfeeds.thrift.domain.Entry> __this__success = new ArrayList<everfeeds.thrift.domain.Entry>();
        for (everfeeds.thrift.domain.Entry other_element : other.success) {
          __this__success.add(new everfeeds.thrift.domain.Entry(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetEF()) {
        this.eF = new everfeeds.thrift.error.Forbidden(other.eF);
      }
      if (other.isSetEE()) {
        this.eE = new everfeeds.thrift.error.TokenExpired(other.eE);
      }
      if (other.isSetETNF()) {
        this.eTNF = new everfeeds.thrift.error.TokenNotFound(other.eTNF);
      }
      if (other.isSetENF()) {
        this.eNF = new everfeeds.thrift.error.NotFound(other.eNF);
      }
      if (other.isSetE()) {
        this.e = new everfeeds.thrift.error.WrongArgument(other.e);
      }
    }

    public getFilteredNew_result deepCopy() {
      return new getFilteredNew_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.eF = null;
      this.eE = null;
      this.eTNF = null;
      this.eNF = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<everfeeds.thrift.domain.Entry> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(everfeeds.thrift.domain.Entry elem) {
      if (this.success == null) {
        this.success = new ArrayList<everfeeds.thrift.domain.Entry>();
      }
      this.success.add(elem);
    }

    public List<everfeeds.thrift.domain.Entry> getSuccess() {
      return this.success;
    }

    public getFilteredNew_result setSuccess(List<everfeeds.thrift.domain.Entry> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public everfeeds.thrift.error.Forbidden getEF() {
      return this.eF;
    }

    public getFilteredNew_result setEF(everfeeds.thrift.error.Forbidden eF) {
      this.eF = eF;
      return this;
    }

    public void unsetEF() {
      this.eF = null;
    }

    /** Returns true if field eF is set (has been assigned a value) and false otherwise */
    public boolean isSetEF() {
      return this.eF != null;
    }

    public void setEFIsSet(boolean value) {
      if (!value) {
        this.eF = null;
      }
    }

    public everfeeds.thrift.error.TokenExpired getEE() {
      return this.eE;
    }

    public getFilteredNew_result setEE(everfeeds.thrift.error.TokenExpired eE) {
      this.eE = eE;
      return this;
    }

    public void unsetEE() {
      this.eE = null;
    }

    /** Returns true if field eE is set (has been assigned a value) and false otherwise */
    public boolean isSetEE() {
      return this.eE != null;
    }

    public void setEEIsSet(boolean value) {
      if (!value) {
        this.eE = null;
      }
    }

    public everfeeds.thrift.error.TokenNotFound getETNF() {
      return this.eTNF;
    }

    public getFilteredNew_result setETNF(everfeeds.thrift.error.TokenNotFound eTNF) {
      this.eTNF = eTNF;
      return this;
    }

    public void unsetETNF() {
      this.eTNF = null;
    }

    /** Returns true if field eTNF is set (has been assigned a value) and false otherwise */
    public boolean isSetETNF() {
      return this.eTNF != null;
    }

    public void setETNFIsSet(boolean value) {
      if (!value) {
        this.eTNF = null;
      }
    }

    public everfeeds.thrift.error.NotFound getENF() {
      return this.eNF;
    }

    public getFilteredNew_result setENF(everfeeds.thrift.error.NotFound eNF) {
      this.eNF = eNF;
      return this;
    }

    public void unsetENF() {
      this.eNF = null;
    }

    /** Returns true if field eNF is set (has been assigned a value) and false otherwise */
    public boolean isSetENF() {
      return this.eNF != null;
    }

    public void setENFIsSet(boolean value) {
      if (!value) {
        this.eNF = null;
      }
    }

    public everfeeds.thrift.error.WrongArgument getE() {
      return this.e;
    }

    public getFilteredNew_result setE(everfeeds.thrift.error.WrongArgument e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<everfeeds.thrift.domain.Entry>)value);
        }
        break;

      case E_F:
        if (value == null) {
          unsetEF();
        } else {
          setEF((everfeeds.thrift.error.Forbidden)value);
        }
        break;

      case E_E:
        if (value == null) {
          unsetEE();
        } else {
          setEE((everfeeds.thrift.error.TokenExpired)value);
        }
        break;

      case E_TNF:
        if (value == null) {
          unsetETNF();
        } else {
          setETNF((everfeeds.thrift.error.TokenNotFound)value);
        }
        break;

      case E_NF:
        if (value == null) {
          unsetENF();
        } else {
          setENF((everfeeds.thrift.error.NotFound)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((everfeeds.thrift.error.WrongArgument)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E_F:
        return getEF();

      case E_E:
        return getEE();

      case E_TNF:
        return getETNF();

      case E_NF:
        return getENF();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E_F:
        return isSetEF();
      case E_E:
        return isSetEE();
      case E_TNF:
        return isSetETNF();
      case E_NF:
        return isSetENF();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFilteredNew_result)
        return this.equals((getFilteredNew_result)that);
      return false;
    }

    public boolean equals(getFilteredNew_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_eF = true && this.isSetEF();
      boolean that_present_eF = true && that.isSetEF();
      if (this_present_eF || that_present_eF) {
        if (!(this_present_eF && that_present_eF))
          return false;
        if (!this.eF.equals(that.eF))
          return false;
      }

      boolean this_present_eE = true && this.isSetEE();
      boolean that_present_eE = true && that.isSetEE();
      if (this_present_eE || that_present_eE) {
        if (!(this_present_eE && that_present_eE))
          return false;
        if (!this.eE.equals(that.eE))
          return false;
      }

      boolean this_present_eTNF = true && this.isSetETNF();
      boolean that_present_eTNF = true && that.isSetETNF();
      if (this_present_eTNF || that_present_eTNF) {
        if (!(this_present_eTNF && that_present_eTNF))
          return false;
        if (!this.eTNF.equals(that.eTNF))
          return false;
      }

      boolean this_present_eNF = true && this.isSetENF();
      boolean that_present_eNF = true && that.isSetENF();
      if (this_present_eNF || that_present_eNF) {
        if (!(this_present_eNF && that_present_eNF))
          return false;
        if (!this.eNF.equals(that.eNF))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getFilteredNew_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getFilteredNew_result typedOther = (getFilteredNew_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEF()).compareTo(typedOther.isSetEF());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEF()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eF, typedOther.eF);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEE()).compareTo(typedOther.isSetEE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eE, typedOther.eE);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetETNF()).compareTo(typedOther.isSetETNF());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetETNF()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eTNF, typedOther.eTNF);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetENF()).compareTo(typedOther.isSetENF());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetENF()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eNF, typedOther.eNF);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list28 = iprot.readListBegin();
                this.success = new ArrayList<everfeeds.thrift.domain.Entry>(_list28.size);
                for (int _i29 = 0; _i29 < _list28.size; ++_i29)
                {
                  everfeeds.thrift.domain.Entry _elem30;
                  _elem30 = new everfeeds.thrift.domain.Entry();
                  _elem30.read(iprot);
                  this.success.add(_elem30);
                }
                iprot.readListEnd();
              }
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E_F
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eF = new everfeeds.thrift.error.Forbidden();
              this.eF.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // E_E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eE = new everfeeds.thrift.error.TokenExpired();
              this.eE.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // E_TNF
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eTNF = new everfeeds.thrift.error.TokenNotFound();
              this.eTNF.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // E_NF
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eNF = new everfeeds.thrift.error.NotFound();
              this.eNF.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new everfeeds.thrift.error.WrongArgument();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, this.success.size()));
          for (everfeeds.thrift.domain.Entry _iter31 : this.success)
          {
            _iter31.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetEF()) {
        oprot.writeFieldBegin(E_F_FIELD_DESC);
        this.eF.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetEE()) {
        oprot.writeFieldBegin(E_E_FIELD_DESC);
        this.eE.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetETNF()) {
        oprot.writeFieldBegin(E_TNF_FIELD_DESC);
        this.eTNF.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetENF()) {
        oprot.writeFieldBegin(E_NF_FIELD_DESC);
        this.eNF.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFilteredNew_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eF:");
      if (this.eF == null) {
        sb.append("null");
      } else {
        sb.append(this.eF);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eE:");
      if (this.eE == null) {
        sb.append("null");
      } else {
        sb.append(this.eE);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eTNF:");
      if (this.eTNF == null) {
        sb.append("null");
      } else {
        sb.append(this.eTNF);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eNF:");
      if (this.eNF == null) {
        sb.append("null");
      } else {
        sb.append(this.eNF);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

}
