/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package everfeeds.thrift.domain;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Filter implements org.apache.thrift.TBase<Filter, Filter._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Filter");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ACCESS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("accessId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField CATEGORY_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("categoryIds", org.apache.thrift.protocol.TType.LIST, (short)10);
  private static final org.apache.thrift.protocol.TField CATEGORY_WITH_FIELD_DESC = new org.apache.thrift.protocol.TField("categoryWith", org.apache.thrift.protocol.TType.BOOL, (short)11);
  private static final org.apache.thrift.protocol.TField WITH_TAG_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("withTagIds", org.apache.thrift.protocol.TType.LIST, (short)20);
  private static final org.apache.thrift.protocol.TField WITHOUT_TAG_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("withoutTagIds", org.apache.thrift.protocol.TType.LIST, (short)21);
  private static final org.apache.thrift.protocol.TField KINDS_FIELD_DESC = new org.apache.thrift.protocol.TField("kinds", org.apache.thrift.protocol.TType.LIST, (short)30);
  private static final org.apache.thrift.protocol.TField KINDS_WITH_FIELD_DESC = new org.apache.thrift.protocol.TField("kindsWith", org.apache.thrift.protocol.TType.BOOL, (short)31);
  private static final org.apache.thrift.protocol.TField SPLIT_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("splitDate", org.apache.thrift.protocol.TType.I64, (short)40);
  private static final org.apache.thrift.protocol.TField UNREAD_ONLY_FIELD_DESC = new org.apache.thrift.protocol.TField("unreadOnly", org.apache.thrift.protocol.TType.BOOL, (short)51);

  public String id;
  public String accessId;
  public String title;
  public List<String> categoryIds;
  public boolean categoryWith;
  public List<String> withTagIds;
  public List<String> withoutTagIds;
  public List<everfeeds.thrift.ttype.EntryKind> kinds;
  public boolean kindsWith;
  public long splitDate;
  public boolean unreadOnly;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    ACCESS_ID((short)2, "accessId"),
    TITLE((short)5, "title"),
    CATEGORY_IDS((short)10, "categoryIds"),
    CATEGORY_WITH((short)11, "categoryWith"),
    WITH_TAG_IDS((short)20, "withTagIds"),
    WITHOUT_TAG_IDS((short)21, "withoutTagIds"),
    KINDS((short)30, "kinds"),
    KINDS_WITH((short)31, "kindsWith"),
    SPLIT_DATE((short)40, "splitDate"),
    UNREAD_ONLY((short)51, "unreadOnly");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // ACCESS_ID
          return ACCESS_ID;
        case 5: // TITLE
          return TITLE;
        case 10: // CATEGORY_IDS
          return CATEGORY_IDS;
        case 11: // CATEGORY_WITH
          return CATEGORY_WITH;
        case 20: // WITH_TAG_IDS
          return WITH_TAG_IDS;
        case 21: // WITHOUT_TAG_IDS
          return WITHOUT_TAG_IDS;
        case 30: // KINDS
          return KINDS;
        case 31: // KINDS_WITH
          return KINDS_WITH;
        case 40: // SPLIT_DATE
          return SPLIT_DATE;
        case 51: // UNREAD_ONLY
          return UNREAD_ONLY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CATEGORYWITH_ISSET_ID = 0;
  private static final int __KINDSWITH_ISSET_ID = 1;
  private static final int __SPLITDATE_ISSET_ID = 2;
  private static final int __UNREADONLY_ISSET_ID = 3;
  private BitSet __isset_bit_vector = new BitSet(4);

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "Id")));
    tmpMap.put(_Fields.ACCESS_ID, new org.apache.thrift.meta_data.FieldMetaData("accessId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "Id")));
    tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "String")));
    tmpMap.put(_Fields.CATEGORY_IDS, new org.apache.thrift.meta_data.FieldMetaData("categoryIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , "String"))));
    tmpMap.put(_Fields.CATEGORY_WITH, new org.apache.thrift.meta_data.FieldMetaData("categoryWith", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.WITH_TAG_IDS, new org.apache.thrift.meta_data.FieldMetaData("withTagIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , "Id"))));
    tmpMap.put(_Fields.WITHOUT_TAG_IDS, new org.apache.thrift.meta_data.FieldMetaData("withoutTagIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , "Id"))));
    tmpMap.put(_Fields.KINDS, new org.apache.thrift.meta_data.FieldMetaData("kinds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, everfeeds.thrift.ttype.EntryKind.class))));
    tmpMap.put(_Fields.KINDS_WITH, new org.apache.thrift.meta_data.FieldMetaData("kindsWith", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.SPLIT_DATE, new org.apache.thrift.meta_data.FieldMetaData("splitDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "Timestamp")));
    tmpMap.put(_Fields.UNREAD_ONLY, new org.apache.thrift.meta_data.FieldMetaData("unreadOnly", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Filter.class, metaDataMap);
  }

  public Filter() {
  }

  public Filter(
    String id,
    String accessId,
    String title,
    List<String> categoryIds,
    boolean categoryWith,
    List<String> withTagIds,
    List<String> withoutTagIds,
    List<everfeeds.thrift.ttype.EntryKind> kinds,
    boolean kindsWith,
    long splitDate,
    boolean unreadOnly)
  {
    this();
    this.id = id;
    this.accessId = accessId;
    this.title = title;
    this.categoryIds = categoryIds;
    this.categoryWith = categoryWith;
    setCategoryWithIsSet(true);
    this.withTagIds = withTagIds;
    this.withoutTagIds = withoutTagIds;
    this.kinds = kinds;
    this.kindsWith = kindsWith;
    setKindsWithIsSet(true);
    this.splitDate = splitDate;
    setSplitDateIsSet(true);
    this.unreadOnly = unreadOnly;
    setUnreadOnlyIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Filter(Filter other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetAccessId()) {
      this.accessId = other.accessId;
    }
    if (other.isSetTitle()) {
      this.title = other.title;
    }
    if (other.isSetCategoryIds()) {
      List<String> __this__categoryIds = new ArrayList<String>();
      for (String other_element : other.categoryIds) {
        __this__categoryIds.add(other_element);
      }
      this.categoryIds = __this__categoryIds;
    }
    this.categoryWith = other.categoryWith;
    if (other.isSetWithTagIds()) {
      List<String> __this__withTagIds = new ArrayList<String>();
      for (String other_element : other.withTagIds) {
        __this__withTagIds.add(other_element);
      }
      this.withTagIds = __this__withTagIds;
    }
    if (other.isSetWithoutTagIds()) {
      List<String> __this__withoutTagIds = new ArrayList<String>();
      for (String other_element : other.withoutTagIds) {
        __this__withoutTagIds.add(other_element);
      }
      this.withoutTagIds = __this__withoutTagIds;
    }
    if (other.isSetKinds()) {
      List<everfeeds.thrift.ttype.EntryKind> __this__kinds = new ArrayList<everfeeds.thrift.ttype.EntryKind>();
      for (everfeeds.thrift.ttype.EntryKind other_element : other.kinds) {
        __this__kinds.add(other_element);
      }
      this.kinds = __this__kinds;
    }
    this.kindsWith = other.kindsWith;
    this.splitDate = other.splitDate;
    this.unreadOnly = other.unreadOnly;
  }

  public Filter deepCopy() {
    return new Filter(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.accessId = null;
    this.title = null;
    this.categoryIds = null;
    setCategoryWithIsSet(false);
    this.categoryWith = false;
    this.withTagIds = null;
    this.withoutTagIds = null;
    this.kinds = null;
    setKindsWithIsSet(false);
    this.kindsWith = false;
    setSplitDateIsSet(false);
    this.splitDate = 0;
    setUnreadOnlyIsSet(false);
    this.unreadOnly = false;
  }

  public String getId() {
    return this.id;
  }

  public Filter setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public String getAccessId() {
    return this.accessId;
  }

  public Filter setAccessId(String accessId) {
    this.accessId = accessId;
    return this;
  }

  public void unsetAccessId() {
    this.accessId = null;
  }

  /** Returns true if field accessId is set (has been assigned a value) and false otherwise */
  public boolean isSetAccessId() {
    return this.accessId != null;
  }

  public void setAccessIdIsSet(boolean value) {
    if (!value) {
      this.accessId = null;
    }
  }

  public String getTitle() {
    return this.title;
  }

  public Filter setTitle(String title) {
    this.title = title;
    return this;
  }

  public void unsetTitle() {
    this.title = null;
  }

  /** Returns true if field title is set (has been assigned a value) and false otherwise */
  public boolean isSetTitle() {
    return this.title != null;
  }

  public void setTitleIsSet(boolean value) {
    if (!value) {
      this.title = null;
    }
  }

  public int getCategoryIdsSize() {
    return (this.categoryIds == null) ? 0 : this.categoryIds.size();
  }

  public java.util.Iterator<String> getCategoryIdsIterator() {
    return (this.categoryIds == null) ? null : this.categoryIds.iterator();
  }

  public void addToCategoryIds(String elem) {
    if (this.categoryIds == null) {
      this.categoryIds = new ArrayList<String>();
    }
    this.categoryIds.add(elem);
  }

  public List<String> getCategoryIds() {
    return this.categoryIds;
  }

  public Filter setCategoryIds(List<String> categoryIds) {
    this.categoryIds = categoryIds;
    return this;
  }

  public void unsetCategoryIds() {
    this.categoryIds = null;
  }

  /** Returns true if field categoryIds is set (has been assigned a value) and false otherwise */
  public boolean isSetCategoryIds() {
    return this.categoryIds != null;
  }

  public void setCategoryIdsIsSet(boolean value) {
    if (!value) {
      this.categoryIds = null;
    }
  }

  public boolean isCategoryWith() {
    return this.categoryWith;
  }

  public Filter setCategoryWith(boolean categoryWith) {
    this.categoryWith = categoryWith;
    setCategoryWithIsSet(true);
    return this;
  }

  public void unsetCategoryWith() {
    __isset_bit_vector.clear(__CATEGORYWITH_ISSET_ID);
  }

  /** Returns true if field categoryWith is set (has been assigned a value) and false otherwise */
  public boolean isSetCategoryWith() {
    return __isset_bit_vector.get(__CATEGORYWITH_ISSET_ID);
  }

  public void setCategoryWithIsSet(boolean value) {
    __isset_bit_vector.set(__CATEGORYWITH_ISSET_ID, value);
  }

  public int getWithTagIdsSize() {
    return (this.withTagIds == null) ? 0 : this.withTagIds.size();
  }

  public java.util.Iterator<String> getWithTagIdsIterator() {
    return (this.withTagIds == null) ? null : this.withTagIds.iterator();
  }

  public void addToWithTagIds(String elem) {
    if (this.withTagIds == null) {
      this.withTagIds = new ArrayList<String>();
    }
    this.withTagIds.add(elem);
  }

  public List<String> getWithTagIds() {
    return this.withTagIds;
  }

  public Filter setWithTagIds(List<String> withTagIds) {
    this.withTagIds = withTagIds;
    return this;
  }

  public void unsetWithTagIds() {
    this.withTagIds = null;
  }

  /** Returns true if field withTagIds is set (has been assigned a value) and false otherwise */
  public boolean isSetWithTagIds() {
    return this.withTagIds != null;
  }

  public void setWithTagIdsIsSet(boolean value) {
    if (!value) {
      this.withTagIds = null;
    }
  }

  public int getWithoutTagIdsSize() {
    return (this.withoutTagIds == null) ? 0 : this.withoutTagIds.size();
  }

  public java.util.Iterator<String> getWithoutTagIdsIterator() {
    return (this.withoutTagIds == null) ? null : this.withoutTagIds.iterator();
  }

  public void addToWithoutTagIds(String elem) {
    if (this.withoutTagIds == null) {
      this.withoutTagIds = new ArrayList<String>();
    }
    this.withoutTagIds.add(elem);
  }

  public List<String> getWithoutTagIds() {
    return this.withoutTagIds;
  }

  public Filter setWithoutTagIds(List<String> withoutTagIds) {
    this.withoutTagIds = withoutTagIds;
    return this;
  }

  public void unsetWithoutTagIds() {
    this.withoutTagIds = null;
  }

  /** Returns true if field withoutTagIds is set (has been assigned a value) and false otherwise */
  public boolean isSetWithoutTagIds() {
    return this.withoutTagIds != null;
  }

  public void setWithoutTagIdsIsSet(boolean value) {
    if (!value) {
      this.withoutTagIds = null;
    }
  }

  public int getKindsSize() {
    return (this.kinds == null) ? 0 : this.kinds.size();
  }

  public java.util.Iterator<everfeeds.thrift.ttype.EntryKind> getKindsIterator() {
    return (this.kinds == null) ? null : this.kinds.iterator();
  }

  public void addToKinds(everfeeds.thrift.ttype.EntryKind elem) {
    if (this.kinds == null) {
      this.kinds = new ArrayList<everfeeds.thrift.ttype.EntryKind>();
    }
    this.kinds.add(elem);
  }

  public List<everfeeds.thrift.ttype.EntryKind> getKinds() {
    return this.kinds;
  }

  public Filter setKinds(List<everfeeds.thrift.ttype.EntryKind> kinds) {
    this.kinds = kinds;
    return this;
  }

  public void unsetKinds() {
    this.kinds = null;
  }

  /** Returns true if field kinds is set (has been assigned a value) and false otherwise */
  public boolean isSetKinds() {
    return this.kinds != null;
  }

  public void setKindsIsSet(boolean value) {
    if (!value) {
      this.kinds = null;
    }
  }

  public boolean isKindsWith() {
    return this.kindsWith;
  }

  public Filter setKindsWith(boolean kindsWith) {
    this.kindsWith = kindsWith;
    setKindsWithIsSet(true);
    return this;
  }

  public void unsetKindsWith() {
    __isset_bit_vector.clear(__KINDSWITH_ISSET_ID);
  }

  /** Returns true if field kindsWith is set (has been assigned a value) and false otherwise */
  public boolean isSetKindsWith() {
    return __isset_bit_vector.get(__KINDSWITH_ISSET_ID);
  }

  public void setKindsWithIsSet(boolean value) {
    __isset_bit_vector.set(__KINDSWITH_ISSET_ID, value);
  }

  public long getSplitDate() {
    return this.splitDate;
  }

  public Filter setSplitDate(long splitDate) {
    this.splitDate = splitDate;
    setSplitDateIsSet(true);
    return this;
  }

  public void unsetSplitDate() {
    __isset_bit_vector.clear(__SPLITDATE_ISSET_ID);
  }

  /** Returns true if field splitDate is set (has been assigned a value) and false otherwise */
  public boolean isSetSplitDate() {
    return __isset_bit_vector.get(__SPLITDATE_ISSET_ID);
  }

  public void setSplitDateIsSet(boolean value) {
    __isset_bit_vector.set(__SPLITDATE_ISSET_ID, value);
  }

  public boolean isUnreadOnly() {
    return this.unreadOnly;
  }

  public Filter setUnreadOnly(boolean unreadOnly) {
    this.unreadOnly = unreadOnly;
    setUnreadOnlyIsSet(true);
    return this;
  }

  public void unsetUnreadOnly() {
    __isset_bit_vector.clear(__UNREADONLY_ISSET_ID);
  }

  /** Returns true if field unreadOnly is set (has been assigned a value) and false otherwise */
  public boolean isSetUnreadOnly() {
    return __isset_bit_vector.get(__UNREADONLY_ISSET_ID);
  }

  public void setUnreadOnlyIsSet(boolean value) {
    __isset_bit_vector.set(__UNREADONLY_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case ACCESS_ID:
      if (value == null) {
        unsetAccessId();
      } else {
        setAccessId((String)value);
      }
      break;

    case TITLE:
      if (value == null) {
        unsetTitle();
      } else {
        setTitle((String)value);
      }
      break;

    case CATEGORY_IDS:
      if (value == null) {
        unsetCategoryIds();
      } else {
        setCategoryIds((List<String>)value);
      }
      break;

    case CATEGORY_WITH:
      if (value == null) {
        unsetCategoryWith();
      } else {
        setCategoryWith((Boolean)value);
      }
      break;

    case WITH_TAG_IDS:
      if (value == null) {
        unsetWithTagIds();
      } else {
        setWithTagIds((List<String>)value);
      }
      break;

    case WITHOUT_TAG_IDS:
      if (value == null) {
        unsetWithoutTagIds();
      } else {
        setWithoutTagIds((List<String>)value);
      }
      break;

    case KINDS:
      if (value == null) {
        unsetKinds();
      } else {
        setKinds((List<everfeeds.thrift.ttype.EntryKind>)value);
      }
      break;

    case KINDS_WITH:
      if (value == null) {
        unsetKindsWith();
      } else {
        setKindsWith((Boolean)value);
      }
      break;

    case SPLIT_DATE:
      if (value == null) {
        unsetSplitDate();
      } else {
        setSplitDate((Long)value);
      }
      break;

    case UNREAD_ONLY:
      if (value == null) {
        unsetUnreadOnly();
      } else {
        setUnreadOnly((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case ACCESS_ID:
      return getAccessId();

    case TITLE:
      return getTitle();

    case CATEGORY_IDS:
      return getCategoryIds();

    case CATEGORY_WITH:
      return new Boolean(isCategoryWith());

    case WITH_TAG_IDS:
      return getWithTagIds();

    case WITHOUT_TAG_IDS:
      return getWithoutTagIds();

    case KINDS:
      return getKinds();

    case KINDS_WITH:
      return new Boolean(isKindsWith());

    case SPLIT_DATE:
      return new Long(getSplitDate());

    case UNREAD_ONLY:
      return new Boolean(isUnreadOnly());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case ACCESS_ID:
      return isSetAccessId();
    case TITLE:
      return isSetTitle();
    case CATEGORY_IDS:
      return isSetCategoryIds();
    case CATEGORY_WITH:
      return isSetCategoryWith();
    case WITH_TAG_IDS:
      return isSetWithTagIds();
    case WITHOUT_TAG_IDS:
      return isSetWithoutTagIds();
    case KINDS:
      return isSetKinds();
    case KINDS_WITH:
      return isSetKindsWith();
    case SPLIT_DATE:
      return isSetSplitDate();
    case UNREAD_ONLY:
      return isSetUnreadOnly();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Filter)
      return this.equals((Filter)that);
    return false;
  }

  public boolean equals(Filter that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_accessId = true && this.isSetAccessId();
    boolean that_present_accessId = true && that.isSetAccessId();
    if (this_present_accessId || that_present_accessId) {
      if (!(this_present_accessId && that_present_accessId))
        return false;
      if (!this.accessId.equals(that.accessId))
        return false;
    }

    boolean this_present_title = true && this.isSetTitle();
    boolean that_present_title = true && that.isSetTitle();
    if (this_present_title || that_present_title) {
      if (!(this_present_title && that_present_title))
        return false;
      if (!this.title.equals(that.title))
        return false;
    }

    boolean this_present_categoryIds = true && this.isSetCategoryIds();
    boolean that_present_categoryIds = true && that.isSetCategoryIds();
    if (this_present_categoryIds || that_present_categoryIds) {
      if (!(this_present_categoryIds && that_present_categoryIds))
        return false;
      if (!this.categoryIds.equals(that.categoryIds))
        return false;
    }

    boolean this_present_categoryWith = true;
    boolean that_present_categoryWith = true;
    if (this_present_categoryWith || that_present_categoryWith) {
      if (!(this_present_categoryWith && that_present_categoryWith))
        return false;
      if (this.categoryWith != that.categoryWith)
        return false;
    }

    boolean this_present_withTagIds = true && this.isSetWithTagIds();
    boolean that_present_withTagIds = true && that.isSetWithTagIds();
    if (this_present_withTagIds || that_present_withTagIds) {
      if (!(this_present_withTagIds && that_present_withTagIds))
        return false;
      if (!this.withTagIds.equals(that.withTagIds))
        return false;
    }

    boolean this_present_withoutTagIds = true && this.isSetWithoutTagIds();
    boolean that_present_withoutTagIds = true && that.isSetWithoutTagIds();
    if (this_present_withoutTagIds || that_present_withoutTagIds) {
      if (!(this_present_withoutTagIds && that_present_withoutTagIds))
        return false;
      if (!this.withoutTagIds.equals(that.withoutTagIds))
        return false;
    }

    boolean this_present_kinds = true && this.isSetKinds();
    boolean that_present_kinds = true && that.isSetKinds();
    if (this_present_kinds || that_present_kinds) {
      if (!(this_present_kinds && that_present_kinds))
        return false;
      if (!this.kinds.equals(that.kinds))
        return false;
    }

    boolean this_present_kindsWith = true;
    boolean that_present_kindsWith = true;
    if (this_present_kindsWith || that_present_kindsWith) {
      if (!(this_present_kindsWith && that_present_kindsWith))
        return false;
      if (this.kindsWith != that.kindsWith)
        return false;
    }

    boolean this_present_splitDate = true;
    boolean that_present_splitDate = true;
    if (this_present_splitDate || that_present_splitDate) {
      if (!(this_present_splitDate && that_present_splitDate))
        return false;
      if (this.splitDate != that.splitDate)
        return false;
    }

    boolean this_present_unreadOnly = true;
    boolean that_present_unreadOnly = true;
    if (this_present_unreadOnly || that_present_unreadOnly) {
      if (!(this_present_unreadOnly && that_present_unreadOnly))
        return false;
      if (this.unreadOnly != that.unreadOnly)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Filter other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Filter typedOther = (Filter)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccessId()).compareTo(typedOther.isSetAccessId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccessId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accessId, typedOther.accessId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTitle()).compareTo(typedOther.isSetTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, typedOther.title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCategoryIds()).compareTo(typedOther.isSetCategoryIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCategoryIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.categoryIds, typedOther.categoryIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCategoryWith()).compareTo(typedOther.isSetCategoryWith());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCategoryWith()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.categoryWith, typedOther.categoryWith);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWithTagIds()).compareTo(typedOther.isSetWithTagIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWithTagIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.withTagIds, typedOther.withTagIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWithoutTagIds()).compareTo(typedOther.isSetWithoutTagIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWithoutTagIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.withoutTagIds, typedOther.withoutTagIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKinds()).compareTo(typedOther.isSetKinds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKinds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.kinds, typedOther.kinds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKindsWith()).compareTo(typedOther.isSetKindsWith());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKindsWith()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.kindsWith, typedOther.kindsWith);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSplitDate()).compareTo(typedOther.isSetSplitDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSplitDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.splitDate, typedOther.splitDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUnreadOnly()).compareTo(typedOther.isSetUnreadOnly());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnreadOnly()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unreadOnly, typedOther.unreadOnly);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // ID
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.id = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // ACCESS_ID
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.accessId = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // TITLE
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.title = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 10: // CATEGORY_IDS
          if (field.type == org.apache.thrift.protocol.TType.LIST) {
            {
              org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
              this.categoryIds = new ArrayList<String>(_list0.size);
              for (int _i1 = 0; _i1 < _list0.size; ++_i1)
              {
                String _elem2;
                _elem2 = iprot.readString();
                this.categoryIds.add(_elem2);
              }
              iprot.readListEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 11: // CATEGORY_WITH
          if (field.type == org.apache.thrift.protocol.TType.BOOL) {
            this.categoryWith = iprot.readBool();
            setCategoryWithIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 20: // WITH_TAG_IDS
          if (field.type == org.apache.thrift.protocol.TType.LIST) {
            {
              org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
              this.withTagIds = new ArrayList<String>(_list3.size);
              for (int _i4 = 0; _i4 < _list3.size; ++_i4)
              {
                String _elem5;
                _elem5 = iprot.readString();
                this.withTagIds.add(_elem5);
              }
              iprot.readListEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 21: // WITHOUT_TAG_IDS
          if (field.type == org.apache.thrift.protocol.TType.LIST) {
            {
              org.apache.thrift.protocol.TList _list6 = iprot.readListBegin();
              this.withoutTagIds = new ArrayList<String>(_list6.size);
              for (int _i7 = 0; _i7 < _list6.size; ++_i7)
              {
                String _elem8;
                _elem8 = iprot.readString();
                this.withoutTagIds.add(_elem8);
              }
              iprot.readListEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 30: // KINDS
          if (field.type == org.apache.thrift.protocol.TType.LIST) {
            {
              org.apache.thrift.protocol.TList _list9 = iprot.readListBegin();
              this.kinds = new ArrayList<everfeeds.thrift.ttype.EntryKind>(_list9.size);
              for (int _i10 = 0; _i10 < _list9.size; ++_i10)
              {
                everfeeds.thrift.ttype.EntryKind _elem11;
                _elem11 = everfeeds.thrift.ttype.EntryKind.findByValue(iprot.readI32());
                this.kinds.add(_elem11);
              }
              iprot.readListEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 31: // KINDS_WITH
          if (field.type == org.apache.thrift.protocol.TType.BOOL) {
            this.kindsWith = iprot.readBool();
            setKindsWithIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 40: // SPLIT_DATE
          if (field.type == org.apache.thrift.protocol.TType.I64) {
            this.splitDate = iprot.readI64();
            setSplitDateIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 51: // UNREAD_ONLY
          if (field.type == org.apache.thrift.protocol.TType.BOOL) {
            this.unreadOnly = iprot.readBool();
            setUnreadOnlyIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.id != null) {
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeString(this.id);
      oprot.writeFieldEnd();
    }
    if (this.accessId != null) {
      oprot.writeFieldBegin(ACCESS_ID_FIELD_DESC);
      oprot.writeString(this.accessId);
      oprot.writeFieldEnd();
    }
    if (this.title != null) {
      oprot.writeFieldBegin(TITLE_FIELD_DESC);
      oprot.writeString(this.title);
      oprot.writeFieldEnd();
    }
    if (this.categoryIds != null) {
      oprot.writeFieldBegin(CATEGORY_IDS_FIELD_DESC);
      {
        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, this.categoryIds.size()));
        for (String _iter12 : this.categoryIds)
        {
          oprot.writeString(_iter12);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(CATEGORY_WITH_FIELD_DESC);
    oprot.writeBool(this.categoryWith);
    oprot.writeFieldEnd();
    if (this.withTagIds != null) {
      oprot.writeFieldBegin(WITH_TAG_IDS_FIELD_DESC);
      {
        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, this.withTagIds.size()));
        for (String _iter13 : this.withTagIds)
        {
          oprot.writeString(_iter13);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.withoutTagIds != null) {
      oprot.writeFieldBegin(WITHOUT_TAG_IDS_FIELD_DESC);
      {
        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, this.withoutTagIds.size()));
        for (String _iter14 : this.withoutTagIds)
        {
          oprot.writeString(_iter14);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.kinds != null) {
      oprot.writeFieldBegin(KINDS_FIELD_DESC);
      {
        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, this.kinds.size()));
        for (everfeeds.thrift.ttype.EntryKind _iter15 : this.kinds)
        {
          oprot.writeI32(_iter15.getValue());
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(KINDS_WITH_FIELD_DESC);
    oprot.writeBool(this.kindsWith);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(SPLIT_DATE_FIELD_DESC);
    oprot.writeI64(this.splitDate);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(UNREAD_ONLY_FIELD_DESC);
    oprot.writeBool(this.unreadOnly);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Filter(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("accessId:");
    if (this.accessId == null) {
      sb.append("null");
    } else {
      sb.append(this.accessId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("title:");
    if (this.title == null) {
      sb.append("null");
    } else {
      sb.append(this.title);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("categoryIds:");
    if (this.categoryIds == null) {
      sb.append("null");
    } else {
      sb.append(this.categoryIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("categoryWith:");
    sb.append(this.categoryWith);
    first = false;
    if (!first) sb.append(", ");
    sb.append("withTagIds:");
    if (this.withTagIds == null) {
      sb.append("null");
    } else {
      sb.append(this.withTagIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("withoutTagIds:");
    if (this.withoutTagIds == null) {
      sb.append("null");
    } else {
      sb.append(this.withoutTagIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("kinds:");
    if (this.kinds == null) {
      sb.append("null");
    } else {
      sb.append(this.kinds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("kindsWith:");
    sb.append(this.kindsWith);
    first = false;
    if (!first) sb.append(", ");
    sb.append("splitDate:");
    sb.append(this.splitDate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("unreadOnly:");
    sb.append(this.unreadOnly);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

