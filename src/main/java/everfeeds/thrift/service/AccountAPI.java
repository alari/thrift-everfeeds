/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package everfeeds.thrift.service;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class AccountAPI {

  public interface Iface extends ApplicationAPI.Iface {

    public everfeeds.thrift.domain.Account getAccount(String token) throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, org.apache.thrift.TException;

    public List<everfeeds.thrift.domain.Access> getAccesses(String token) throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, org.apache.thrift.TException;

    public everfeeds.thrift.domain.Access saveAccessToken(String token, everfeeds.thrift.domain.Access access, String accessToken, String accessSecret, List<String> accessParams) throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, org.apache.thrift.TException;

    public everfeeds.thrift.domain.Access saveAccess(String token, everfeeds.thrift.domain.Access access) throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, org.apache.thrift.TException;

    public everfeeds.thrift.domain.Account saveAccount(String token, everfeeds.thrift.domain.Account account) throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, org.apache.thrift.TException;

  }

  public interface AsyncIface extends ApplicationAPI .AsyncIface {

    public void getAccount(String token, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getAccount_call> resultHandler) throws org.apache.thrift.TException;

    public void getAccesses(String token, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getAccesses_call> resultHandler) throws org.apache.thrift.TException;

    public void saveAccessToken(String token, everfeeds.thrift.domain.Access access, String accessToken, String accessSecret, List<String> accessParams, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.saveAccessToken_call> resultHandler) throws org.apache.thrift.TException;

    public void saveAccess(String token, everfeeds.thrift.domain.Access access, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.saveAccess_call> resultHandler) throws org.apache.thrift.TException;

    public void saveAccount(String token, everfeeds.thrift.domain.Account account, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.saveAccount_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends ApplicationAPI.Client implements org.apache.thrift.TServiceClient, Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      this(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot)
    {
      super(iprot, oprot);
    }

    public everfeeds.thrift.domain.Account getAccount(String token) throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, org.apache.thrift.TException
    {
      send_getAccount(token);
      return recv_getAccount();
    }

    public void send_getAccount(String token) throws org.apache.thrift.TException
    {
      oprot_.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAccount", org.apache.thrift.protocol.TMessageType.CALL, ++seqid_));
      getAccount_args args = new getAccount_args();
      args.setToken(token);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public everfeeds.thrift.domain.Account recv_getAccount() throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot_.readMessageBegin();
      if (msg.type == org.apache.thrift.protocol.TMessageType.EXCEPTION) {
        org.apache.thrift.TApplicationException x = org.apache.thrift.TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.BAD_SEQUENCE_ID, "getAccount failed: out of sequence response");
      }
      getAccount_result result = new getAccount_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.eF != null) {
        throw result.eF;
      }
      if (result.eE != null) {
        throw result.eE;
      }
      if (result.eTNF != null) {
        throw result.eTNF;
      }
      if (result.eNF != null) {
        throw result.eNF;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAccount failed: unknown result");
    }

    public List<everfeeds.thrift.domain.Access> getAccesses(String token) throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, org.apache.thrift.TException
    {
      send_getAccesses(token);
      return recv_getAccesses();
    }

    public void send_getAccesses(String token) throws org.apache.thrift.TException
    {
      oprot_.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAccesses", org.apache.thrift.protocol.TMessageType.CALL, ++seqid_));
      getAccesses_args args = new getAccesses_args();
      args.setToken(token);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public List<everfeeds.thrift.domain.Access> recv_getAccesses() throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot_.readMessageBegin();
      if (msg.type == org.apache.thrift.protocol.TMessageType.EXCEPTION) {
        org.apache.thrift.TApplicationException x = org.apache.thrift.TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.BAD_SEQUENCE_ID, "getAccesses failed: out of sequence response");
      }
      getAccesses_result result = new getAccesses_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.eF != null) {
        throw result.eF;
      }
      if (result.eE != null) {
        throw result.eE;
      }
      if (result.eTNF != null) {
        throw result.eTNF;
      }
      if (result.eNF != null) {
        throw result.eNF;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAccesses failed: unknown result");
    }

    public everfeeds.thrift.domain.Access saveAccessToken(String token, everfeeds.thrift.domain.Access access, String accessToken, String accessSecret, List<String> accessParams) throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, org.apache.thrift.TException
    {
      send_saveAccessToken(token, access, accessToken, accessSecret, accessParams);
      return recv_saveAccessToken();
    }

    public void send_saveAccessToken(String token, everfeeds.thrift.domain.Access access, String accessToken, String accessSecret, List<String> accessParams) throws org.apache.thrift.TException
    {
      oprot_.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveAccessToken", org.apache.thrift.protocol.TMessageType.CALL, ++seqid_));
      saveAccessToken_args args = new saveAccessToken_args();
      args.setToken(token);
      args.setAccess(access);
      args.setAccessToken(accessToken);
      args.setAccessSecret(accessSecret);
      args.setAccessParams(accessParams);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public everfeeds.thrift.domain.Access recv_saveAccessToken() throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot_.readMessageBegin();
      if (msg.type == org.apache.thrift.protocol.TMessageType.EXCEPTION) {
        org.apache.thrift.TApplicationException x = org.apache.thrift.TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.BAD_SEQUENCE_ID, "saveAccessToken failed: out of sequence response");
      }
      saveAccessToken_result result = new saveAccessToken_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.eF != null) {
        throw result.eF;
      }
      if (result.eE != null) {
        throw result.eE;
      }
      if (result.eTNF != null) {
        throw result.eTNF;
      }
      if (result.eNF != null) {
        throw result.eNF;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "saveAccessToken failed: unknown result");
    }

    public everfeeds.thrift.domain.Access saveAccess(String token, everfeeds.thrift.domain.Access access) throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, org.apache.thrift.TException
    {
      send_saveAccess(token, access);
      return recv_saveAccess();
    }

    public void send_saveAccess(String token, everfeeds.thrift.domain.Access access) throws org.apache.thrift.TException
    {
      oprot_.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveAccess", org.apache.thrift.protocol.TMessageType.CALL, ++seqid_));
      saveAccess_args args = new saveAccess_args();
      args.setToken(token);
      args.setAccess(access);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public everfeeds.thrift.domain.Access recv_saveAccess() throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot_.readMessageBegin();
      if (msg.type == org.apache.thrift.protocol.TMessageType.EXCEPTION) {
        org.apache.thrift.TApplicationException x = org.apache.thrift.TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.BAD_SEQUENCE_ID, "saveAccess failed: out of sequence response");
      }
      saveAccess_result result = new saveAccess_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.eF != null) {
        throw result.eF;
      }
      if (result.eE != null) {
        throw result.eE;
      }
      if (result.eTNF != null) {
        throw result.eTNF;
      }
      if (result.eNF != null) {
        throw result.eNF;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "saveAccess failed: unknown result");
    }

    public everfeeds.thrift.domain.Account saveAccount(String token, everfeeds.thrift.domain.Account account) throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, org.apache.thrift.TException
    {
      send_saveAccount(token, account);
      return recv_saveAccount();
    }

    public void send_saveAccount(String token, everfeeds.thrift.domain.Account account) throws org.apache.thrift.TException
    {
      oprot_.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveAccount", org.apache.thrift.protocol.TMessageType.CALL, ++seqid_));
      saveAccount_args args = new saveAccount_args();
      args.setToken(token);
      args.setAccount(account);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public everfeeds.thrift.domain.Account recv_saveAccount() throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot_.readMessageBegin();
      if (msg.type == org.apache.thrift.protocol.TMessageType.EXCEPTION) {
        org.apache.thrift.TApplicationException x = org.apache.thrift.TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.BAD_SEQUENCE_ID, "saveAccount failed: out of sequence response");
      }
      saveAccount_result result = new saveAccount_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.eF != null) {
        throw result.eF;
      }
      if (result.eE != null) {
        throw result.eE;
      }
      if (result.eTNF != null) {
        throw result.eTNF;
      }
      if (result.eNF != null) {
        throw result.eNF;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "saveAccount failed: unknown result");
    }

  }
  public static class AsyncClient extends ApplicationAPI.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getAccount(String token, org.apache.thrift.async.AsyncMethodCallback<getAccount_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAccount_call method_call = new getAccount_call(token, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class getAccount_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String token;
      public getAccount_call(String token, org.apache.thrift.async.AsyncMethodCallback<getAccount_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAccount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAccount_args args = new getAccount_args();
        args.setToken(token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public everfeeds.thrift.domain.Account getResult() throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAccount();
      }
    }

    public void getAccesses(String token, org.apache.thrift.async.AsyncMethodCallback<getAccesses_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAccesses_call method_call = new getAccesses_call(token, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class getAccesses_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String token;
      public getAccesses_call(String token, org.apache.thrift.async.AsyncMethodCallback<getAccesses_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAccesses", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAccesses_args args = new getAccesses_args();
        args.setToken(token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<everfeeds.thrift.domain.Access> getResult() throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAccesses();
      }
    }

    public void saveAccessToken(String token, everfeeds.thrift.domain.Access access, String accessToken, String accessSecret, List<String> accessParams, org.apache.thrift.async.AsyncMethodCallback<saveAccessToken_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saveAccessToken_call method_call = new saveAccessToken_call(token, access, accessToken, accessSecret, accessParams, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class saveAccessToken_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String token;
      private everfeeds.thrift.domain.Access access;
      private String accessToken;
      private String accessSecret;
      private List<String> accessParams;
      public saveAccessToken_call(String token, everfeeds.thrift.domain.Access access, String accessToken, String accessSecret, List<String> accessParams, org.apache.thrift.async.AsyncMethodCallback<saveAccessToken_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this.access = access;
        this.accessToken = accessToken;
        this.accessSecret = accessSecret;
        this.accessParams = accessParams;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveAccessToken", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saveAccessToken_args args = new saveAccessToken_args();
        args.setToken(token);
        args.setAccess(access);
        args.setAccessToken(accessToken);
        args.setAccessSecret(accessSecret);
        args.setAccessParams(accessParams);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public everfeeds.thrift.domain.Access getResult() throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_saveAccessToken();
      }
    }

    public void saveAccess(String token, everfeeds.thrift.domain.Access access, org.apache.thrift.async.AsyncMethodCallback<saveAccess_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saveAccess_call method_call = new saveAccess_call(token, access, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class saveAccess_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String token;
      private everfeeds.thrift.domain.Access access;
      public saveAccess_call(String token, everfeeds.thrift.domain.Access access, org.apache.thrift.async.AsyncMethodCallback<saveAccess_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this.access = access;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveAccess", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saveAccess_args args = new saveAccess_args();
        args.setToken(token);
        args.setAccess(access);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public everfeeds.thrift.domain.Access getResult() throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_saveAccess();
      }
    }

    public void saveAccount(String token, everfeeds.thrift.domain.Account account, org.apache.thrift.async.AsyncMethodCallback<saveAccount_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saveAccount_call method_call = new saveAccount_call(token, account, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class saveAccount_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String token;
      private everfeeds.thrift.domain.Account account;
      public saveAccount_call(String token, everfeeds.thrift.domain.Account account, org.apache.thrift.async.AsyncMethodCallback<saveAccount_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this.account = account;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveAccount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saveAccount_args args = new saveAccount_args();
        args.setToken(token);
        args.setAccount(account);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public everfeeds.thrift.domain.Account getResult() throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_saveAccount();
      }
    }

  }

  public static class Processor extends ApplicationAPI.Processor implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(Iface iface)
    {
      super(iface);
      iface_ = iface;
      processMap_.put("getAccount", new getAccount());
      processMap_.put("getAccesses", new getAccesses());
      processMap_.put("saveAccessToken", new saveAccessToken());
      processMap_.put("saveAccess", new saveAccess());
      processMap_.put("saveAccount", new saveAccount());
    }

    private Iface iface_;

    public boolean process(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot.readMessageBegin();
      ProcessFunction fn = processMap_.get(msg.name);
      if (fn == null) {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, org.apache.thrift.protocol.TType.STRUCT);
        iprot.readMessageEnd();
        org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.UNKNOWN_METHOD, "Invalid method name: '"+msg.name+"'");
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(msg.name, org.apache.thrift.protocol.TMessageType.EXCEPTION, msg.seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return true;
      }
      fn.process(msg.seqid, iprot, oprot);
      return true;
    }

    private class getAccount implements ProcessFunction {
      public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        getAccount_args args = new getAccount_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAccount", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getAccount_result result = new getAccount_result();
        try {
          result.success = iface_.getAccount(args.token);
        } catch (everfeeds.thrift.error.Forbidden eF) {
          result.eF = eF;
        } catch (everfeeds.thrift.error.TokenExpired eE) {
          result.eE = eE;
        } catch (everfeeds.thrift.error.TokenNotFound eTNF) {
          result.eTNF = eTNF;
        } catch (everfeeds.thrift.error.NotFound eNF) {
          result.eNF = eNF;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing getAccount", th);
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, "Internal error processing getAccount");
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAccount", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAccount", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getAccesses implements ProcessFunction {
      public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        getAccesses_args args = new getAccesses_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAccesses", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getAccesses_result result = new getAccesses_result();
        try {
          result.success = iface_.getAccesses(args.token);
        } catch (everfeeds.thrift.error.Forbidden eF) {
          result.eF = eF;
        } catch (everfeeds.thrift.error.TokenExpired eE) {
          result.eE = eE;
        } catch (everfeeds.thrift.error.TokenNotFound eTNF) {
          result.eTNF = eTNF;
        } catch (everfeeds.thrift.error.NotFound eNF) {
          result.eNF = eNF;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing getAccesses", th);
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, "Internal error processing getAccesses");
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAccesses", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAccesses", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class saveAccessToken implements ProcessFunction {
      public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        saveAccessToken_args args = new saveAccessToken_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveAccessToken", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        saveAccessToken_result result = new saveAccessToken_result();
        try {
          result.success = iface_.saveAccessToken(args.token, args.access, args.accessToken, args.accessSecret, args.accessParams);
        } catch (everfeeds.thrift.error.Forbidden eF) {
          result.eF = eF;
        } catch (everfeeds.thrift.error.TokenExpired eE) {
          result.eE = eE;
        } catch (everfeeds.thrift.error.TokenNotFound eTNF) {
          result.eTNF = eTNF;
        } catch (everfeeds.thrift.error.NotFound eNF) {
          result.eNF = eNF;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing saveAccessToken", th);
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, "Internal error processing saveAccessToken");
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveAccessToken", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveAccessToken", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class saveAccess implements ProcessFunction {
      public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        saveAccess_args args = new saveAccess_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveAccess", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        saveAccess_result result = new saveAccess_result();
        try {
          result.success = iface_.saveAccess(args.token, args.access);
        } catch (everfeeds.thrift.error.Forbidden eF) {
          result.eF = eF;
        } catch (everfeeds.thrift.error.TokenExpired eE) {
          result.eE = eE;
        } catch (everfeeds.thrift.error.TokenNotFound eTNF) {
          result.eTNF = eTNF;
        } catch (everfeeds.thrift.error.NotFound eNF) {
          result.eNF = eNF;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing saveAccess", th);
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, "Internal error processing saveAccess");
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveAccess", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveAccess", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class saveAccount implements ProcessFunction {
      public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        saveAccount_args args = new saveAccount_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveAccount", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        saveAccount_result result = new saveAccount_result();
        try {
          result.success = iface_.saveAccount(args.token, args.account);
        } catch (everfeeds.thrift.error.Forbidden eF) {
          result.eF = eF;
        } catch (everfeeds.thrift.error.TokenExpired eE) {
          result.eE = eE;
        } catch (everfeeds.thrift.error.TokenNotFound eTNF) {
          result.eTNF = eTNF;
        } catch (everfeeds.thrift.error.NotFound eNF) {
          result.eNF = eNF;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing saveAccount", th);
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, "Internal error processing saveAccount");
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveAccount", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveAccount", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

  }

  public static class getAccount_args implements org.apache.thrift.TBase<getAccount_args, getAccount_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAccount_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)1);

    public String token;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "String")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAccount_args.class, metaDataMap);
    }

    public getAccount_args() {
    }

    public getAccount_args(
      String token)
    {
      this();
      this.token = token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAccount_args(getAccount_args other) {
      if (other.isSetToken()) {
        this.token = other.token;
      }
    }

    public getAccount_args deepCopy() {
      return new getAccount_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
    }

    public String getToken() {
      return this.token;
    }

    public getAccount_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAccount_args)
        return this.equals((getAccount_args)that);
      return false;
    }

    public boolean equals(getAccount_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getAccount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getAccount_args typedOther = (getAccount_args)other;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(typedOther.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, typedOther.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // TOKEN
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.token = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.token != null) {
        oprot.writeFieldBegin(TOKEN_FIELD_DESC);
        oprot.writeString(this.token);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAccount_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getAccount_result implements org.apache.thrift.TBase<getAccount_result, getAccount_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAccount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_F_FIELD_DESC = new org.apache.thrift.protocol.TField("eF", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField E_E_FIELD_DESC = new org.apache.thrift.protocol.TField("eE", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField E_TNF_FIELD_DESC = new org.apache.thrift.protocol.TField("eTNF", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField E_NF_FIELD_DESC = new org.apache.thrift.protocol.TField("eNF", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    public everfeeds.thrift.domain.Account success;
    public everfeeds.thrift.error.Forbidden eF;
    public everfeeds.thrift.error.TokenExpired eE;
    public everfeeds.thrift.error.TokenNotFound eTNF;
    public everfeeds.thrift.error.NotFound eNF;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E_F((short)1, "eF"),
      E_E((short)2, "eE"),
      E_TNF((short)3, "eTNF"),
      E_NF((short)4, "eNF");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E_F
            return E_F;
          case 2: // E_E
            return E_E;
          case 3: // E_TNF
            return E_TNF;
          case 4: // E_NF
            return E_NF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, everfeeds.thrift.domain.Account.class)));
      tmpMap.put(_Fields.E_F, new org.apache.thrift.meta_data.FieldMetaData("eF", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_E, new org.apache.thrift.meta_data.FieldMetaData("eE", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_TNF, new org.apache.thrift.meta_data.FieldMetaData("eTNF", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_NF, new org.apache.thrift.meta_data.FieldMetaData("eNF", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAccount_result.class, metaDataMap);
    }

    public getAccount_result() {
    }

    public getAccount_result(
      everfeeds.thrift.domain.Account success,
      everfeeds.thrift.error.Forbidden eF,
      everfeeds.thrift.error.TokenExpired eE,
      everfeeds.thrift.error.TokenNotFound eTNF,
      everfeeds.thrift.error.NotFound eNF)
    {
      this();
      this.success = success;
      this.eF = eF;
      this.eE = eE;
      this.eTNF = eTNF;
      this.eNF = eNF;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAccount_result(getAccount_result other) {
      if (other.isSetSuccess()) {
        this.success = new everfeeds.thrift.domain.Account(other.success);
      }
      if (other.isSetEF()) {
        this.eF = new everfeeds.thrift.error.Forbidden(other.eF);
      }
      if (other.isSetEE()) {
        this.eE = new everfeeds.thrift.error.TokenExpired(other.eE);
      }
      if (other.isSetETNF()) {
        this.eTNF = new everfeeds.thrift.error.TokenNotFound(other.eTNF);
      }
      if (other.isSetENF()) {
        this.eNF = new everfeeds.thrift.error.NotFound(other.eNF);
      }
    }

    public getAccount_result deepCopy() {
      return new getAccount_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.eF = null;
      this.eE = null;
      this.eTNF = null;
      this.eNF = null;
    }

    public everfeeds.thrift.domain.Account getSuccess() {
      return this.success;
    }

    public getAccount_result setSuccess(everfeeds.thrift.domain.Account success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public everfeeds.thrift.error.Forbidden getEF() {
      return this.eF;
    }

    public getAccount_result setEF(everfeeds.thrift.error.Forbidden eF) {
      this.eF = eF;
      return this;
    }

    public void unsetEF() {
      this.eF = null;
    }

    /** Returns true if field eF is set (has been assigned a value) and false otherwise */
    public boolean isSetEF() {
      return this.eF != null;
    }

    public void setEFIsSet(boolean value) {
      if (!value) {
        this.eF = null;
      }
    }

    public everfeeds.thrift.error.TokenExpired getEE() {
      return this.eE;
    }

    public getAccount_result setEE(everfeeds.thrift.error.TokenExpired eE) {
      this.eE = eE;
      return this;
    }

    public void unsetEE() {
      this.eE = null;
    }

    /** Returns true if field eE is set (has been assigned a value) and false otherwise */
    public boolean isSetEE() {
      return this.eE != null;
    }

    public void setEEIsSet(boolean value) {
      if (!value) {
        this.eE = null;
      }
    }

    public everfeeds.thrift.error.TokenNotFound getETNF() {
      return this.eTNF;
    }

    public getAccount_result setETNF(everfeeds.thrift.error.TokenNotFound eTNF) {
      this.eTNF = eTNF;
      return this;
    }

    public void unsetETNF() {
      this.eTNF = null;
    }

    /** Returns true if field eTNF is set (has been assigned a value) and false otherwise */
    public boolean isSetETNF() {
      return this.eTNF != null;
    }

    public void setETNFIsSet(boolean value) {
      if (!value) {
        this.eTNF = null;
      }
    }

    public everfeeds.thrift.error.NotFound getENF() {
      return this.eNF;
    }

    public getAccount_result setENF(everfeeds.thrift.error.NotFound eNF) {
      this.eNF = eNF;
      return this;
    }

    public void unsetENF() {
      this.eNF = null;
    }

    /** Returns true if field eNF is set (has been assigned a value) and false otherwise */
    public boolean isSetENF() {
      return this.eNF != null;
    }

    public void setENFIsSet(boolean value) {
      if (!value) {
        this.eNF = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((everfeeds.thrift.domain.Account)value);
        }
        break;

      case E_F:
        if (value == null) {
          unsetEF();
        } else {
          setEF((everfeeds.thrift.error.Forbidden)value);
        }
        break;

      case E_E:
        if (value == null) {
          unsetEE();
        } else {
          setEE((everfeeds.thrift.error.TokenExpired)value);
        }
        break;

      case E_TNF:
        if (value == null) {
          unsetETNF();
        } else {
          setETNF((everfeeds.thrift.error.TokenNotFound)value);
        }
        break;

      case E_NF:
        if (value == null) {
          unsetENF();
        } else {
          setENF((everfeeds.thrift.error.NotFound)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E_F:
        return getEF();

      case E_E:
        return getEE();

      case E_TNF:
        return getETNF();

      case E_NF:
        return getENF();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E_F:
        return isSetEF();
      case E_E:
        return isSetEE();
      case E_TNF:
        return isSetETNF();
      case E_NF:
        return isSetENF();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAccount_result)
        return this.equals((getAccount_result)that);
      return false;
    }

    public boolean equals(getAccount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_eF = true && this.isSetEF();
      boolean that_present_eF = true && that.isSetEF();
      if (this_present_eF || that_present_eF) {
        if (!(this_present_eF && that_present_eF))
          return false;
        if (!this.eF.equals(that.eF))
          return false;
      }

      boolean this_present_eE = true && this.isSetEE();
      boolean that_present_eE = true && that.isSetEE();
      if (this_present_eE || that_present_eE) {
        if (!(this_present_eE && that_present_eE))
          return false;
        if (!this.eE.equals(that.eE))
          return false;
      }

      boolean this_present_eTNF = true && this.isSetETNF();
      boolean that_present_eTNF = true && that.isSetETNF();
      if (this_present_eTNF || that_present_eTNF) {
        if (!(this_present_eTNF && that_present_eTNF))
          return false;
        if (!this.eTNF.equals(that.eTNF))
          return false;
      }

      boolean this_present_eNF = true && this.isSetENF();
      boolean that_present_eNF = true && that.isSetENF();
      if (this_present_eNF || that_present_eNF) {
        if (!(this_present_eNF && that_present_eNF))
          return false;
        if (!this.eNF.equals(that.eNF))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getAccount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getAccount_result typedOther = (getAccount_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEF()).compareTo(typedOther.isSetEF());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEF()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eF, typedOther.eF);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEE()).compareTo(typedOther.isSetEE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eE, typedOther.eE);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetETNF()).compareTo(typedOther.isSetETNF());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetETNF()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eTNF, typedOther.eTNF);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetENF()).compareTo(typedOther.isSetENF());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetENF()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eNF, typedOther.eNF);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.success = new everfeeds.thrift.domain.Account();
              this.success.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E_F
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eF = new everfeeds.thrift.error.Forbidden();
              this.eF.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // E_E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eE = new everfeeds.thrift.error.TokenExpired();
              this.eE.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // E_TNF
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eTNF = new everfeeds.thrift.error.TokenNotFound();
              this.eTNF.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // E_NF
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eNF = new everfeeds.thrift.error.NotFound();
              this.eNF.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetEF()) {
        oprot.writeFieldBegin(E_F_FIELD_DESC);
        this.eF.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetEE()) {
        oprot.writeFieldBegin(E_E_FIELD_DESC);
        this.eE.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetETNF()) {
        oprot.writeFieldBegin(E_TNF_FIELD_DESC);
        this.eTNF.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetENF()) {
        oprot.writeFieldBegin(E_NF_FIELD_DESC);
        this.eNF.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAccount_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eF:");
      if (this.eF == null) {
        sb.append("null");
      } else {
        sb.append(this.eF);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eE:");
      if (this.eE == null) {
        sb.append("null");
      } else {
        sb.append(this.eE);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eTNF:");
      if (this.eTNF == null) {
        sb.append("null");
      } else {
        sb.append(this.eTNF);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eNF:");
      if (this.eNF == null) {
        sb.append("null");
      } else {
        sb.append(this.eNF);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getAccesses_args implements org.apache.thrift.TBase<getAccesses_args, getAccesses_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAccesses_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)1);

    public String token;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "String")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAccesses_args.class, metaDataMap);
    }

    public getAccesses_args() {
    }

    public getAccesses_args(
      String token)
    {
      this();
      this.token = token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAccesses_args(getAccesses_args other) {
      if (other.isSetToken()) {
        this.token = other.token;
      }
    }

    public getAccesses_args deepCopy() {
      return new getAccesses_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
    }

    public String getToken() {
      return this.token;
    }

    public getAccesses_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAccesses_args)
        return this.equals((getAccesses_args)that);
      return false;
    }

    public boolean equals(getAccesses_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getAccesses_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getAccesses_args typedOther = (getAccesses_args)other;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(typedOther.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, typedOther.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // TOKEN
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.token = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.token != null) {
        oprot.writeFieldBegin(TOKEN_FIELD_DESC);
        oprot.writeString(this.token);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAccesses_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getAccesses_result implements org.apache.thrift.TBase<getAccesses_result, getAccesses_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAccesses_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_F_FIELD_DESC = new org.apache.thrift.protocol.TField("eF", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField E_E_FIELD_DESC = new org.apache.thrift.protocol.TField("eE", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField E_TNF_FIELD_DESC = new org.apache.thrift.protocol.TField("eTNF", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField E_NF_FIELD_DESC = new org.apache.thrift.protocol.TField("eNF", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    public List<everfeeds.thrift.domain.Access> success;
    public everfeeds.thrift.error.Forbidden eF;
    public everfeeds.thrift.error.TokenExpired eE;
    public everfeeds.thrift.error.TokenNotFound eTNF;
    public everfeeds.thrift.error.NotFound eNF;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E_F((short)1, "eF"),
      E_E((short)2, "eE"),
      E_TNF((short)3, "eTNF"),
      E_NF((short)4, "eNF");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E_F
            return E_F;
          case 2: // E_E
            return E_E;
          case 3: // E_TNF
            return E_TNF;
          case 4: // E_NF
            return E_NF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, everfeeds.thrift.domain.Access.class))));
      tmpMap.put(_Fields.E_F, new org.apache.thrift.meta_data.FieldMetaData("eF", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_E, new org.apache.thrift.meta_data.FieldMetaData("eE", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_TNF, new org.apache.thrift.meta_data.FieldMetaData("eTNF", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_NF, new org.apache.thrift.meta_data.FieldMetaData("eNF", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAccesses_result.class, metaDataMap);
    }

    public getAccesses_result() {
    }

    public getAccesses_result(
      List<everfeeds.thrift.domain.Access> success,
      everfeeds.thrift.error.Forbidden eF,
      everfeeds.thrift.error.TokenExpired eE,
      everfeeds.thrift.error.TokenNotFound eTNF,
      everfeeds.thrift.error.NotFound eNF)
    {
      this();
      this.success = success;
      this.eF = eF;
      this.eE = eE;
      this.eTNF = eTNF;
      this.eNF = eNF;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAccesses_result(getAccesses_result other) {
      if (other.isSetSuccess()) {
        List<everfeeds.thrift.domain.Access> __this__success = new ArrayList<everfeeds.thrift.domain.Access>();
        for (everfeeds.thrift.domain.Access other_element : other.success) {
          __this__success.add(new everfeeds.thrift.domain.Access(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetEF()) {
        this.eF = new everfeeds.thrift.error.Forbidden(other.eF);
      }
      if (other.isSetEE()) {
        this.eE = new everfeeds.thrift.error.TokenExpired(other.eE);
      }
      if (other.isSetETNF()) {
        this.eTNF = new everfeeds.thrift.error.TokenNotFound(other.eTNF);
      }
      if (other.isSetENF()) {
        this.eNF = new everfeeds.thrift.error.NotFound(other.eNF);
      }
    }

    public getAccesses_result deepCopy() {
      return new getAccesses_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.eF = null;
      this.eE = null;
      this.eTNF = null;
      this.eNF = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<everfeeds.thrift.domain.Access> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(everfeeds.thrift.domain.Access elem) {
      if (this.success == null) {
        this.success = new ArrayList<everfeeds.thrift.domain.Access>();
      }
      this.success.add(elem);
    }

    public List<everfeeds.thrift.domain.Access> getSuccess() {
      return this.success;
    }

    public getAccesses_result setSuccess(List<everfeeds.thrift.domain.Access> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public everfeeds.thrift.error.Forbidden getEF() {
      return this.eF;
    }

    public getAccesses_result setEF(everfeeds.thrift.error.Forbidden eF) {
      this.eF = eF;
      return this;
    }

    public void unsetEF() {
      this.eF = null;
    }

    /** Returns true if field eF is set (has been assigned a value) and false otherwise */
    public boolean isSetEF() {
      return this.eF != null;
    }

    public void setEFIsSet(boolean value) {
      if (!value) {
        this.eF = null;
      }
    }

    public everfeeds.thrift.error.TokenExpired getEE() {
      return this.eE;
    }

    public getAccesses_result setEE(everfeeds.thrift.error.TokenExpired eE) {
      this.eE = eE;
      return this;
    }

    public void unsetEE() {
      this.eE = null;
    }

    /** Returns true if field eE is set (has been assigned a value) and false otherwise */
    public boolean isSetEE() {
      return this.eE != null;
    }

    public void setEEIsSet(boolean value) {
      if (!value) {
        this.eE = null;
      }
    }

    public everfeeds.thrift.error.TokenNotFound getETNF() {
      return this.eTNF;
    }

    public getAccesses_result setETNF(everfeeds.thrift.error.TokenNotFound eTNF) {
      this.eTNF = eTNF;
      return this;
    }

    public void unsetETNF() {
      this.eTNF = null;
    }

    /** Returns true if field eTNF is set (has been assigned a value) and false otherwise */
    public boolean isSetETNF() {
      return this.eTNF != null;
    }

    public void setETNFIsSet(boolean value) {
      if (!value) {
        this.eTNF = null;
      }
    }

    public everfeeds.thrift.error.NotFound getENF() {
      return this.eNF;
    }

    public getAccesses_result setENF(everfeeds.thrift.error.NotFound eNF) {
      this.eNF = eNF;
      return this;
    }

    public void unsetENF() {
      this.eNF = null;
    }

    /** Returns true if field eNF is set (has been assigned a value) and false otherwise */
    public boolean isSetENF() {
      return this.eNF != null;
    }

    public void setENFIsSet(boolean value) {
      if (!value) {
        this.eNF = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<everfeeds.thrift.domain.Access>)value);
        }
        break;

      case E_F:
        if (value == null) {
          unsetEF();
        } else {
          setEF((everfeeds.thrift.error.Forbidden)value);
        }
        break;

      case E_E:
        if (value == null) {
          unsetEE();
        } else {
          setEE((everfeeds.thrift.error.TokenExpired)value);
        }
        break;

      case E_TNF:
        if (value == null) {
          unsetETNF();
        } else {
          setETNF((everfeeds.thrift.error.TokenNotFound)value);
        }
        break;

      case E_NF:
        if (value == null) {
          unsetENF();
        } else {
          setENF((everfeeds.thrift.error.NotFound)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E_F:
        return getEF();

      case E_E:
        return getEE();

      case E_TNF:
        return getETNF();

      case E_NF:
        return getENF();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E_F:
        return isSetEF();
      case E_E:
        return isSetEE();
      case E_TNF:
        return isSetETNF();
      case E_NF:
        return isSetENF();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAccesses_result)
        return this.equals((getAccesses_result)that);
      return false;
    }

    public boolean equals(getAccesses_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_eF = true && this.isSetEF();
      boolean that_present_eF = true && that.isSetEF();
      if (this_present_eF || that_present_eF) {
        if (!(this_present_eF && that_present_eF))
          return false;
        if (!this.eF.equals(that.eF))
          return false;
      }

      boolean this_present_eE = true && this.isSetEE();
      boolean that_present_eE = true && that.isSetEE();
      if (this_present_eE || that_present_eE) {
        if (!(this_present_eE && that_present_eE))
          return false;
        if (!this.eE.equals(that.eE))
          return false;
      }

      boolean this_present_eTNF = true && this.isSetETNF();
      boolean that_present_eTNF = true && that.isSetETNF();
      if (this_present_eTNF || that_present_eTNF) {
        if (!(this_present_eTNF && that_present_eTNF))
          return false;
        if (!this.eTNF.equals(that.eTNF))
          return false;
      }

      boolean this_present_eNF = true && this.isSetENF();
      boolean that_present_eNF = true && that.isSetENF();
      if (this_present_eNF || that_present_eNF) {
        if (!(this_present_eNF && that_present_eNF))
          return false;
        if (!this.eNF.equals(that.eNF))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getAccesses_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getAccesses_result typedOther = (getAccesses_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEF()).compareTo(typedOther.isSetEF());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEF()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eF, typedOther.eF);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEE()).compareTo(typedOther.isSetEE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eE, typedOther.eE);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetETNF()).compareTo(typedOther.isSetETNF());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetETNF()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eTNF, typedOther.eTNF);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetENF()).compareTo(typedOther.isSetENF());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetENF()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eNF, typedOther.eNF);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list12 = iprot.readListBegin();
                this.success = new ArrayList<everfeeds.thrift.domain.Access>(_list12.size);
                for (int _i13 = 0; _i13 < _list12.size; ++_i13)
                {
                  everfeeds.thrift.domain.Access _elem14;
                  _elem14 = new everfeeds.thrift.domain.Access();
                  _elem14.read(iprot);
                  this.success.add(_elem14);
                }
                iprot.readListEnd();
              }
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E_F
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eF = new everfeeds.thrift.error.Forbidden();
              this.eF.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // E_E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eE = new everfeeds.thrift.error.TokenExpired();
              this.eE.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // E_TNF
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eTNF = new everfeeds.thrift.error.TokenNotFound();
              this.eTNF.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // E_NF
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eNF = new everfeeds.thrift.error.NotFound();
              this.eNF.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, this.success.size()));
          for (everfeeds.thrift.domain.Access _iter15 : this.success)
          {
            _iter15.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetEF()) {
        oprot.writeFieldBegin(E_F_FIELD_DESC);
        this.eF.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetEE()) {
        oprot.writeFieldBegin(E_E_FIELD_DESC);
        this.eE.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetETNF()) {
        oprot.writeFieldBegin(E_TNF_FIELD_DESC);
        this.eTNF.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetENF()) {
        oprot.writeFieldBegin(E_NF_FIELD_DESC);
        this.eNF.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAccesses_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eF:");
      if (this.eF == null) {
        sb.append("null");
      } else {
        sb.append(this.eF);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eE:");
      if (this.eE == null) {
        sb.append("null");
      } else {
        sb.append(this.eE);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eTNF:");
      if (this.eTNF == null) {
        sb.append("null");
      } else {
        sb.append(this.eTNF);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eNF:");
      if (this.eNF == null) {
        sb.append("null");
      } else {
        sb.append(this.eNF);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class saveAccessToken_args implements org.apache.thrift.TBase<saveAccessToken_args, saveAccessToken_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveAccessToken_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ACCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("access", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ACCESS_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("accessToken", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField ACCESS_SECRET_FIELD_DESC = new org.apache.thrift.protocol.TField("accessSecret", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField ACCESS_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("accessParams", org.apache.thrift.protocol.TType.LIST, (short)5);

    public String token;
    public everfeeds.thrift.domain.Access access;
    public String accessToken;
    public String accessSecret;
    public List<String> accessParams;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token"),
      ACCESS((short)2, "access"),
      ACCESS_TOKEN((short)3, "accessToken"),
      ACCESS_SECRET((short)4, "accessSecret"),
      ACCESS_PARAMS((short)5, "accessParams");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 2: // ACCESS
            return ACCESS;
          case 3: // ACCESS_TOKEN
            return ACCESS_TOKEN;
          case 4: // ACCESS_SECRET
            return ACCESS_SECRET;
          case 5: // ACCESS_PARAMS
            return ACCESS_PARAMS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "String")));
      tmpMap.put(_Fields.ACCESS, new org.apache.thrift.meta_data.FieldMetaData("access", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, everfeeds.thrift.domain.Access.class)));
      tmpMap.put(_Fields.ACCESS_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("accessToken", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "String")));
      tmpMap.put(_Fields.ACCESS_SECRET, new org.apache.thrift.meta_data.FieldMetaData("accessSecret", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "String")));
      tmpMap.put(_Fields.ACCESS_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("accessParams", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveAccessToken_args.class, metaDataMap);
    }

    public saveAccessToken_args() {
    }

    public saveAccessToken_args(
      String token,
      everfeeds.thrift.domain.Access access,
      String accessToken,
      String accessSecret,
      List<String> accessParams)
    {
      this();
      this.token = token;
      this.access = access;
      this.accessToken = accessToken;
      this.accessSecret = accessSecret;
      this.accessParams = accessParams;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveAccessToken_args(saveAccessToken_args other) {
      if (other.isSetToken()) {
        this.token = other.token;
      }
      if (other.isSetAccess()) {
        this.access = new everfeeds.thrift.domain.Access(other.access);
      }
      if (other.isSetAccessToken()) {
        this.accessToken = other.accessToken;
      }
      if (other.isSetAccessSecret()) {
        this.accessSecret = other.accessSecret;
      }
      if (other.isSetAccessParams()) {
        List<String> __this__accessParams = new ArrayList<String>();
        for (String other_element : other.accessParams) {
          __this__accessParams.add(other_element);
        }
        this.accessParams = __this__accessParams;
      }
    }

    public saveAccessToken_args deepCopy() {
      return new saveAccessToken_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      this.access = null;
      this.accessToken = null;
      this.accessSecret = null;
      this.accessParams = null;
    }

    public String getToken() {
      return this.token;
    }

    public saveAccessToken_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public everfeeds.thrift.domain.Access getAccess() {
      return this.access;
    }

    public saveAccessToken_args setAccess(everfeeds.thrift.domain.Access access) {
      this.access = access;
      return this;
    }

    public void unsetAccess() {
      this.access = null;
    }

    /** Returns true if field access is set (has been assigned a value) and false otherwise */
    public boolean isSetAccess() {
      return this.access != null;
    }

    public void setAccessIsSet(boolean value) {
      if (!value) {
        this.access = null;
      }
    }

    public String getAccessToken() {
      return this.accessToken;
    }

    public saveAccessToken_args setAccessToken(String accessToken) {
      this.accessToken = accessToken;
      return this;
    }

    public void unsetAccessToken() {
      this.accessToken = null;
    }

    /** Returns true if field accessToken is set (has been assigned a value) and false otherwise */
    public boolean isSetAccessToken() {
      return this.accessToken != null;
    }

    public void setAccessTokenIsSet(boolean value) {
      if (!value) {
        this.accessToken = null;
      }
    }

    public String getAccessSecret() {
      return this.accessSecret;
    }

    public saveAccessToken_args setAccessSecret(String accessSecret) {
      this.accessSecret = accessSecret;
      return this;
    }

    public void unsetAccessSecret() {
      this.accessSecret = null;
    }

    /** Returns true if field accessSecret is set (has been assigned a value) and false otherwise */
    public boolean isSetAccessSecret() {
      return this.accessSecret != null;
    }

    public void setAccessSecretIsSet(boolean value) {
      if (!value) {
        this.accessSecret = null;
      }
    }

    public int getAccessParamsSize() {
      return (this.accessParams == null) ? 0 : this.accessParams.size();
    }

    public java.util.Iterator<String> getAccessParamsIterator() {
      return (this.accessParams == null) ? null : this.accessParams.iterator();
    }

    public void addToAccessParams(String elem) {
      if (this.accessParams == null) {
        this.accessParams = new ArrayList<String>();
      }
      this.accessParams.add(elem);
    }

    public List<String> getAccessParams() {
      return this.accessParams;
    }

    public saveAccessToken_args setAccessParams(List<String> accessParams) {
      this.accessParams = accessParams;
      return this;
    }

    public void unsetAccessParams() {
      this.accessParams = null;
    }

    /** Returns true if field accessParams is set (has been assigned a value) and false otherwise */
    public boolean isSetAccessParams() {
      return this.accessParams != null;
    }

    public void setAccessParamsIsSet(boolean value) {
      if (!value) {
        this.accessParams = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case ACCESS:
        if (value == null) {
          unsetAccess();
        } else {
          setAccess((everfeeds.thrift.domain.Access)value);
        }
        break;

      case ACCESS_TOKEN:
        if (value == null) {
          unsetAccessToken();
        } else {
          setAccessToken((String)value);
        }
        break;

      case ACCESS_SECRET:
        if (value == null) {
          unsetAccessSecret();
        } else {
          setAccessSecret((String)value);
        }
        break;

      case ACCESS_PARAMS:
        if (value == null) {
          unsetAccessParams();
        } else {
          setAccessParams((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case ACCESS:
        return getAccess();

      case ACCESS_TOKEN:
        return getAccessToken();

      case ACCESS_SECRET:
        return getAccessSecret();

      case ACCESS_PARAMS:
        return getAccessParams();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case ACCESS:
        return isSetAccess();
      case ACCESS_TOKEN:
        return isSetAccessToken();
      case ACCESS_SECRET:
        return isSetAccessSecret();
      case ACCESS_PARAMS:
        return isSetAccessParams();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveAccessToken_args)
        return this.equals((saveAccessToken_args)that);
      return false;
    }

    public boolean equals(saveAccessToken_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_access = true && this.isSetAccess();
      boolean that_present_access = true && that.isSetAccess();
      if (this_present_access || that_present_access) {
        if (!(this_present_access && that_present_access))
          return false;
        if (!this.access.equals(that.access))
          return false;
      }

      boolean this_present_accessToken = true && this.isSetAccessToken();
      boolean that_present_accessToken = true && that.isSetAccessToken();
      if (this_present_accessToken || that_present_accessToken) {
        if (!(this_present_accessToken && that_present_accessToken))
          return false;
        if (!this.accessToken.equals(that.accessToken))
          return false;
      }

      boolean this_present_accessSecret = true && this.isSetAccessSecret();
      boolean that_present_accessSecret = true && that.isSetAccessSecret();
      if (this_present_accessSecret || that_present_accessSecret) {
        if (!(this_present_accessSecret && that_present_accessSecret))
          return false;
        if (!this.accessSecret.equals(that.accessSecret))
          return false;
      }

      boolean this_present_accessParams = true && this.isSetAccessParams();
      boolean that_present_accessParams = true && that.isSetAccessParams();
      if (this_present_accessParams || that_present_accessParams) {
        if (!(this_present_accessParams && that_present_accessParams))
          return false;
        if (!this.accessParams.equals(that.accessParams))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(saveAccessToken_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      saveAccessToken_args typedOther = (saveAccessToken_args)other;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(typedOther.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, typedOther.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAccess()).compareTo(typedOther.isSetAccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.access, typedOther.access);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAccessToken()).compareTo(typedOther.isSetAccessToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccessToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accessToken, typedOther.accessToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAccessSecret()).compareTo(typedOther.isSetAccessSecret());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccessSecret()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accessSecret, typedOther.accessSecret);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAccessParams()).compareTo(typedOther.isSetAccessParams());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccessParams()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accessParams, typedOther.accessParams);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // TOKEN
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.token = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // ACCESS
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.access = new everfeeds.thrift.domain.Access();
              this.access.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // ACCESS_TOKEN
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.accessToken = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // ACCESS_SECRET
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.accessSecret = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // ACCESS_PARAMS
            if (field.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                this.accessParams = new ArrayList<String>(_list16.size);
                for (int _i17 = 0; _i17 < _list16.size; ++_i17)
                {
                  String _elem18;
                  _elem18 = iprot.readString();
                  this.accessParams.add(_elem18);
                }
                iprot.readListEnd();
              }
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.token != null) {
        oprot.writeFieldBegin(TOKEN_FIELD_DESC);
        oprot.writeString(this.token);
        oprot.writeFieldEnd();
      }
      if (this.access != null) {
        oprot.writeFieldBegin(ACCESS_FIELD_DESC);
        this.access.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.accessToken != null) {
        oprot.writeFieldBegin(ACCESS_TOKEN_FIELD_DESC);
        oprot.writeString(this.accessToken);
        oprot.writeFieldEnd();
      }
      if (this.accessSecret != null) {
        oprot.writeFieldBegin(ACCESS_SECRET_FIELD_DESC);
        oprot.writeString(this.accessSecret);
        oprot.writeFieldEnd();
      }
      if (this.accessParams != null) {
        oprot.writeFieldBegin(ACCESS_PARAMS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, this.accessParams.size()));
          for (String _iter19 : this.accessParams)
          {
            oprot.writeString(_iter19);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveAccessToken_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("access:");
      if (this.access == null) {
        sb.append("null");
      } else {
        sb.append(this.access);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("accessToken:");
      if (this.accessToken == null) {
        sb.append("null");
      } else {
        sb.append(this.accessToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("accessSecret:");
      if (this.accessSecret == null) {
        sb.append("null");
      } else {
        sb.append(this.accessSecret);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("accessParams:");
      if (this.accessParams == null) {
        sb.append("null");
      } else {
        sb.append(this.accessParams);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class saveAccessToken_result implements org.apache.thrift.TBase<saveAccessToken_result, saveAccessToken_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveAccessToken_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_F_FIELD_DESC = new org.apache.thrift.protocol.TField("eF", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField E_E_FIELD_DESC = new org.apache.thrift.protocol.TField("eE", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField E_TNF_FIELD_DESC = new org.apache.thrift.protocol.TField("eTNF", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField E_NF_FIELD_DESC = new org.apache.thrift.protocol.TField("eNF", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    public everfeeds.thrift.domain.Access success;
    public everfeeds.thrift.error.Forbidden eF;
    public everfeeds.thrift.error.TokenExpired eE;
    public everfeeds.thrift.error.TokenNotFound eTNF;
    public everfeeds.thrift.error.NotFound eNF;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E_F((short)1, "eF"),
      E_E((short)2, "eE"),
      E_TNF((short)3, "eTNF"),
      E_NF((short)4, "eNF");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E_F
            return E_F;
          case 2: // E_E
            return E_E;
          case 3: // E_TNF
            return E_TNF;
          case 4: // E_NF
            return E_NF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, everfeeds.thrift.domain.Access.class)));
      tmpMap.put(_Fields.E_F, new org.apache.thrift.meta_data.FieldMetaData("eF", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_E, new org.apache.thrift.meta_data.FieldMetaData("eE", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_TNF, new org.apache.thrift.meta_data.FieldMetaData("eTNF", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_NF, new org.apache.thrift.meta_data.FieldMetaData("eNF", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveAccessToken_result.class, metaDataMap);
    }

    public saveAccessToken_result() {
    }

    public saveAccessToken_result(
      everfeeds.thrift.domain.Access success,
      everfeeds.thrift.error.Forbidden eF,
      everfeeds.thrift.error.TokenExpired eE,
      everfeeds.thrift.error.TokenNotFound eTNF,
      everfeeds.thrift.error.NotFound eNF)
    {
      this();
      this.success = success;
      this.eF = eF;
      this.eE = eE;
      this.eTNF = eTNF;
      this.eNF = eNF;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveAccessToken_result(saveAccessToken_result other) {
      if (other.isSetSuccess()) {
        this.success = new everfeeds.thrift.domain.Access(other.success);
      }
      if (other.isSetEF()) {
        this.eF = new everfeeds.thrift.error.Forbidden(other.eF);
      }
      if (other.isSetEE()) {
        this.eE = new everfeeds.thrift.error.TokenExpired(other.eE);
      }
      if (other.isSetETNF()) {
        this.eTNF = new everfeeds.thrift.error.TokenNotFound(other.eTNF);
      }
      if (other.isSetENF()) {
        this.eNF = new everfeeds.thrift.error.NotFound(other.eNF);
      }
    }

    public saveAccessToken_result deepCopy() {
      return new saveAccessToken_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.eF = null;
      this.eE = null;
      this.eTNF = null;
      this.eNF = null;
    }

    public everfeeds.thrift.domain.Access getSuccess() {
      return this.success;
    }

    public saveAccessToken_result setSuccess(everfeeds.thrift.domain.Access success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public everfeeds.thrift.error.Forbidden getEF() {
      return this.eF;
    }

    public saveAccessToken_result setEF(everfeeds.thrift.error.Forbidden eF) {
      this.eF = eF;
      return this;
    }

    public void unsetEF() {
      this.eF = null;
    }

    /** Returns true if field eF is set (has been assigned a value) and false otherwise */
    public boolean isSetEF() {
      return this.eF != null;
    }

    public void setEFIsSet(boolean value) {
      if (!value) {
        this.eF = null;
      }
    }

    public everfeeds.thrift.error.TokenExpired getEE() {
      return this.eE;
    }

    public saveAccessToken_result setEE(everfeeds.thrift.error.TokenExpired eE) {
      this.eE = eE;
      return this;
    }

    public void unsetEE() {
      this.eE = null;
    }

    /** Returns true if field eE is set (has been assigned a value) and false otherwise */
    public boolean isSetEE() {
      return this.eE != null;
    }

    public void setEEIsSet(boolean value) {
      if (!value) {
        this.eE = null;
      }
    }

    public everfeeds.thrift.error.TokenNotFound getETNF() {
      return this.eTNF;
    }

    public saveAccessToken_result setETNF(everfeeds.thrift.error.TokenNotFound eTNF) {
      this.eTNF = eTNF;
      return this;
    }

    public void unsetETNF() {
      this.eTNF = null;
    }

    /** Returns true if field eTNF is set (has been assigned a value) and false otherwise */
    public boolean isSetETNF() {
      return this.eTNF != null;
    }

    public void setETNFIsSet(boolean value) {
      if (!value) {
        this.eTNF = null;
      }
    }

    public everfeeds.thrift.error.NotFound getENF() {
      return this.eNF;
    }

    public saveAccessToken_result setENF(everfeeds.thrift.error.NotFound eNF) {
      this.eNF = eNF;
      return this;
    }

    public void unsetENF() {
      this.eNF = null;
    }

    /** Returns true if field eNF is set (has been assigned a value) and false otherwise */
    public boolean isSetENF() {
      return this.eNF != null;
    }

    public void setENFIsSet(boolean value) {
      if (!value) {
        this.eNF = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((everfeeds.thrift.domain.Access)value);
        }
        break;

      case E_F:
        if (value == null) {
          unsetEF();
        } else {
          setEF((everfeeds.thrift.error.Forbidden)value);
        }
        break;

      case E_E:
        if (value == null) {
          unsetEE();
        } else {
          setEE((everfeeds.thrift.error.TokenExpired)value);
        }
        break;

      case E_TNF:
        if (value == null) {
          unsetETNF();
        } else {
          setETNF((everfeeds.thrift.error.TokenNotFound)value);
        }
        break;

      case E_NF:
        if (value == null) {
          unsetENF();
        } else {
          setENF((everfeeds.thrift.error.NotFound)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E_F:
        return getEF();

      case E_E:
        return getEE();

      case E_TNF:
        return getETNF();

      case E_NF:
        return getENF();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E_F:
        return isSetEF();
      case E_E:
        return isSetEE();
      case E_TNF:
        return isSetETNF();
      case E_NF:
        return isSetENF();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveAccessToken_result)
        return this.equals((saveAccessToken_result)that);
      return false;
    }

    public boolean equals(saveAccessToken_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_eF = true && this.isSetEF();
      boolean that_present_eF = true && that.isSetEF();
      if (this_present_eF || that_present_eF) {
        if (!(this_present_eF && that_present_eF))
          return false;
        if (!this.eF.equals(that.eF))
          return false;
      }

      boolean this_present_eE = true && this.isSetEE();
      boolean that_present_eE = true && that.isSetEE();
      if (this_present_eE || that_present_eE) {
        if (!(this_present_eE && that_present_eE))
          return false;
        if (!this.eE.equals(that.eE))
          return false;
      }

      boolean this_present_eTNF = true && this.isSetETNF();
      boolean that_present_eTNF = true && that.isSetETNF();
      if (this_present_eTNF || that_present_eTNF) {
        if (!(this_present_eTNF && that_present_eTNF))
          return false;
        if (!this.eTNF.equals(that.eTNF))
          return false;
      }

      boolean this_present_eNF = true && this.isSetENF();
      boolean that_present_eNF = true && that.isSetENF();
      if (this_present_eNF || that_present_eNF) {
        if (!(this_present_eNF && that_present_eNF))
          return false;
        if (!this.eNF.equals(that.eNF))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(saveAccessToken_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      saveAccessToken_result typedOther = (saveAccessToken_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEF()).compareTo(typedOther.isSetEF());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEF()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eF, typedOther.eF);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEE()).compareTo(typedOther.isSetEE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eE, typedOther.eE);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetETNF()).compareTo(typedOther.isSetETNF());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetETNF()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eTNF, typedOther.eTNF);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetENF()).compareTo(typedOther.isSetENF());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetENF()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eNF, typedOther.eNF);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.success = new everfeeds.thrift.domain.Access();
              this.success.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E_F
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eF = new everfeeds.thrift.error.Forbidden();
              this.eF.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // E_E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eE = new everfeeds.thrift.error.TokenExpired();
              this.eE.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // E_TNF
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eTNF = new everfeeds.thrift.error.TokenNotFound();
              this.eTNF.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // E_NF
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eNF = new everfeeds.thrift.error.NotFound();
              this.eNF.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetEF()) {
        oprot.writeFieldBegin(E_F_FIELD_DESC);
        this.eF.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetEE()) {
        oprot.writeFieldBegin(E_E_FIELD_DESC);
        this.eE.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetETNF()) {
        oprot.writeFieldBegin(E_TNF_FIELD_DESC);
        this.eTNF.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetENF()) {
        oprot.writeFieldBegin(E_NF_FIELD_DESC);
        this.eNF.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveAccessToken_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eF:");
      if (this.eF == null) {
        sb.append("null");
      } else {
        sb.append(this.eF);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eE:");
      if (this.eE == null) {
        sb.append("null");
      } else {
        sb.append(this.eE);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eTNF:");
      if (this.eTNF == null) {
        sb.append("null");
      } else {
        sb.append(this.eTNF);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eNF:");
      if (this.eNF == null) {
        sb.append("null");
      } else {
        sb.append(this.eNF);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class saveAccess_args implements org.apache.thrift.TBase<saveAccess_args, saveAccess_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveAccess_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ACCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("access", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    public String token;
    public everfeeds.thrift.domain.Access access;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token"),
      ACCESS((short)2, "access");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 2: // ACCESS
            return ACCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "String")));
      tmpMap.put(_Fields.ACCESS, new org.apache.thrift.meta_data.FieldMetaData("access", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, everfeeds.thrift.domain.Access.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveAccess_args.class, metaDataMap);
    }

    public saveAccess_args() {
    }

    public saveAccess_args(
      String token,
      everfeeds.thrift.domain.Access access)
    {
      this();
      this.token = token;
      this.access = access;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveAccess_args(saveAccess_args other) {
      if (other.isSetToken()) {
        this.token = other.token;
      }
      if (other.isSetAccess()) {
        this.access = new everfeeds.thrift.domain.Access(other.access);
      }
    }

    public saveAccess_args deepCopy() {
      return new saveAccess_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      this.access = null;
    }

    public String getToken() {
      return this.token;
    }

    public saveAccess_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public everfeeds.thrift.domain.Access getAccess() {
      return this.access;
    }

    public saveAccess_args setAccess(everfeeds.thrift.domain.Access access) {
      this.access = access;
      return this;
    }

    public void unsetAccess() {
      this.access = null;
    }

    /** Returns true if field access is set (has been assigned a value) and false otherwise */
    public boolean isSetAccess() {
      return this.access != null;
    }

    public void setAccessIsSet(boolean value) {
      if (!value) {
        this.access = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case ACCESS:
        if (value == null) {
          unsetAccess();
        } else {
          setAccess((everfeeds.thrift.domain.Access)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case ACCESS:
        return getAccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case ACCESS:
        return isSetAccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveAccess_args)
        return this.equals((saveAccess_args)that);
      return false;
    }

    public boolean equals(saveAccess_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_access = true && this.isSetAccess();
      boolean that_present_access = true && that.isSetAccess();
      if (this_present_access || that_present_access) {
        if (!(this_present_access && that_present_access))
          return false;
        if (!this.access.equals(that.access))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(saveAccess_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      saveAccess_args typedOther = (saveAccess_args)other;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(typedOther.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, typedOther.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAccess()).compareTo(typedOther.isSetAccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.access, typedOther.access);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // TOKEN
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.token = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // ACCESS
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.access = new everfeeds.thrift.domain.Access();
              this.access.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.token != null) {
        oprot.writeFieldBegin(TOKEN_FIELD_DESC);
        oprot.writeString(this.token);
        oprot.writeFieldEnd();
      }
      if (this.access != null) {
        oprot.writeFieldBegin(ACCESS_FIELD_DESC);
        this.access.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveAccess_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("access:");
      if (this.access == null) {
        sb.append("null");
      } else {
        sb.append(this.access);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class saveAccess_result implements org.apache.thrift.TBase<saveAccess_result, saveAccess_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveAccess_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_F_FIELD_DESC = new org.apache.thrift.protocol.TField("eF", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField E_E_FIELD_DESC = new org.apache.thrift.protocol.TField("eE", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField E_TNF_FIELD_DESC = new org.apache.thrift.protocol.TField("eTNF", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField E_NF_FIELD_DESC = new org.apache.thrift.protocol.TField("eNF", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    public everfeeds.thrift.domain.Access success;
    public everfeeds.thrift.error.Forbidden eF;
    public everfeeds.thrift.error.TokenExpired eE;
    public everfeeds.thrift.error.TokenNotFound eTNF;
    public everfeeds.thrift.error.NotFound eNF;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E_F((short)1, "eF"),
      E_E((short)2, "eE"),
      E_TNF((short)3, "eTNF"),
      E_NF((short)4, "eNF");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E_F
            return E_F;
          case 2: // E_E
            return E_E;
          case 3: // E_TNF
            return E_TNF;
          case 4: // E_NF
            return E_NF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, everfeeds.thrift.domain.Access.class)));
      tmpMap.put(_Fields.E_F, new org.apache.thrift.meta_data.FieldMetaData("eF", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_E, new org.apache.thrift.meta_data.FieldMetaData("eE", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_TNF, new org.apache.thrift.meta_data.FieldMetaData("eTNF", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_NF, new org.apache.thrift.meta_data.FieldMetaData("eNF", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveAccess_result.class, metaDataMap);
    }

    public saveAccess_result() {
    }

    public saveAccess_result(
      everfeeds.thrift.domain.Access success,
      everfeeds.thrift.error.Forbidden eF,
      everfeeds.thrift.error.TokenExpired eE,
      everfeeds.thrift.error.TokenNotFound eTNF,
      everfeeds.thrift.error.NotFound eNF)
    {
      this();
      this.success = success;
      this.eF = eF;
      this.eE = eE;
      this.eTNF = eTNF;
      this.eNF = eNF;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveAccess_result(saveAccess_result other) {
      if (other.isSetSuccess()) {
        this.success = new everfeeds.thrift.domain.Access(other.success);
      }
      if (other.isSetEF()) {
        this.eF = new everfeeds.thrift.error.Forbidden(other.eF);
      }
      if (other.isSetEE()) {
        this.eE = new everfeeds.thrift.error.TokenExpired(other.eE);
      }
      if (other.isSetETNF()) {
        this.eTNF = new everfeeds.thrift.error.TokenNotFound(other.eTNF);
      }
      if (other.isSetENF()) {
        this.eNF = new everfeeds.thrift.error.NotFound(other.eNF);
      }
    }

    public saveAccess_result deepCopy() {
      return new saveAccess_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.eF = null;
      this.eE = null;
      this.eTNF = null;
      this.eNF = null;
    }

    public everfeeds.thrift.domain.Access getSuccess() {
      return this.success;
    }

    public saveAccess_result setSuccess(everfeeds.thrift.domain.Access success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public everfeeds.thrift.error.Forbidden getEF() {
      return this.eF;
    }

    public saveAccess_result setEF(everfeeds.thrift.error.Forbidden eF) {
      this.eF = eF;
      return this;
    }

    public void unsetEF() {
      this.eF = null;
    }

    /** Returns true if field eF is set (has been assigned a value) and false otherwise */
    public boolean isSetEF() {
      return this.eF != null;
    }

    public void setEFIsSet(boolean value) {
      if (!value) {
        this.eF = null;
      }
    }

    public everfeeds.thrift.error.TokenExpired getEE() {
      return this.eE;
    }

    public saveAccess_result setEE(everfeeds.thrift.error.TokenExpired eE) {
      this.eE = eE;
      return this;
    }

    public void unsetEE() {
      this.eE = null;
    }

    /** Returns true if field eE is set (has been assigned a value) and false otherwise */
    public boolean isSetEE() {
      return this.eE != null;
    }

    public void setEEIsSet(boolean value) {
      if (!value) {
        this.eE = null;
      }
    }

    public everfeeds.thrift.error.TokenNotFound getETNF() {
      return this.eTNF;
    }

    public saveAccess_result setETNF(everfeeds.thrift.error.TokenNotFound eTNF) {
      this.eTNF = eTNF;
      return this;
    }

    public void unsetETNF() {
      this.eTNF = null;
    }

    /** Returns true if field eTNF is set (has been assigned a value) and false otherwise */
    public boolean isSetETNF() {
      return this.eTNF != null;
    }

    public void setETNFIsSet(boolean value) {
      if (!value) {
        this.eTNF = null;
      }
    }

    public everfeeds.thrift.error.NotFound getENF() {
      return this.eNF;
    }

    public saveAccess_result setENF(everfeeds.thrift.error.NotFound eNF) {
      this.eNF = eNF;
      return this;
    }

    public void unsetENF() {
      this.eNF = null;
    }

    /** Returns true if field eNF is set (has been assigned a value) and false otherwise */
    public boolean isSetENF() {
      return this.eNF != null;
    }

    public void setENFIsSet(boolean value) {
      if (!value) {
        this.eNF = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((everfeeds.thrift.domain.Access)value);
        }
        break;

      case E_F:
        if (value == null) {
          unsetEF();
        } else {
          setEF((everfeeds.thrift.error.Forbidden)value);
        }
        break;

      case E_E:
        if (value == null) {
          unsetEE();
        } else {
          setEE((everfeeds.thrift.error.TokenExpired)value);
        }
        break;

      case E_TNF:
        if (value == null) {
          unsetETNF();
        } else {
          setETNF((everfeeds.thrift.error.TokenNotFound)value);
        }
        break;

      case E_NF:
        if (value == null) {
          unsetENF();
        } else {
          setENF((everfeeds.thrift.error.NotFound)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E_F:
        return getEF();

      case E_E:
        return getEE();

      case E_TNF:
        return getETNF();

      case E_NF:
        return getENF();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E_F:
        return isSetEF();
      case E_E:
        return isSetEE();
      case E_TNF:
        return isSetETNF();
      case E_NF:
        return isSetENF();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveAccess_result)
        return this.equals((saveAccess_result)that);
      return false;
    }

    public boolean equals(saveAccess_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_eF = true && this.isSetEF();
      boolean that_present_eF = true && that.isSetEF();
      if (this_present_eF || that_present_eF) {
        if (!(this_present_eF && that_present_eF))
          return false;
        if (!this.eF.equals(that.eF))
          return false;
      }

      boolean this_present_eE = true && this.isSetEE();
      boolean that_present_eE = true && that.isSetEE();
      if (this_present_eE || that_present_eE) {
        if (!(this_present_eE && that_present_eE))
          return false;
        if (!this.eE.equals(that.eE))
          return false;
      }

      boolean this_present_eTNF = true && this.isSetETNF();
      boolean that_present_eTNF = true && that.isSetETNF();
      if (this_present_eTNF || that_present_eTNF) {
        if (!(this_present_eTNF && that_present_eTNF))
          return false;
        if (!this.eTNF.equals(that.eTNF))
          return false;
      }

      boolean this_present_eNF = true && this.isSetENF();
      boolean that_present_eNF = true && that.isSetENF();
      if (this_present_eNF || that_present_eNF) {
        if (!(this_present_eNF && that_present_eNF))
          return false;
        if (!this.eNF.equals(that.eNF))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(saveAccess_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      saveAccess_result typedOther = (saveAccess_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEF()).compareTo(typedOther.isSetEF());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEF()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eF, typedOther.eF);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEE()).compareTo(typedOther.isSetEE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eE, typedOther.eE);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetETNF()).compareTo(typedOther.isSetETNF());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetETNF()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eTNF, typedOther.eTNF);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetENF()).compareTo(typedOther.isSetENF());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetENF()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eNF, typedOther.eNF);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.success = new everfeeds.thrift.domain.Access();
              this.success.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E_F
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eF = new everfeeds.thrift.error.Forbidden();
              this.eF.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // E_E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eE = new everfeeds.thrift.error.TokenExpired();
              this.eE.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // E_TNF
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eTNF = new everfeeds.thrift.error.TokenNotFound();
              this.eTNF.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // E_NF
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eNF = new everfeeds.thrift.error.NotFound();
              this.eNF.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetEF()) {
        oprot.writeFieldBegin(E_F_FIELD_DESC);
        this.eF.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetEE()) {
        oprot.writeFieldBegin(E_E_FIELD_DESC);
        this.eE.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetETNF()) {
        oprot.writeFieldBegin(E_TNF_FIELD_DESC);
        this.eTNF.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetENF()) {
        oprot.writeFieldBegin(E_NF_FIELD_DESC);
        this.eNF.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveAccess_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eF:");
      if (this.eF == null) {
        sb.append("null");
      } else {
        sb.append(this.eF);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eE:");
      if (this.eE == null) {
        sb.append("null");
      } else {
        sb.append(this.eE);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eTNF:");
      if (this.eTNF == null) {
        sb.append("null");
      } else {
        sb.append(this.eTNF);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eNF:");
      if (this.eNF == null) {
        sb.append("null");
      } else {
        sb.append(this.eNF);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class saveAccount_args implements org.apache.thrift.TBase<saveAccount_args, saveAccount_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveAccount_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ACCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("account", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    public String token;
    public everfeeds.thrift.domain.Account account;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token"),
      ACCOUNT((short)2, "account");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 2: // ACCOUNT
            return ACCOUNT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "String")));
      tmpMap.put(_Fields.ACCOUNT, new org.apache.thrift.meta_data.FieldMetaData("account", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, everfeeds.thrift.domain.Account.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveAccount_args.class, metaDataMap);
    }

    public saveAccount_args() {
    }

    public saveAccount_args(
      String token,
      everfeeds.thrift.domain.Account account)
    {
      this();
      this.token = token;
      this.account = account;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveAccount_args(saveAccount_args other) {
      if (other.isSetToken()) {
        this.token = other.token;
      }
      if (other.isSetAccount()) {
        this.account = new everfeeds.thrift.domain.Account(other.account);
      }
    }

    public saveAccount_args deepCopy() {
      return new saveAccount_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      this.account = null;
    }

    public String getToken() {
      return this.token;
    }

    public saveAccount_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public everfeeds.thrift.domain.Account getAccount() {
      return this.account;
    }

    public saveAccount_args setAccount(everfeeds.thrift.domain.Account account) {
      this.account = account;
      return this;
    }

    public void unsetAccount() {
      this.account = null;
    }

    /** Returns true if field account is set (has been assigned a value) and false otherwise */
    public boolean isSetAccount() {
      return this.account != null;
    }

    public void setAccountIsSet(boolean value) {
      if (!value) {
        this.account = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case ACCOUNT:
        if (value == null) {
          unsetAccount();
        } else {
          setAccount((everfeeds.thrift.domain.Account)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case ACCOUNT:
        return getAccount();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case ACCOUNT:
        return isSetAccount();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveAccount_args)
        return this.equals((saveAccount_args)that);
      return false;
    }

    public boolean equals(saveAccount_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_account = true && this.isSetAccount();
      boolean that_present_account = true && that.isSetAccount();
      if (this_present_account || that_present_account) {
        if (!(this_present_account && that_present_account))
          return false;
        if (!this.account.equals(that.account))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(saveAccount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      saveAccount_args typedOther = (saveAccount_args)other;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(typedOther.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, typedOther.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAccount()).compareTo(typedOther.isSetAccount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.account, typedOther.account);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // TOKEN
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.token = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // ACCOUNT
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.account = new everfeeds.thrift.domain.Account();
              this.account.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.token != null) {
        oprot.writeFieldBegin(TOKEN_FIELD_DESC);
        oprot.writeString(this.token);
        oprot.writeFieldEnd();
      }
      if (this.account != null) {
        oprot.writeFieldBegin(ACCOUNT_FIELD_DESC);
        this.account.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveAccount_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("account:");
      if (this.account == null) {
        sb.append("null");
      } else {
        sb.append(this.account);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class saveAccount_result implements org.apache.thrift.TBase<saveAccount_result, saveAccount_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveAccount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_F_FIELD_DESC = new org.apache.thrift.protocol.TField("eF", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField E_E_FIELD_DESC = new org.apache.thrift.protocol.TField("eE", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField E_TNF_FIELD_DESC = new org.apache.thrift.protocol.TField("eTNF", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField E_NF_FIELD_DESC = new org.apache.thrift.protocol.TField("eNF", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    public everfeeds.thrift.domain.Account success;
    public everfeeds.thrift.error.Forbidden eF;
    public everfeeds.thrift.error.TokenExpired eE;
    public everfeeds.thrift.error.TokenNotFound eTNF;
    public everfeeds.thrift.error.NotFound eNF;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E_F((short)1, "eF"),
      E_E((short)2, "eE"),
      E_TNF((short)3, "eTNF"),
      E_NF((short)4, "eNF");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E_F
            return E_F;
          case 2: // E_E
            return E_E;
          case 3: // E_TNF
            return E_TNF;
          case 4: // E_NF
            return E_NF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, everfeeds.thrift.domain.Account.class)));
      tmpMap.put(_Fields.E_F, new org.apache.thrift.meta_data.FieldMetaData("eF", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_E, new org.apache.thrift.meta_data.FieldMetaData("eE", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_TNF, new org.apache.thrift.meta_data.FieldMetaData("eTNF", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_NF, new org.apache.thrift.meta_data.FieldMetaData("eNF", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveAccount_result.class, metaDataMap);
    }

    public saveAccount_result() {
    }

    public saveAccount_result(
      everfeeds.thrift.domain.Account success,
      everfeeds.thrift.error.Forbidden eF,
      everfeeds.thrift.error.TokenExpired eE,
      everfeeds.thrift.error.TokenNotFound eTNF,
      everfeeds.thrift.error.NotFound eNF)
    {
      this();
      this.success = success;
      this.eF = eF;
      this.eE = eE;
      this.eTNF = eTNF;
      this.eNF = eNF;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveAccount_result(saveAccount_result other) {
      if (other.isSetSuccess()) {
        this.success = new everfeeds.thrift.domain.Account(other.success);
      }
      if (other.isSetEF()) {
        this.eF = new everfeeds.thrift.error.Forbidden(other.eF);
      }
      if (other.isSetEE()) {
        this.eE = new everfeeds.thrift.error.TokenExpired(other.eE);
      }
      if (other.isSetETNF()) {
        this.eTNF = new everfeeds.thrift.error.TokenNotFound(other.eTNF);
      }
      if (other.isSetENF()) {
        this.eNF = new everfeeds.thrift.error.NotFound(other.eNF);
      }
    }

    public saveAccount_result deepCopy() {
      return new saveAccount_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.eF = null;
      this.eE = null;
      this.eTNF = null;
      this.eNF = null;
    }

    public everfeeds.thrift.domain.Account getSuccess() {
      return this.success;
    }

    public saveAccount_result setSuccess(everfeeds.thrift.domain.Account success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public everfeeds.thrift.error.Forbidden getEF() {
      return this.eF;
    }

    public saveAccount_result setEF(everfeeds.thrift.error.Forbidden eF) {
      this.eF = eF;
      return this;
    }

    public void unsetEF() {
      this.eF = null;
    }

    /** Returns true if field eF is set (has been assigned a value) and false otherwise */
    public boolean isSetEF() {
      return this.eF != null;
    }

    public void setEFIsSet(boolean value) {
      if (!value) {
        this.eF = null;
      }
    }

    public everfeeds.thrift.error.TokenExpired getEE() {
      return this.eE;
    }

    public saveAccount_result setEE(everfeeds.thrift.error.TokenExpired eE) {
      this.eE = eE;
      return this;
    }

    public void unsetEE() {
      this.eE = null;
    }

    /** Returns true if field eE is set (has been assigned a value) and false otherwise */
    public boolean isSetEE() {
      return this.eE != null;
    }

    public void setEEIsSet(boolean value) {
      if (!value) {
        this.eE = null;
      }
    }

    public everfeeds.thrift.error.TokenNotFound getETNF() {
      return this.eTNF;
    }

    public saveAccount_result setETNF(everfeeds.thrift.error.TokenNotFound eTNF) {
      this.eTNF = eTNF;
      return this;
    }

    public void unsetETNF() {
      this.eTNF = null;
    }

    /** Returns true if field eTNF is set (has been assigned a value) and false otherwise */
    public boolean isSetETNF() {
      return this.eTNF != null;
    }

    public void setETNFIsSet(boolean value) {
      if (!value) {
        this.eTNF = null;
      }
    }

    public everfeeds.thrift.error.NotFound getENF() {
      return this.eNF;
    }

    public saveAccount_result setENF(everfeeds.thrift.error.NotFound eNF) {
      this.eNF = eNF;
      return this;
    }

    public void unsetENF() {
      this.eNF = null;
    }

    /** Returns true if field eNF is set (has been assigned a value) and false otherwise */
    public boolean isSetENF() {
      return this.eNF != null;
    }

    public void setENFIsSet(boolean value) {
      if (!value) {
        this.eNF = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((everfeeds.thrift.domain.Account)value);
        }
        break;

      case E_F:
        if (value == null) {
          unsetEF();
        } else {
          setEF((everfeeds.thrift.error.Forbidden)value);
        }
        break;

      case E_E:
        if (value == null) {
          unsetEE();
        } else {
          setEE((everfeeds.thrift.error.TokenExpired)value);
        }
        break;

      case E_TNF:
        if (value == null) {
          unsetETNF();
        } else {
          setETNF((everfeeds.thrift.error.TokenNotFound)value);
        }
        break;

      case E_NF:
        if (value == null) {
          unsetENF();
        } else {
          setENF((everfeeds.thrift.error.NotFound)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E_F:
        return getEF();

      case E_E:
        return getEE();

      case E_TNF:
        return getETNF();

      case E_NF:
        return getENF();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E_F:
        return isSetEF();
      case E_E:
        return isSetEE();
      case E_TNF:
        return isSetETNF();
      case E_NF:
        return isSetENF();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveAccount_result)
        return this.equals((saveAccount_result)that);
      return false;
    }

    public boolean equals(saveAccount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_eF = true && this.isSetEF();
      boolean that_present_eF = true && that.isSetEF();
      if (this_present_eF || that_present_eF) {
        if (!(this_present_eF && that_present_eF))
          return false;
        if (!this.eF.equals(that.eF))
          return false;
      }

      boolean this_present_eE = true && this.isSetEE();
      boolean that_present_eE = true && that.isSetEE();
      if (this_present_eE || that_present_eE) {
        if (!(this_present_eE && that_present_eE))
          return false;
        if (!this.eE.equals(that.eE))
          return false;
      }

      boolean this_present_eTNF = true && this.isSetETNF();
      boolean that_present_eTNF = true && that.isSetETNF();
      if (this_present_eTNF || that_present_eTNF) {
        if (!(this_present_eTNF && that_present_eTNF))
          return false;
        if (!this.eTNF.equals(that.eTNF))
          return false;
      }

      boolean this_present_eNF = true && this.isSetENF();
      boolean that_present_eNF = true && that.isSetENF();
      if (this_present_eNF || that_present_eNF) {
        if (!(this_present_eNF && that_present_eNF))
          return false;
        if (!this.eNF.equals(that.eNF))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(saveAccount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      saveAccount_result typedOther = (saveAccount_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEF()).compareTo(typedOther.isSetEF());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEF()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eF, typedOther.eF);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEE()).compareTo(typedOther.isSetEE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eE, typedOther.eE);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetETNF()).compareTo(typedOther.isSetETNF());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetETNF()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eTNF, typedOther.eTNF);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetENF()).compareTo(typedOther.isSetENF());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetENF()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eNF, typedOther.eNF);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.success = new everfeeds.thrift.domain.Account();
              this.success.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E_F
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eF = new everfeeds.thrift.error.Forbidden();
              this.eF.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // E_E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eE = new everfeeds.thrift.error.TokenExpired();
              this.eE.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // E_TNF
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eTNF = new everfeeds.thrift.error.TokenNotFound();
              this.eTNF.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // E_NF
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eNF = new everfeeds.thrift.error.NotFound();
              this.eNF.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetEF()) {
        oprot.writeFieldBegin(E_F_FIELD_DESC);
        this.eF.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetEE()) {
        oprot.writeFieldBegin(E_E_FIELD_DESC);
        this.eE.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetETNF()) {
        oprot.writeFieldBegin(E_TNF_FIELD_DESC);
        this.eTNF.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetENF()) {
        oprot.writeFieldBegin(E_NF_FIELD_DESC);
        this.eNF.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveAccount_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eF:");
      if (this.eF == null) {
        sb.append("null");
      } else {
        sb.append(this.eF);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eE:");
      if (this.eE == null) {
        sb.append("null");
      } else {
        sb.append(this.eE);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eTNF:");
      if (this.eTNF == null) {
        sb.append("null");
      } else {
        sb.append(this.eTNF);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eNF:");
      if (this.eNF == null) {
        sb.append("null");
      } else {
        sb.append(this.eNF);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

}
