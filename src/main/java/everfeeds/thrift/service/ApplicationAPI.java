/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package everfeeds.thrift.service;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ApplicationAPI {

  public interface Iface {

    public everfeeds.thrift.domain.Token createToken(String actApplicationSecret, String applicationId, String accountId, List<String> scopes) throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.NotFound, org.apache.thrift.TException;

    public everfeeds.thrift.domain.Account createAccessAndAccount(String actApplicationSecret, everfeeds.thrift.domain.Access access, String accessToken, String accessSecret, List<String> accessParams) throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.NotFound, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void createToken(String actApplicationSecret, String applicationId, String accountId, List<String> scopes, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.createToken_call> resultHandler) throws org.apache.thrift.TException;

    public void createAccessAndAccount(String actApplicationSecret, everfeeds.thrift.domain.Access access, String accessToken, String accessSecret, List<String> accessParams, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.createAccessAndAccount_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client implements org.apache.thrift.TServiceClient, Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      this(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected org.apache.thrift.protocol.TProtocol iprot_;
    protected org.apache.thrift.protocol.TProtocol oprot_;

    protected int seqid_;

    public org.apache.thrift.protocol.TProtocol getInputProtocol()
    {
      return this.iprot_;
    }

    public org.apache.thrift.protocol.TProtocol getOutputProtocol()
    {
      return this.oprot_;
    }

    public everfeeds.thrift.domain.Token createToken(String actApplicationSecret, String applicationId, String accountId, List<String> scopes) throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.NotFound, org.apache.thrift.TException
    {
      send_createToken(actApplicationSecret, applicationId, accountId, scopes);
      return recv_createToken();
    }

    public void send_createToken(String actApplicationSecret, String applicationId, String accountId, List<String> scopes) throws org.apache.thrift.TException
    {
      oprot_.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createToken", org.apache.thrift.protocol.TMessageType.CALL, ++seqid_));
      createToken_args args = new createToken_args();
      args.setActApplicationSecret(actApplicationSecret);
      args.setApplicationId(applicationId);
      args.setAccountId(accountId);
      args.setScopes(scopes);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public everfeeds.thrift.domain.Token recv_createToken() throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.NotFound, org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot_.readMessageBegin();
      if (msg.type == org.apache.thrift.protocol.TMessageType.EXCEPTION) {
        org.apache.thrift.TApplicationException x = org.apache.thrift.TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.BAD_SEQUENCE_ID, "createToken failed: out of sequence response");
      }
      createToken_result result = new createToken_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.eOne != null) {
        throw result.eOne;
      }
      if (result.eTwo != null) {
        throw result.eTwo;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createToken failed: unknown result");
    }

    public everfeeds.thrift.domain.Account createAccessAndAccount(String actApplicationSecret, everfeeds.thrift.domain.Access access, String accessToken, String accessSecret, List<String> accessParams) throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.NotFound, org.apache.thrift.TException
    {
      send_createAccessAndAccount(actApplicationSecret, access, accessToken, accessSecret, accessParams);
      return recv_createAccessAndAccount();
    }

    public void send_createAccessAndAccount(String actApplicationSecret, everfeeds.thrift.domain.Access access, String accessToken, String accessSecret, List<String> accessParams) throws org.apache.thrift.TException
    {
      oprot_.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createAccessAndAccount", org.apache.thrift.protocol.TMessageType.CALL, ++seqid_));
      createAccessAndAccount_args args = new createAccessAndAccount_args();
      args.setActApplicationSecret(actApplicationSecret);
      args.setAccess(access);
      args.setAccessToken(accessToken);
      args.setAccessSecret(accessSecret);
      args.setAccessParams(accessParams);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public everfeeds.thrift.domain.Account recv_createAccessAndAccount() throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.NotFound, org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot_.readMessageBegin();
      if (msg.type == org.apache.thrift.protocol.TMessageType.EXCEPTION) {
        org.apache.thrift.TApplicationException x = org.apache.thrift.TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.BAD_SEQUENCE_ID, "createAccessAndAccount failed: out of sequence response");
      }
      createAccessAndAccount_result result = new createAccessAndAccount_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.eOne != null) {
        throw result.eOne;
      }
      if (result.eTwo != null) {
        throw result.eTwo;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createAccessAndAccount failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void createToken(String actApplicationSecret, String applicationId, String accountId, List<String> scopes, org.apache.thrift.async.AsyncMethodCallback<createToken_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createToken_call method_call = new createToken_call(actApplicationSecret, applicationId, accountId, scopes, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class createToken_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String actApplicationSecret;
      private String applicationId;
      private String accountId;
      private List<String> scopes;
      public createToken_call(String actApplicationSecret, String applicationId, String accountId, List<String> scopes, org.apache.thrift.async.AsyncMethodCallback<createToken_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.actApplicationSecret = actApplicationSecret;
        this.applicationId = applicationId;
        this.accountId = accountId;
        this.scopes = scopes;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createToken", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createToken_args args = new createToken_args();
        args.setActApplicationSecret(actApplicationSecret);
        args.setApplicationId(applicationId);
        args.setAccountId(accountId);
        args.setScopes(scopes);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public everfeeds.thrift.domain.Token getResult() throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.NotFound, org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createToken();
      }
    }

    public void createAccessAndAccount(String actApplicationSecret, everfeeds.thrift.domain.Access access, String accessToken, String accessSecret, List<String> accessParams, org.apache.thrift.async.AsyncMethodCallback<createAccessAndAccount_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createAccessAndAccount_call method_call = new createAccessAndAccount_call(actApplicationSecret, access, accessToken, accessSecret, accessParams, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class createAccessAndAccount_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String actApplicationSecret;
      private everfeeds.thrift.domain.Access access;
      private String accessToken;
      private String accessSecret;
      private List<String> accessParams;
      public createAccessAndAccount_call(String actApplicationSecret, everfeeds.thrift.domain.Access access, String accessToken, String accessSecret, List<String> accessParams, org.apache.thrift.async.AsyncMethodCallback<createAccessAndAccount_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.actApplicationSecret = actApplicationSecret;
        this.access = access;
        this.accessToken = accessToken;
        this.accessSecret = accessSecret;
        this.accessParams = accessParams;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createAccessAndAccount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createAccessAndAccount_args args = new createAccessAndAccount_args();
        args.setActApplicationSecret(actApplicationSecret);
        args.setAccess(access);
        args.setAccessToken(accessToken);
        args.setAccessSecret(accessSecret);
        args.setAccessParams(accessParams);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public everfeeds.thrift.domain.Account getResult() throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.NotFound, org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createAccessAndAccount();
      }
    }

  }

  public static class Processor implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(Iface iface)
    {
      iface_ = iface;
      processMap_.put("createToken", new createToken());
      processMap_.put("createAccessAndAccount", new createAccessAndAccount());
    }

    protected static interface ProcessFunction {
      public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException;
    }

    private Iface iface_;
    protected final HashMap<String,ProcessFunction> processMap_ = new HashMap<String,ProcessFunction>();

    public boolean process(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot.readMessageBegin();
      ProcessFunction fn = processMap_.get(msg.name);
      if (fn == null) {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, org.apache.thrift.protocol.TType.STRUCT);
        iprot.readMessageEnd();
        org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.UNKNOWN_METHOD, "Invalid method name: '"+msg.name+"'");
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(msg.name, org.apache.thrift.protocol.TMessageType.EXCEPTION, msg.seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return true;
      }
      fn.process(msg.seqid, iprot, oprot);
      return true;
    }

    private class createToken implements ProcessFunction {
      public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        createToken_args args = new createToken_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createToken", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        createToken_result result = new createToken_result();
        try {
          result.success = iface_.createToken(args.actApplicationSecret, args.applicationId, args.accountId, args.scopes);
        } catch (everfeeds.thrift.error.Forbidden eOne) {
          result.eOne = eOne;
        } catch (everfeeds.thrift.error.NotFound eTwo) {
          result.eTwo = eTwo;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing createToken", th);
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, "Internal error processing createToken");
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createToken", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createToken", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class createAccessAndAccount implements ProcessFunction {
      public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        createAccessAndAccount_args args = new createAccessAndAccount_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createAccessAndAccount", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        createAccessAndAccount_result result = new createAccessAndAccount_result();
        try {
          result.success = iface_.createAccessAndAccount(args.actApplicationSecret, args.access, args.accessToken, args.accessSecret, args.accessParams);
        } catch (everfeeds.thrift.error.Forbidden eOne) {
          result.eOne = eOne;
        } catch (everfeeds.thrift.error.NotFound eTwo) {
          result.eTwo = eTwo;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing createAccessAndAccount", th);
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, "Internal error processing createAccessAndAccount");
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createAccessAndAccount", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createAccessAndAccount", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

  }

  public static class createToken_args implements org.apache.thrift.TBase<createToken_args, createToken_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createToken_args");

    private static final org.apache.thrift.protocol.TField ACT_APPLICATION_SECRET_FIELD_DESC = new org.apache.thrift.protocol.TField("actApplicationSecret", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField APPLICATION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("applicationId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("accountId", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField SCOPES_FIELD_DESC = new org.apache.thrift.protocol.TField("scopes", org.apache.thrift.protocol.TType.LIST, (short)4);

    public String actApplicationSecret;
    public String applicationId;
    public String accountId;
    public List<String> scopes;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ACT_APPLICATION_SECRET((short)1, "actApplicationSecret"),
      APPLICATION_ID((short)2, "applicationId"),
      ACCOUNT_ID((short)3, "accountId"),
      SCOPES((short)4, "scopes");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ACT_APPLICATION_SECRET
            return ACT_APPLICATION_SECRET;
          case 2: // APPLICATION_ID
            return APPLICATION_ID;
          case 3: // ACCOUNT_ID
            return ACCOUNT_ID;
          case 4: // SCOPES
            return SCOPES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ACT_APPLICATION_SECRET, new org.apache.thrift.meta_data.FieldMetaData("actApplicationSecret", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "String")));
      tmpMap.put(_Fields.APPLICATION_ID, new org.apache.thrift.meta_data.FieldMetaData("applicationId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "Id")));
      tmpMap.put(_Fields.ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("accountId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "Id")));
      tmpMap.put(_Fields.SCOPES, new org.apache.thrift.meta_data.FieldMetaData("scopes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createToken_args.class, metaDataMap);
    }

    public createToken_args() {
    }

    public createToken_args(
      String actApplicationSecret,
      String applicationId,
      String accountId,
      List<String> scopes)
    {
      this();
      this.actApplicationSecret = actApplicationSecret;
      this.applicationId = applicationId;
      this.accountId = accountId;
      this.scopes = scopes;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createToken_args(createToken_args other) {
      if (other.isSetActApplicationSecret()) {
        this.actApplicationSecret = other.actApplicationSecret;
      }
      if (other.isSetApplicationId()) {
        this.applicationId = other.applicationId;
      }
      if (other.isSetAccountId()) {
        this.accountId = other.accountId;
      }
      if (other.isSetScopes()) {
        List<String> __this__scopes = new ArrayList<String>();
        for (String other_element : other.scopes) {
          __this__scopes.add(other_element);
        }
        this.scopes = __this__scopes;
      }
    }

    public createToken_args deepCopy() {
      return new createToken_args(this);
    }

    @Override
    public void clear() {
      this.actApplicationSecret = null;
      this.applicationId = null;
      this.accountId = null;
      this.scopes = null;
    }

    public String getActApplicationSecret() {
      return this.actApplicationSecret;
    }

    public createToken_args setActApplicationSecret(String actApplicationSecret) {
      this.actApplicationSecret = actApplicationSecret;
      return this;
    }

    public void unsetActApplicationSecret() {
      this.actApplicationSecret = null;
    }

    /** Returns true if field actApplicationSecret is set (has been assigned a value) and false otherwise */
    public boolean isSetActApplicationSecret() {
      return this.actApplicationSecret != null;
    }

    public void setActApplicationSecretIsSet(boolean value) {
      if (!value) {
        this.actApplicationSecret = null;
      }
    }

    public String getApplicationId() {
      return this.applicationId;
    }

    public createToken_args setApplicationId(String applicationId) {
      this.applicationId = applicationId;
      return this;
    }

    public void unsetApplicationId() {
      this.applicationId = null;
    }

    /** Returns true if field applicationId is set (has been assigned a value) and false otherwise */
    public boolean isSetApplicationId() {
      return this.applicationId != null;
    }

    public void setApplicationIdIsSet(boolean value) {
      if (!value) {
        this.applicationId = null;
      }
    }

    public String getAccountId() {
      return this.accountId;
    }

    public createToken_args setAccountId(String accountId) {
      this.accountId = accountId;
      return this;
    }

    public void unsetAccountId() {
      this.accountId = null;
    }

    /** Returns true if field accountId is set (has been assigned a value) and false otherwise */
    public boolean isSetAccountId() {
      return this.accountId != null;
    }

    public void setAccountIdIsSet(boolean value) {
      if (!value) {
        this.accountId = null;
      }
    }

    public int getScopesSize() {
      return (this.scopes == null) ? 0 : this.scopes.size();
    }

    public java.util.Iterator<String> getScopesIterator() {
      return (this.scopes == null) ? null : this.scopes.iterator();
    }

    public void addToScopes(String elem) {
      if (this.scopes == null) {
        this.scopes = new ArrayList<String>();
      }
      this.scopes.add(elem);
    }

    public List<String> getScopes() {
      return this.scopes;
    }

    public createToken_args setScopes(List<String> scopes) {
      this.scopes = scopes;
      return this;
    }

    public void unsetScopes() {
      this.scopes = null;
    }

    /** Returns true if field scopes is set (has been assigned a value) and false otherwise */
    public boolean isSetScopes() {
      return this.scopes != null;
    }

    public void setScopesIsSet(boolean value) {
      if (!value) {
        this.scopes = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ACT_APPLICATION_SECRET:
        if (value == null) {
          unsetActApplicationSecret();
        } else {
          setActApplicationSecret((String)value);
        }
        break;

      case APPLICATION_ID:
        if (value == null) {
          unsetApplicationId();
        } else {
          setApplicationId((String)value);
        }
        break;

      case ACCOUNT_ID:
        if (value == null) {
          unsetAccountId();
        } else {
          setAccountId((String)value);
        }
        break;

      case SCOPES:
        if (value == null) {
          unsetScopes();
        } else {
          setScopes((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ACT_APPLICATION_SECRET:
        return getActApplicationSecret();

      case APPLICATION_ID:
        return getApplicationId();

      case ACCOUNT_ID:
        return getAccountId();

      case SCOPES:
        return getScopes();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ACT_APPLICATION_SECRET:
        return isSetActApplicationSecret();
      case APPLICATION_ID:
        return isSetApplicationId();
      case ACCOUNT_ID:
        return isSetAccountId();
      case SCOPES:
        return isSetScopes();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createToken_args)
        return this.equals((createToken_args)that);
      return false;
    }

    public boolean equals(createToken_args that) {
      if (that == null)
        return false;

      boolean this_present_actApplicationSecret = true && this.isSetActApplicationSecret();
      boolean that_present_actApplicationSecret = true && that.isSetActApplicationSecret();
      if (this_present_actApplicationSecret || that_present_actApplicationSecret) {
        if (!(this_present_actApplicationSecret && that_present_actApplicationSecret))
          return false;
        if (!this.actApplicationSecret.equals(that.actApplicationSecret))
          return false;
      }

      boolean this_present_applicationId = true && this.isSetApplicationId();
      boolean that_present_applicationId = true && that.isSetApplicationId();
      if (this_present_applicationId || that_present_applicationId) {
        if (!(this_present_applicationId && that_present_applicationId))
          return false;
        if (!this.applicationId.equals(that.applicationId))
          return false;
      }

      boolean this_present_accountId = true && this.isSetAccountId();
      boolean that_present_accountId = true && that.isSetAccountId();
      if (this_present_accountId || that_present_accountId) {
        if (!(this_present_accountId && that_present_accountId))
          return false;
        if (!this.accountId.equals(that.accountId))
          return false;
      }

      boolean this_present_scopes = true && this.isSetScopes();
      boolean that_present_scopes = true && that.isSetScopes();
      if (this_present_scopes || that_present_scopes) {
        if (!(this_present_scopes && that_present_scopes))
          return false;
        if (!this.scopes.equals(that.scopes))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(createToken_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      createToken_args typedOther = (createToken_args)other;

      lastComparison = Boolean.valueOf(isSetActApplicationSecret()).compareTo(typedOther.isSetActApplicationSecret());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetActApplicationSecret()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actApplicationSecret, typedOther.actApplicationSecret);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetApplicationId()).compareTo(typedOther.isSetApplicationId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplicationId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applicationId, typedOther.applicationId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAccountId()).compareTo(typedOther.isSetAccountId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccountId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountId, typedOther.accountId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetScopes()).compareTo(typedOther.isSetScopes());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetScopes()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scopes, typedOther.scopes);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // ACT_APPLICATION_SECRET
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.actApplicationSecret = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // APPLICATION_ID
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.applicationId = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // ACCOUNT_ID
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.accountId = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // SCOPES
            if (field.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                this.scopes = new ArrayList<String>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  String _elem2;
                  _elem2 = iprot.readString();
                  this.scopes.add(_elem2);
                }
                iprot.readListEnd();
              }
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.actApplicationSecret != null) {
        oprot.writeFieldBegin(ACT_APPLICATION_SECRET_FIELD_DESC);
        oprot.writeString(this.actApplicationSecret);
        oprot.writeFieldEnd();
      }
      if (this.applicationId != null) {
        oprot.writeFieldBegin(APPLICATION_ID_FIELD_DESC);
        oprot.writeString(this.applicationId);
        oprot.writeFieldEnd();
      }
      if (this.accountId != null) {
        oprot.writeFieldBegin(ACCOUNT_ID_FIELD_DESC);
        oprot.writeString(this.accountId);
        oprot.writeFieldEnd();
      }
      if (this.scopes != null) {
        oprot.writeFieldBegin(SCOPES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, this.scopes.size()));
          for (String _iter3 : this.scopes)
          {
            oprot.writeString(_iter3);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createToken_args(");
      boolean first = true;

      sb.append("actApplicationSecret:");
      if (this.actApplicationSecret == null) {
        sb.append("null");
      } else {
        sb.append(this.actApplicationSecret);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("applicationId:");
      if (this.applicationId == null) {
        sb.append("null");
      } else {
        sb.append(this.applicationId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("accountId:");
      if (this.accountId == null) {
        sb.append("null");
      } else {
        sb.append(this.accountId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("scopes:");
      if (this.scopes == null) {
        sb.append("null");
      } else {
        sb.append(this.scopes);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class createToken_result implements org.apache.thrift.TBase<createToken_result, createToken_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createToken_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_ONE_FIELD_DESC = new org.apache.thrift.protocol.TField("eOne", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField E_TWO_FIELD_DESC = new org.apache.thrift.protocol.TField("eTwo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    public everfeeds.thrift.domain.Token success;
    public everfeeds.thrift.error.Forbidden eOne;
    public everfeeds.thrift.error.NotFound eTwo;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E_ONE((short)1, "eOne"),
      E_TWO((short)2, "eTwo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E_ONE
            return E_ONE;
          case 2: // E_TWO
            return E_TWO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, everfeeds.thrift.domain.Token.class)));
      tmpMap.put(_Fields.E_ONE, new org.apache.thrift.meta_data.FieldMetaData("eOne", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_TWO, new org.apache.thrift.meta_data.FieldMetaData("eTwo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createToken_result.class, metaDataMap);
    }

    public createToken_result() {
    }

    public createToken_result(
      everfeeds.thrift.domain.Token success,
      everfeeds.thrift.error.Forbidden eOne,
      everfeeds.thrift.error.NotFound eTwo)
    {
      this();
      this.success = success;
      this.eOne = eOne;
      this.eTwo = eTwo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createToken_result(createToken_result other) {
      if (other.isSetSuccess()) {
        this.success = new everfeeds.thrift.domain.Token(other.success);
      }
      if (other.isSetEOne()) {
        this.eOne = new everfeeds.thrift.error.Forbidden(other.eOne);
      }
      if (other.isSetETwo()) {
        this.eTwo = new everfeeds.thrift.error.NotFound(other.eTwo);
      }
    }

    public createToken_result deepCopy() {
      return new createToken_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.eOne = null;
      this.eTwo = null;
    }

    public everfeeds.thrift.domain.Token getSuccess() {
      return this.success;
    }

    public createToken_result setSuccess(everfeeds.thrift.domain.Token success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public everfeeds.thrift.error.Forbidden getEOne() {
      return this.eOne;
    }

    public createToken_result setEOne(everfeeds.thrift.error.Forbidden eOne) {
      this.eOne = eOne;
      return this;
    }

    public void unsetEOne() {
      this.eOne = null;
    }

    /** Returns true if field eOne is set (has been assigned a value) and false otherwise */
    public boolean isSetEOne() {
      return this.eOne != null;
    }

    public void setEOneIsSet(boolean value) {
      if (!value) {
        this.eOne = null;
      }
    }

    public everfeeds.thrift.error.NotFound getETwo() {
      return this.eTwo;
    }

    public createToken_result setETwo(everfeeds.thrift.error.NotFound eTwo) {
      this.eTwo = eTwo;
      return this;
    }

    public void unsetETwo() {
      this.eTwo = null;
    }

    /** Returns true if field eTwo is set (has been assigned a value) and false otherwise */
    public boolean isSetETwo() {
      return this.eTwo != null;
    }

    public void setETwoIsSet(boolean value) {
      if (!value) {
        this.eTwo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((everfeeds.thrift.domain.Token)value);
        }
        break;

      case E_ONE:
        if (value == null) {
          unsetEOne();
        } else {
          setEOne((everfeeds.thrift.error.Forbidden)value);
        }
        break;

      case E_TWO:
        if (value == null) {
          unsetETwo();
        } else {
          setETwo((everfeeds.thrift.error.NotFound)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E_ONE:
        return getEOne();

      case E_TWO:
        return getETwo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E_ONE:
        return isSetEOne();
      case E_TWO:
        return isSetETwo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createToken_result)
        return this.equals((createToken_result)that);
      return false;
    }

    public boolean equals(createToken_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_eOne = true && this.isSetEOne();
      boolean that_present_eOne = true && that.isSetEOne();
      if (this_present_eOne || that_present_eOne) {
        if (!(this_present_eOne && that_present_eOne))
          return false;
        if (!this.eOne.equals(that.eOne))
          return false;
      }

      boolean this_present_eTwo = true && this.isSetETwo();
      boolean that_present_eTwo = true && that.isSetETwo();
      if (this_present_eTwo || that_present_eTwo) {
        if (!(this_present_eTwo && that_present_eTwo))
          return false;
        if (!this.eTwo.equals(that.eTwo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(createToken_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      createToken_result typedOther = (createToken_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEOne()).compareTo(typedOther.isSetEOne());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEOne()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eOne, typedOther.eOne);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetETwo()).compareTo(typedOther.isSetETwo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetETwo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eTwo, typedOther.eTwo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.success = new everfeeds.thrift.domain.Token();
              this.success.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E_ONE
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eOne = new everfeeds.thrift.error.Forbidden();
              this.eOne.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // E_TWO
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eTwo = new everfeeds.thrift.error.NotFound();
              this.eTwo.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetEOne()) {
        oprot.writeFieldBegin(E_ONE_FIELD_DESC);
        this.eOne.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetETwo()) {
        oprot.writeFieldBegin(E_TWO_FIELD_DESC);
        this.eTwo.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createToken_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eOne:");
      if (this.eOne == null) {
        sb.append("null");
      } else {
        sb.append(this.eOne);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eTwo:");
      if (this.eTwo == null) {
        sb.append("null");
      } else {
        sb.append(this.eTwo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class createAccessAndAccount_args implements org.apache.thrift.TBase<createAccessAndAccount_args, createAccessAndAccount_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createAccessAndAccount_args");

    private static final org.apache.thrift.protocol.TField ACT_APPLICATION_SECRET_FIELD_DESC = new org.apache.thrift.protocol.TField("actApplicationSecret", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ACCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("access", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ACCESS_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("accessToken", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField ACCESS_SECRET_FIELD_DESC = new org.apache.thrift.protocol.TField("accessSecret", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField ACCESS_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("accessParams", org.apache.thrift.protocol.TType.LIST, (short)5);

    public String actApplicationSecret;
    public everfeeds.thrift.domain.Access access;
    public String accessToken;
    public String accessSecret;
    public List<String> accessParams;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ACT_APPLICATION_SECRET((short)1, "actApplicationSecret"),
      ACCESS((short)2, "access"),
      ACCESS_TOKEN((short)3, "accessToken"),
      ACCESS_SECRET((short)4, "accessSecret"),
      ACCESS_PARAMS((short)5, "accessParams");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ACT_APPLICATION_SECRET
            return ACT_APPLICATION_SECRET;
          case 2: // ACCESS
            return ACCESS;
          case 3: // ACCESS_TOKEN
            return ACCESS_TOKEN;
          case 4: // ACCESS_SECRET
            return ACCESS_SECRET;
          case 5: // ACCESS_PARAMS
            return ACCESS_PARAMS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ACT_APPLICATION_SECRET, new org.apache.thrift.meta_data.FieldMetaData("actApplicationSecret", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "String")));
      tmpMap.put(_Fields.ACCESS, new org.apache.thrift.meta_data.FieldMetaData("access", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, everfeeds.thrift.domain.Access.class)));
      tmpMap.put(_Fields.ACCESS_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("accessToken", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "String")));
      tmpMap.put(_Fields.ACCESS_SECRET, new org.apache.thrift.meta_data.FieldMetaData("accessSecret", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "String")));
      tmpMap.put(_Fields.ACCESS_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("accessParams", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createAccessAndAccount_args.class, metaDataMap);
    }

    public createAccessAndAccount_args() {
    }

    public createAccessAndAccount_args(
      String actApplicationSecret,
      everfeeds.thrift.domain.Access access,
      String accessToken,
      String accessSecret,
      List<String> accessParams)
    {
      this();
      this.actApplicationSecret = actApplicationSecret;
      this.access = access;
      this.accessToken = accessToken;
      this.accessSecret = accessSecret;
      this.accessParams = accessParams;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createAccessAndAccount_args(createAccessAndAccount_args other) {
      if (other.isSetActApplicationSecret()) {
        this.actApplicationSecret = other.actApplicationSecret;
      }
      if (other.isSetAccess()) {
        this.access = new everfeeds.thrift.domain.Access(other.access);
      }
      if (other.isSetAccessToken()) {
        this.accessToken = other.accessToken;
      }
      if (other.isSetAccessSecret()) {
        this.accessSecret = other.accessSecret;
      }
      if (other.isSetAccessParams()) {
        List<String> __this__accessParams = new ArrayList<String>();
        for (String other_element : other.accessParams) {
          __this__accessParams.add(other_element);
        }
        this.accessParams = __this__accessParams;
      }
    }

    public createAccessAndAccount_args deepCopy() {
      return new createAccessAndAccount_args(this);
    }

    @Override
    public void clear() {
      this.actApplicationSecret = null;
      this.access = null;
      this.accessToken = null;
      this.accessSecret = null;
      this.accessParams = null;
    }

    public String getActApplicationSecret() {
      return this.actApplicationSecret;
    }

    public createAccessAndAccount_args setActApplicationSecret(String actApplicationSecret) {
      this.actApplicationSecret = actApplicationSecret;
      return this;
    }

    public void unsetActApplicationSecret() {
      this.actApplicationSecret = null;
    }

    /** Returns true if field actApplicationSecret is set (has been assigned a value) and false otherwise */
    public boolean isSetActApplicationSecret() {
      return this.actApplicationSecret != null;
    }

    public void setActApplicationSecretIsSet(boolean value) {
      if (!value) {
        this.actApplicationSecret = null;
      }
    }

    public everfeeds.thrift.domain.Access getAccess() {
      return this.access;
    }

    public createAccessAndAccount_args setAccess(everfeeds.thrift.domain.Access access) {
      this.access = access;
      return this;
    }

    public void unsetAccess() {
      this.access = null;
    }

    /** Returns true if field access is set (has been assigned a value) and false otherwise */
    public boolean isSetAccess() {
      return this.access != null;
    }

    public void setAccessIsSet(boolean value) {
      if (!value) {
        this.access = null;
      }
    }

    public String getAccessToken() {
      return this.accessToken;
    }

    public createAccessAndAccount_args setAccessToken(String accessToken) {
      this.accessToken = accessToken;
      return this;
    }

    public void unsetAccessToken() {
      this.accessToken = null;
    }

    /** Returns true if field accessToken is set (has been assigned a value) and false otherwise */
    public boolean isSetAccessToken() {
      return this.accessToken != null;
    }

    public void setAccessTokenIsSet(boolean value) {
      if (!value) {
        this.accessToken = null;
      }
    }

    public String getAccessSecret() {
      return this.accessSecret;
    }

    public createAccessAndAccount_args setAccessSecret(String accessSecret) {
      this.accessSecret = accessSecret;
      return this;
    }

    public void unsetAccessSecret() {
      this.accessSecret = null;
    }

    /** Returns true if field accessSecret is set (has been assigned a value) and false otherwise */
    public boolean isSetAccessSecret() {
      return this.accessSecret != null;
    }

    public void setAccessSecretIsSet(boolean value) {
      if (!value) {
        this.accessSecret = null;
      }
    }

    public int getAccessParamsSize() {
      return (this.accessParams == null) ? 0 : this.accessParams.size();
    }

    public java.util.Iterator<String> getAccessParamsIterator() {
      return (this.accessParams == null) ? null : this.accessParams.iterator();
    }

    public void addToAccessParams(String elem) {
      if (this.accessParams == null) {
        this.accessParams = new ArrayList<String>();
      }
      this.accessParams.add(elem);
    }

    public List<String> getAccessParams() {
      return this.accessParams;
    }

    public createAccessAndAccount_args setAccessParams(List<String> accessParams) {
      this.accessParams = accessParams;
      return this;
    }

    public void unsetAccessParams() {
      this.accessParams = null;
    }

    /** Returns true if field accessParams is set (has been assigned a value) and false otherwise */
    public boolean isSetAccessParams() {
      return this.accessParams != null;
    }

    public void setAccessParamsIsSet(boolean value) {
      if (!value) {
        this.accessParams = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ACT_APPLICATION_SECRET:
        if (value == null) {
          unsetActApplicationSecret();
        } else {
          setActApplicationSecret((String)value);
        }
        break;

      case ACCESS:
        if (value == null) {
          unsetAccess();
        } else {
          setAccess((everfeeds.thrift.domain.Access)value);
        }
        break;

      case ACCESS_TOKEN:
        if (value == null) {
          unsetAccessToken();
        } else {
          setAccessToken((String)value);
        }
        break;

      case ACCESS_SECRET:
        if (value == null) {
          unsetAccessSecret();
        } else {
          setAccessSecret((String)value);
        }
        break;

      case ACCESS_PARAMS:
        if (value == null) {
          unsetAccessParams();
        } else {
          setAccessParams((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ACT_APPLICATION_SECRET:
        return getActApplicationSecret();

      case ACCESS:
        return getAccess();

      case ACCESS_TOKEN:
        return getAccessToken();

      case ACCESS_SECRET:
        return getAccessSecret();

      case ACCESS_PARAMS:
        return getAccessParams();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ACT_APPLICATION_SECRET:
        return isSetActApplicationSecret();
      case ACCESS:
        return isSetAccess();
      case ACCESS_TOKEN:
        return isSetAccessToken();
      case ACCESS_SECRET:
        return isSetAccessSecret();
      case ACCESS_PARAMS:
        return isSetAccessParams();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createAccessAndAccount_args)
        return this.equals((createAccessAndAccount_args)that);
      return false;
    }

    public boolean equals(createAccessAndAccount_args that) {
      if (that == null)
        return false;

      boolean this_present_actApplicationSecret = true && this.isSetActApplicationSecret();
      boolean that_present_actApplicationSecret = true && that.isSetActApplicationSecret();
      if (this_present_actApplicationSecret || that_present_actApplicationSecret) {
        if (!(this_present_actApplicationSecret && that_present_actApplicationSecret))
          return false;
        if (!this.actApplicationSecret.equals(that.actApplicationSecret))
          return false;
      }

      boolean this_present_access = true && this.isSetAccess();
      boolean that_present_access = true && that.isSetAccess();
      if (this_present_access || that_present_access) {
        if (!(this_present_access && that_present_access))
          return false;
        if (!this.access.equals(that.access))
          return false;
      }

      boolean this_present_accessToken = true && this.isSetAccessToken();
      boolean that_present_accessToken = true && that.isSetAccessToken();
      if (this_present_accessToken || that_present_accessToken) {
        if (!(this_present_accessToken && that_present_accessToken))
          return false;
        if (!this.accessToken.equals(that.accessToken))
          return false;
      }

      boolean this_present_accessSecret = true && this.isSetAccessSecret();
      boolean that_present_accessSecret = true && that.isSetAccessSecret();
      if (this_present_accessSecret || that_present_accessSecret) {
        if (!(this_present_accessSecret && that_present_accessSecret))
          return false;
        if (!this.accessSecret.equals(that.accessSecret))
          return false;
      }

      boolean this_present_accessParams = true && this.isSetAccessParams();
      boolean that_present_accessParams = true && that.isSetAccessParams();
      if (this_present_accessParams || that_present_accessParams) {
        if (!(this_present_accessParams && that_present_accessParams))
          return false;
        if (!this.accessParams.equals(that.accessParams))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(createAccessAndAccount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      createAccessAndAccount_args typedOther = (createAccessAndAccount_args)other;

      lastComparison = Boolean.valueOf(isSetActApplicationSecret()).compareTo(typedOther.isSetActApplicationSecret());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetActApplicationSecret()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actApplicationSecret, typedOther.actApplicationSecret);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAccess()).compareTo(typedOther.isSetAccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.access, typedOther.access);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAccessToken()).compareTo(typedOther.isSetAccessToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccessToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accessToken, typedOther.accessToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAccessSecret()).compareTo(typedOther.isSetAccessSecret());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccessSecret()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accessSecret, typedOther.accessSecret);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAccessParams()).compareTo(typedOther.isSetAccessParams());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccessParams()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accessParams, typedOther.accessParams);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // ACT_APPLICATION_SECRET
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.actApplicationSecret = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // ACCESS
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.access = new everfeeds.thrift.domain.Access();
              this.access.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // ACCESS_TOKEN
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.accessToken = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // ACCESS_SECRET
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.accessSecret = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // ACCESS_PARAMS
            if (field.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list4 = iprot.readListBegin();
                this.accessParams = new ArrayList<String>(_list4.size);
                for (int _i5 = 0; _i5 < _list4.size; ++_i5)
                {
                  String _elem6;
                  _elem6 = iprot.readString();
                  this.accessParams.add(_elem6);
                }
                iprot.readListEnd();
              }
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.actApplicationSecret != null) {
        oprot.writeFieldBegin(ACT_APPLICATION_SECRET_FIELD_DESC);
        oprot.writeString(this.actApplicationSecret);
        oprot.writeFieldEnd();
      }
      if (this.access != null) {
        oprot.writeFieldBegin(ACCESS_FIELD_DESC);
        this.access.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.accessToken != null) {
        oprot.writeFieldBegin(ACCESS_TOKEN_FIELD_DESC);
        oprot.writeString(this.accessToken);
        oprot.writeFieldEnd();
      }
      if (this.accessSecret != null) {
        oprot.writeFieldBegin(ACCESS_SECRET_FIELD_DESC);
        oprot.writeString(this.accessSecret);
        oprot.writeFieldEnd();
      }
      if (this.accessParams != null) {
        oprot.writeFieldBegin(ACCESS_PARAMS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, this.accessParams.size()));
          for (String _iter7 : this.accessParams)
          {
            oprot.writeString(_iter7);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createAccessAndAccount_args(");
      boolean first = true;

      sb.append("actApplicationSecret:");
      if (this.actApplicationSecret == null) {
        sb.append("null");
      } else {
        sb.append(this.actApplicationSecret);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("access:");
      if (this.access == null) {
        sb.append("null");
      } else {
        sb.append(this.access);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("accessToken:");
      if (this.accessToken == null) {
        sb.append("null");
      } else {
        sb.append(this.accessToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("accessSecret:");
      if (this.accessSecret == null) {
        sb.append("null");
      } else {
        sb.append(this.accessSecret);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("accessParams:");
      if (this.accessParams == null) {
        sb.append("null");
      } else {
        sb.append(this.accessParams);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class createAccessAndAccount_result implements org.apache.thrift.TBase<createAccessAndAccount_result, createAccessAndAccount_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createAccessAndAccount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_ONE_FIELD_DESC = new org.apache.thrift.protocol.TField("eOne", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField E_TWO_FIELD_DESC = new org.apache.thrift.protocol.TField("eTwo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    public everfeeds.thrift.domain.Account success;
    public everfeeds.thrift.error.Forbidden eOne;
    public everfeeds.thrift.error.NotFound eTwo;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E_ONE((short)1, "eOne"),
      E_TWO((short)2, "eTwo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E_ONE
            return E_ONE;
          case 2: // E_TWO
            return E_TWO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, everfeeds.thrift.domain.Account.class)));
      tmpMap.put(_Fields.E_ONE, new org.apache.thrift.meta_data.FieldMetaData("eOne", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_TWO, new org.apache.thrift.meta_data.FieldMetaData("eTwo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createAccessAndAccount_result.class, metaDataMap);
    }

    public createAccessAndAccount_result() {
    }

    public createAccessAndAccount_result(
      everfeeds.thrift.domain.Account success,
      everfeeds.thrift.error.Forbidden eOne,
      everfeeds.thrift.error.NotFound eTwo)
    {
      this();
      this.success = success;
      this.eOne = eOne;
      this.eTwo = eTwo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createAccessAndAccount_result(createAccessAndAccount_result other) {
      if (other.isSetSuccess()) {
        this.success = new everfeeds.thrift.domain.Account(other.success);
      }
      if (other.isSetEOne()) {
        this.eOne = new everfeeds.thrift.error.Forbidden(other.eOne);
      }
      if (other.isSetETwo()) {
        this.eTwo = new everfeeds.thrift.error.NotFound(other.eTwo);
      }
    }

    public createAccessAndAccount_result deepCopy() {
      return new createAccessAndAccount_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.eOne = null;
      this.eTwo = null;
    }

    public everfeeds.thrift.domain.Account getSuccess() {
      return this.success;
    }

    public createAccessAndAccount_result setSuccess(everfeeds.thrift.domain.Account success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public everfeeds.thrift.error.Forbidden getEOne() {
      return this.eOne;
    }

    public createAccessAndAccount_result setEOne(everfeeds.thrift.error.Forbidden eOne) {
      this.eOne = eOne;
      return this;
    }

    public void unsetEOne() {
      this.eOne = null;
    }

    /** Returns true if field eOne is set (has been assigned a value) and false otherwise */
    public boolean isSetEOne() {
      return this.eOne != null;
    }

    public void setEOneIsSet(boolean value) {
      if (!value) {
        this.eOne = null;
      }
    }

    public everfeeds.thrift.error.NotFound getETwo() {
      return this.eTwo;
    }

    public createAccessAndAccount_result setETwo(everfeeds.thrift.error.NotFound eTwo) {
      this.eTwo = eTwo;
      return this;
    }

    public void unsetETwo() {
      this.eTwo = null;
    }

    /** Returns true if field eTwo is set (has been assigned a value) and false otherwise */
    public boolean isSetETwo() {
      return this.eTwo != null;
    }

    public void setETwoIsSet(boolean value) {
      if (!value) {
        this.eTwo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((everfeeds.thrift.domain.Account)value);
        }
        break;

      case E_ONE:
        if (value == null) {
          unsetEOne();
        } else {
          setEOne((everfeeds.thrift.error.Forbidden)value);
        }
        break;

      case E_TWO:
        if (value == null) {
          unsetETwo();
        } else {
          setETwo((everfeeds.thrift.error.NotFound)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E_ONE:
        return getEOne();

      case E_TWO:
        return getETwo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E_ONE:
        return isSetEOne();
      case E_TWO:
        return isSetETwo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createAccessAndAccount_result)
        return this.equals((createAccessAndAccount_result)that);
      return false;
    }

    public boolean equals(createAccessAndAccount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_eOne = true && this.isSetEOne();
      boolean that_present_eOne = true && that.isSetEOne();
      if (this_present_eOne || that_present_eOne) {
        if (!(this_present_eOne && that_present_eOne))
          return false;
        if (!this.eOne.equals(that.eOne))
          return false;
      }

      boolean this_present_eTwo = true && this.isSetETwo();
      boolean that_present_eTwo = true && that.isSetETwo();
      if (this_present_eTwo || that_present_eTwo) {
        if (!(this_present_eTwo && that_present_eTwo))
          return false;
        if (!this.eTwo.equals(that.eTwo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(createAccessAndAccount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      createAccessAndAccount_result typedOther = (createAccessAndAccount_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEOne()).compareTo(typedOther.isSetEOne());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEOne()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eOne, typedOther.eOne);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetETwo()).compareTo(typedOther.isSetETwo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetETwo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eTwo, typedOther.eTwo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.success = new everfeeds.thrift.domain.Account();
              this.success.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E_ONE
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eOne = new everfeeds.thrift.error.Forbidden();
              this.eOne.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // E_TWO
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eTwo = new everfeeds.thrift.error.NotFound();
              this.eTwo.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetEOne()) {
        oprot.writeFieldBegin(E_ONE_FIELD_DESC);
        this.eOne.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetETwo()) {
        oprot.writeFieldBegin(E_TWO_FIELD_DESC);
        this.eTwo.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createAccessAndAccount_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eOne:");
      if (this.eOne == null) {
        sb.append("null");
      } else {
        sb.append(this.eOne);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eTwo:");
      if (this.eTwo == null) {
        sb.append("null");
      } else {
        sb.append(this.eTwo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

}
