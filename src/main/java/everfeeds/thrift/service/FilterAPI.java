/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package everfeeds.thrift.service;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class FilterAPI {

  public interface Iface {

    public everfeeds.thrift.domain.Filter saveFilter(String token, everfeeds.thrift.domain.Filter filter) throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, org.apache.thrift.TException;

    public List<everfeeds.thrift.domain.Entry> getMash(String token, long splitDate, short page, short maxCount) throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, everfeeds.thrift.error.WrongArgument, org.apache.thrift.TException;

    public List<everfeeds.thrift.domain.Entry> getMashNew(String token, long splitDate, short maxCount) throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, everfeeds.thrift.error.WrongArgument, org.apache.thrift.TException;

    public List<everfeeds.thrift.domain.Entry> getFiltered(String token, everfeeds.thrift.domain.Filter filter, short page, short maxCount) throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, everfeeds.thrift.error.WrongArgument, org.apache.thrift.TException;

    public List<everfeeds.thrift.domain.Entry> getFilteredNew(String token, everfeeds.thrift.domain.Filter filter) throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, everfeeds.thrift.error.WrongArgument, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void saveFilter(String token, everfeeds.thrift.domain.Filter filter, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.saveFilter_call> resultHandler) throws org.apache.thrift.TException;

    public void getMash(String token, long splitDate, short page, short maxCount, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getMash_call> resultHandler) throws org.apache.thrift.TException;

    public void getMashNew(String token, long splitDate, short maxCount, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getMashNew_call> resultHandler) throws org.apache.thrift.TException;

    public void getFiltered(String token, everfeeds.thrift.domain.Filter filter, short page, short maxCount, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getFiltered_call> resultHandler) throws org.apache.thrift.TException;

    public void getFilteredNew(String token, everfeeds.thrift.domain.Filter filter, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getFilteredNew_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client implements org.apache.thrift.TServiceClient, Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      this(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected org.apache.thrift.protocol.TProtocol iprot_;
    protected org.apache.thrift.protocol.TProtocol oprot_;

    protected int seqid_;

    public org.apache.thrift.protocol.TProtocol getInputProtocol()
    {
      return this.iprot_;
    }

    public org.apache.thrift.protocol.TProtocol getOutputProtocol()
    {
      return this.oprot_;
    }

    public everfeeds.thrift.domain.Filter saveFilter(String token, everfeeds.thrift.domain.Filter filter) throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, org.apache.thrift.TException
    {
      send_saveFilter(token, filter);
      return recv_saveFilter();
    }

    public void send_saveFilter(String token, everfeeds.thrift.domain.Filter filter) throws org.apache.thrift.TException
    {
      oprot_.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveFilter", org.apache.thrift.protocol.TMessageType.CALL, ++seqid_));
      saveFilter_args args = new saveFilter_args();
      args.setToken(token);
      args.setFilter(filter);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public everfeeds.thrift.domain.Filter recv_saveFilter() throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot_.readMessageBegin();
      if (msg.type == org.apache.thrift.protocol.TMessageType.EXCEPTION) {
        org.apache.thrift.TApplicationException x = org.apache.thrift.TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.BAD_SEQUENCE_ID, "saveFilter failed: out of sequence response");
      }
      saveFilter_result result = new saveFilter_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.eF != null) {
        throw result.eF;
      }
      if (result.eE != null) {
        throw result.eE;
      }
      if (result.eTNF != null) {
        throw result.eTNF;
      }
      if (result.eNF != null) {
        throw result.eNF;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "saveFilter failed: unknown result");
    }

    public List<everfeeds.thrift.domain.Entry> getMash(String token, long splitDate, short page, short maxCount) throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, everfeeds.thrift.error.WrongArgument, org.apache.thrift.TException
    {
      send_getMash(token, splitDate, page, maxCount);
      return recv_getMash();
    }

    public void send_getMash(String token, long splitDate, short page, short maxCount) throws org.apache.thrift.TException
    {
      oprot_.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMash", org.apache.thrift.protocol.TMessageType.CALL, ++seqid_));
      getMash_args args = new getMash_args();
      args.setToken(token);
      args.setSplitDate(splitDate);
      args.setPage(page);
      args.setMaxCount(maxCount);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public List<everfeeds.thrift.domain.Entry> recv_getMash() throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, everfeeds.thrift.error.WrongArgument, org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot_.readMessageBegin();
      if (msg.type == org.apache.thrift.protocol.TMessageType.EXCEPTION) {
        org.apache.thrift.TApplicationException x = org.apache.thrift.TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.BAD_SEQUENCE_ID, "getMash failed: out of sequence response");
      }
      getMash_result result = new getMash_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.eF != null) {
        throw result.eF;
      }
      if (result.eE != null) {
        throw result.eE;
      }
      if (result.eTNF != null) {
        throw result.eTNF;
      }
      if (result.eNF != null) {
        throw result.eNF;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMash failed: unknown result");
    }

    public List<everfeeds.thrift.domain.Entry> getMashNew(String token, long splitDate, short maxCount) throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, everfeeds.thrift.error.WrongArgument, org.apache.thrift.TException
    {
      send_getMashNew(token, splitDate, maxCount);
      return recv_getMashNew();
    }

    public void send_getMashNew(String token, long splitDate, short maxCount) throws org.apache.thrift.TException
    {
      oprot_.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMashNew", org.apache.thrift.protocol.TMessageType.CALL, ++seqid_));
      getMashNew_args args = new getMashNew_args();
      args.setToken(token);
      args.setSplitDate(splitDate);
      args.setMaxCount(maxCount);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public List<everfeeds.thrift.domain.Entry> recv_getMashNew() throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, everfeeds.thrift.error.WrongArgument, org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot_.readMessageBegin();
      if (msg.type == org.apache.thrift.protocol.TMessageType.EXCEPTION) {
        org.apache.thrift.TApplicationException x = org.apache.thrift.TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.BAD_SEQUENCE_ID, "getMashNew failed: out of sequence response");
      }
      getMashNew_result result = new getMashNew_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.eF != null) {
        throw result.eF;
      }
      if (result.eE != null) {
        throw result.eE;
      }
      if (result.eTNF != null) {
        throw result.eTNF;
      }
      if (result.eNF != null) {
        throw result.eNF;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMashNew failed: unknown result");
    }

    public List<everfeeds.thrift.domain.Entry> getFiltered(String token, everfeeds.thrift.domain.Filter filter, short page, short maxCount) throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, everfeeds.thrift.error.WrongArgument, org.apache.thrift.TException
    {
      send_getFiltered(token, filter, page, maxCount);
      return recv_getFiltered();
    }

    public void send_getFiltered(String token, everfeeds.thrift.domain.Filter filter, short page, short maxCount) throws org.apache.thrift.TException
    {
      oprot_.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFiltered", org.apache.thrift.protocol.TMessageType.CALL, ++seqid_));
      getFiltered_args args = new getFiltered_args();
      args.setToken(token);
      args.setFilter(filter);
      args.setPage(page);
      args.setMaxCount(maxCount);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public List<everfeeds.thrift.domain.Entry> recv_getFiltered() throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, everfeeds.thrift.error.WrongArgument, org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot_.readMessageBegin();
      if (msg.type == org.apache.thrift.protocol.TMessageType.EXCEPTION) {
        org.apache.thrift.TApplicationException x = org.apache.thrift.TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.BAD_SEQUENCE_ID, "getFiltered failed: out of sequence response");
      }
      getFiltered_result result = new getFiltered_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.eF != null) {
        throw result.eF;
      }
      if (result.eE != null) {
        throw result.eE;
      }
      if (result.eTNF != null) {
        throw result.eTNF;
      }
      if (result.eNF != null) {
        throw result.eNF;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getFiltered failed: unknown result");
    }

    public List<everfeeds.thrift.domain.Entry> getFilteredNew(String token, everfeeds.thrift.domain.Filter filter) throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, everfeeds.thrift.error.WrongArgument, org.apache.thrift.TException
    {
      send_getFilteredNew(token, filter);
      return recv_getFilteredNew();
    }

    public void send_getFilteredNew(String token, everfeeds.thrift.domain.Filter filter) throws org.apache.thrift.TException
    {
      oprot_.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFilteredNew", org.apache.thrift.protocol.TMessageType.CALL, ++seqid_));
      getFilteredNew_args args = new getFilteredNew_args();
      args.setToken(token);
      args.setFilter(filter);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public List<everfeeds.thrift.domain.Entry> recv_getFilteredNew() throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, everfeeds.thrift.error.WrongArgument, org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot_.readMessageBegin();
      if (msg.type == org.apache.thrift.protocol.TMessageType.EXCEPTION) {
        org.apache.thrift.TApplicationException x = org.apache.thrift.TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.BAD_SEQUENCE_ID, "getFilteredNew failed: out of sequence response");
      }
      getFilteredNew_result result = new getFilteredNew_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.eF != null) {
        throw result.eF;
      }
      if (result.eE != null) {
        throw result.eE;
      }
      if (result.eTNF != null) {
        throw result.eTNF;
      }
      if (result.eNF != null) {
        throw result.eNF;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getFilteredNew failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void saveFilter(String token, everfeeds.thrift.domain.Filter filter, org.apache.thrift.async.AsyncMethodCallback<saveFilter_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saveFilter_call method_call = new saveFilter_call(token, filter, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class saveFilter_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String token;
      private everfeeds.thrift.domain.Filter filter;
      public saveFilter_call(String token, everfeeds.thrift.domain.Filter filter, org.apache.thrift.async.AsyncMethodCallback<saveFilter_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this.filter = filter;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveFilter", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saveFilter_args args = new saveFilter_args();
        args.setToken(token);
        args.setFilter(filter);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public everfeeds.thrift.domain.Filter getResult() throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_saveFilter();
      }
    }

    public void getMash(String token, long splitDate, short page, short maxCount, org.apache.thrift.async.AsyncMethodCallback<getMash_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMash_call method_call = new getMash_call(token, splitDate, page, maxCount, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class getMash_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String token;
      private long splitDate;
      private short page;
      private short maxCount;
      public getMash_call(String token, long splitDate, short page, short maxCount, org.apache.thrift.async.AsyncMethodCallback<getMash_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this.splitDate = splitDate;
        this.page = page;
        this.maxCount = maxCount;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMash", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMash_args args = new getMash_args();
        args.setToken(token);
        args.setSplitDate(splitDate);
        args.setPage(page);
        args.setMaxCount(maxCount);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<everfeeds.thrift.domain.Entry> getResult() throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, everfeeds.thrift.error.WrongArgument, org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMash();
      }
    }

    public void getMashNew(String token, long splitDate, short maxCount, org.apache.thrift.async.AsyncMethodCallback<getMashNew_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMashNew_call method_call = new getMashNew_call(token, splitDate, maxCount, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class getMashNew_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String token;
      private long splitDate;
      private short maxCount;
      public getMashNew_call(String token, long splitDate, short maxCount, org.apache.thrift.async.AsyncMethodCallback<getMashNew_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this.splitDate = splitDate;
        this.maxCount = maxCount;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMashNew", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMashNew_args args = new getMashNew_args();
        args.setToken(token);
        args.setSplitDate(splitDate);
        args.setMaxCount(maxCount);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<everfeeds.thrift.domain.Entry> getResult() throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, everfeeds.thrift.error.WrongArgument, org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMashNew();
      }
    }

    public void getFiltered(String token, everfeeds.thrift.domain.Filter filter, short page, short maxCount, org.apache.thrift.async.AsyncMethodCallback<getFiltered_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getFiltered_call method_call = new getFiltered_call(token, filter, page, maxCount, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class getFiltered_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String token;
      private everfeeds.thrift.domain.Filter filter;
      private short page;
      private short maxCount;
      public getFiltered_call(String token, everfeeds.thrift.domain.Filter filter, short page, short maxCount, org.apache.thrift.async.AsyncMethodCallback<getFiltered_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this.filter = filter;
        this.page = page;
        this.maxCount = maxCount;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFiltered", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getFiltered_args args = new getFiltered_args();
        args.setToken(token);
        args.setFilter(filter);
        args.setPage(page);
        args.setMaxCount(maxCount);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<everfeeds.thrift.domain.Entry> getResult() throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, everfeeds.thrift.error.WrongArgument, org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getFiltered();
      }
    }

    public void getFilteredNew(String token, everfeeds.thrift.domain.Filter filter, org.apache.thrift.async.AsyncMethodCallback<getFilteredNew_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getFilteredNew_call method_call = new getFilteredNew_call(token, filter, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class getFilteredNew_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String token;
      private everfeeds.thrift.domain.Filter filter;
      public getFilteredNew_call(String token, everfeeds.thrift.domain.Filter filter, org.apache.thrift.async.AsyncMethodCallback<getFilteredNew_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this.filter = filter;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFilteredNew", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getFilteredNew_args args = new getFilteredNew_args();
        args.setToken(token);
        args.setFilter(filter);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<everfeeds.thrift.domain.Entry> getResult() throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, everfeeds.thrift.error.WrongArgument, org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getFilteredNew();
      }
    }

  }

  public static class Processor implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(Iface iface)
    {
      iface_ = iface;
      processMap_.put("saveFilter", new saveFilter());
      processMap_.put("getMash", new getMash());
      processMap_.put("getMashNew", new getMashNew());
      processMap_.put("getFiltered", new getFiltered());
      processMap_.put("getFilteredNew", new getFilteredNew());
    }

    protected static interface ProcessFunction {
      public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException;
    }

    private Iface iface_;
    protected final HashMap<String,ProcessFunction> processMap_ = new HashMap<String,ProcessFunction>();

    public boolean process(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot.readMessageBegin();
      ProcessFunction fn = processMap_.get(msg.name);
      if (fn == null) {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, org.apache.thrift.protocol.TType.STRUCT);
        iprot.readMessageEnd();
        org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.UNKNOWN_METHOD, "Invalid method name: '"+msg.name+"'");
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(msg.name, org.apache.thrift.protocol.TMessageType.EXCEPTION, msg.seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return true;
      }
      fn.process(msg.seqid, iprot, oprot);
      return true;
    }

    private class saveFilter implements ProcessFunction {
      public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        saveFilter_args args = new saveFilter_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveFilter", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        saveFilter_result result = new saveFilter_result();
        try {
          result.success = iface_.saveFilter(args.token, args.filter);
        } catch (everfeeds.thrift.error.Forbidden eF) {
          result.eF = eF;
        } catch (everfeeds.thrift.error.TokenExpired eE) {
          result.eE = eE;
        } catch (everfeeds.thrift.error.TokenNotFound eTNF) {
          result.eTNF = eTNF;
        } catch (everfeeds.thrift.error.NotFound eNF) {
          result.eNF = eNF;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing saveFilter", th);
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, "Internal error processing saveFilter");
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveFilter", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveFilter", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getMash implements ProcessFunction {
      public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        getMash_args args = new getMash_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMash", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getMash_result result = new getMash_result();
        try {
          result.success = iface_.getMash(args.token, args.splitDate, args.page, args.maxCount);
        } catch (everfeeds.thrift.error.Forbidden eF) {
          result.eF = eF;
        } catch (everfeeds.thrift.error.TokenExpired eE) {
          result.eE = eE;
        } catch (everfeeds.thrift.error.TokenNotFound eTNF) {
          result.eTNF = eTNF;
        } catch (everfeeds.thrift.error.NotFound eNF) {
          result.eNF = eNF;
        } catch (everfeeds.thrift.error.WrongArgument e) {
          result.e = e;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing getMash", th);
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, "Internal error processing getMash");
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMash", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMash", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getMashNew implements ProcessFunction {
      public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        getMashNew_args args = new getMashNew_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMashNew", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getMashNew_result result = new getMashNew_result();
        try {
          result.success = iface_.getMashNew(args.token, args.splitDate, args.maxCount);
        } catch (everfeeds.thrift.error.Forbidden eF) {
          result.eF = eF;
        } catch (everfeeds.thrift.error.TokenExpired eE) {
          result.eE = eE;
        } catch (everfeeds.thrift.error.TokenNotFound eTNF) {
          result.eTNF = eTNF;
        } catch (everfeeds.thrift.error.NotFound eNF) {
          result.eNF = eNF;
        } catch (everfeeds.thrift.error.WrongArgument e) {
          result.e = e;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing getMashNew", th);
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, "Internal error processing getMashNew");
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMashNew", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMashNew", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getFiltered implements ProcessFunction {
      public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        getFiltered_args args = new getFiltered_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFiltered", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getFiltered_result result = new getFiltered_result();
        try {
          result.success = iface_.getFiltered(args.token, args.filter, args.page, args.maxCount);
        } catch (everfeeds.thrift.error.Forbidden eF) {
          result.eF = eF;
        } catch (everfeeds.thrift.error.TokenExpired eE) {
          result.eE = eE;
        } catch (everfeeds.thrift.error.TokenNotFound eTNF) {
          result.eTNF = eTNF;
        } catch (everfeeds.thrift.error.NotFound eNF) {
          result.eNF = eNF;
        } catch (everfeeds.thrift.error.WrongArgument e) {
          result.e = e;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing getFiltered", th);
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, "Internal error processing getFiltered");
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFiltered", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFiltered", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getFilteredNew implements ProcessFunction {
      public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        getFilteredNew_args args = new getFilteredNew_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFilteredNew", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getFilteredNew_result result = new getFilteredNew_result();
        try {
          result.success = iface_.getFilteredNew(args.token, args.filter);
        } catch (everfeeds.thrift.error.Forbidden eF) {
          result.eF = eF;
        } catch (everfeeds.thrift.error.TokenExpired eE) {
          result.eE = eE;
        } catch (everfeeds.thrift.error.TokenNotFound eTNF) {
          result.eTNF = eTNF;
        } catch (everfeeds.thrift.error.NotFound eNF) {
          result.eNF = eNF;
        } catch (everfeeds.thrift.error.WrongArgument e) {
          result.e = e;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing getFilteredNew", th);
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, "Internal error processing getFilteredNew");
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFilteredNew", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFilteredNew", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

  }

  public static class saveFilter_args implements org.apache.thrift.TBase<saveFilter_args, saveFilter_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveFilter_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField FILTER_FIELD_DESC = new org.apache.thrift.protocol.TField("filter", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    public String token;
    public everfeeds.thrift.domain.Filter filter;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token"),
      FILTER((short)2, "filter");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 2: // FILTER
            return FILTER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "String")));
      tmpMap.put(_Fields.FILTER, new org.apache.thrift.meta_data.FieldMetaData("filter", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, everfeeds.thrift.domain.Filter.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveFilter_args.class, metaDataMap);
    }

    public saveFilter_args() {
    }

    public saveFilter_args(
      String token,
      everfeeds.thrift.domain.Filter filter)
    {
      this();
      this.token = token;
      this.filter = filter;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveFilter_args(saveFilter_args other) {
      if (other.isSetToken()) {
        this.token = other.token;
      }
      if (other.isSetFilter()) {
        this.filter = new everfeeds.thrift.domain.Filter(other.filter);
      }
    }

    public saveFilter_args deepCopy() {
      return new saveFilter_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      this.filter = null;
    }

    public String getToken() {
      return this.token;
    }

    public saveFilter_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public everfeeds.thrift.domain.Filter getFilter() {
      return this.filter;
    }

    public saveFilter_args setFilter(everfeeds.thrift.domain.Filter filter) {
      this.filter = filter;
      return this;
    }

    public void unsetFilter() {
      this.filter = null;
    }

    /** Returns true if field filter is set (has been assigned a value) and false otherwise */
    public boolean isSetFilter() {
      return this.filter != null;
    }

    public void setFilterIsSet(boolean value) {
      if (!value) {
        this.filter = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case FILTER:
        if (value == null) {
          unsetFilter();
        } else {
          setFilter((everfeeds.thrift.domain.Filter)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case FILTER:
        return getFilter();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case FILTER:
        return isSetFilter();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveFilter_args)
        return this.equals((saveFilter_args)that);
      return false;
    }

    public boolean equals(saveFilter_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_filter = true && this.isSetFilter();
      boolean that_present_filter = true && that.isSetFilter();
      if (this_present_filter || that_present_filter) {
        if (!(this_present_filter && that_present_filter))
          return false;
        if (!this.filter.equals(that.filter))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(saveFilter_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      saveFilter_args typedOther = (saveFilter_args)other;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(typedOther.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, typedOther.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFilter()).compareTo(typedOther.isSetFilter());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFilter()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filter, typedOther.filter);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // TOKEN
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.token = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // FILTER
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.filter = new everfeeds.thrift.domain.Filter();
              this.filter.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.token != null) {
        oprot.writeFieldBegin(TOKEN_FIELD_DESC);
        oprot.writeString(this.token);
        oprot.writeFieldEnd();
      }
      if (this.filter != null) {
        oprot.writeFieldBegin(FILTER_FIELD_DESC);
        this.filter.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveFilter_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("filter:");
      if (this.filter == null) {
        sb.append("null");
      } else {
        sb.append(this.filter);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class saveFilter_result implements org.apache.thrift.TBase<saveFilter_result, saveFilter_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveFilter_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_F_FIELD_DESC = new org.apache.thrift.protocol.TField("eF", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField E_E_FIELD_DESC = new org.apache.thrift.protocol.TField("eE", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField E_TNF_FIELD_DESC = new org.apache.thrift.protocol.TField("eTNF", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField E_NF_FIELD_DESC = new org.apache.thrift.protocol.TField("eNF", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    public everfeeds.thrift.domain.Filter success;
    public everfeeds.thrift.error.Forbidden eF;
    public everfeeds.thrift.error.TokenExpired eE;
    public everfeeds.thrift.error.TokenNotFound eTNF;
    public everfeeds.thrift.error.NotFound eNF;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E_F((short)1, "eF"),
      E_E((short)2, "eE"),
      E_TNF((short)3, "eTNF"),
      E_NF((short)4, "eNF");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E_F
            return E_F;
          case 2: // E_E
            return E_E;
          case 3: // E_TNF
            return E_TNF;
          case 4: // E_NF
            return E_NF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, everfeeds.thrift.domain.Filter.class)));
      tmpMap.put(_Fields.E_F, new org.apache.thrift.meta_data.FieldMetaData("eF", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_E, new org.apache.thrift.meta_data.FieldMetaData("eE", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_TNF, new org.apache.thrift.meta_data.FieldMetaData("eTNF", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_NF, new org.apache.thrift.meta_data.FieldMetaData("eNF", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveFilter_result.class, metaDataMap);
    }

    public saveFilter_result() {
    }

    public saveFilter_result(
      everfeeds.thrift.domain.Filter success,
      everfeeds.thrift.error.Forbidden eF,
      everfeeds.thrift.error.TokenExpired eE,
      everfeeds.thrift.error.TokenNotFound eTNF,
      everfeeds.thrift.error.NotFound eNF)
    {
      this();
      this.success = success;
      this.eF = eF;
      this.eE = eE;
      this.eTNF = eTNF;
      this.eNF = eNF;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveFilter_result(saveFilter_result other) {
      if (other.isSetSuccess()) {
        this.success = new everfeeds.thrift.domain.Filter(other.success);
      }
      if (other.isSetEF()) {
        this.eF = new everfeeds.thrift.error.Forbidden(other.eF);
      }
      if (other.isSetEE()) {
        this.eE = new everfeeds.thrift.error.TokenExpired(other.eE);
      }
      if (other.isSetETNF()) {
        this.eTNF = new everfeeds.thrift.error.TokenNotFound(other.eTNF);
      }
      if (other.isSetENF()) {
        this.eNF = new everfeeds.thrift.error.NotFound(other.eNF);
      }
    }

    public saveFilter_result deepCopy() {
      return new saveFilter_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.eF = null;
      this.eE = null;
      this.eTNF = null;
      this.eNF = null;
    }

    public everfeeds.thrift.domain.Filter getSuccess() {
      return this.success;
    }

    public saveFilter_result setSuccess(everfeeds.thrift.domain.Filter success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public everfeeds.thrift.error.Forbidden getEF() {
      return this.eF;
    }

    public saveFilter_result setEF(everfeeds.thrift.error.Forbidden eF) {
      this.eF = eF;
      return this;
    }

    public void unsetEF() {
      this.eF = null;
    }

    /** Returns true if field eF is set (has been assigned a value) and false otherwise */
    public boolean isSetEF() {
      return this.eF != null;
    }

    public void setEFIsSet(boolean value) {
      if (!value) {
        this.eF = null;
      }
    }

    public everfeeds.thrift.error.TokenExpired getEE() {
      return this.eE;
    }

    public saveFilter_result setEE(everfeeds.thrift.error.TokenExpired eE) {
      this.eE = eE;
      return this;
    }

    public void unsetEE() {
      this.eE = null;
    }

    /** Returns true if field eE is set (has been assigned a value) and false otherwise */
    public boolean isSetEE() {
      return this.eE != null;
    }

    public void setEEIsSet(boolean value) {
      if (!value) {
        this.eE = null;
      }
    }

    public everfeeds.thrift.error.TokenNotFound getETNF() {
      return this.eTNF;
    }

    public saveFilter_result setETNF(everfeeds.thrift.error.TokenNotFound eTNF) {
      this.eTNF = eTNF;
      return this;
    }

    public void unsetETNF() {
      this.eTNF = null;
    }

    /** Returns true if field eTNF is set (has been assigned a value) and false otherwise */
    public boolean isSetETNF() {
      return this.eTNF != null;
    }

    public void setETNFIsSet(boolean value) {
      if (!value) {
        this.eTNF = null;
      }
    }

    public everfeeds.thrift.error.NotFound getENF() {
      return this.eNF;
    }

    public saveFilter_result setENF(everfeeds.thrift.error.NotFound eNF) {
      this.eNF = eNF;
      return this;
    }

    public void unsetENF() {
      this.eNF = null;
    }

    /** Returns true if field eNF is set (has been assigned a value) and false otherwise */
    public boolean isSetENF() {
      return this.eNF != null;
    }

    public void setENFIsSet(boolean value) {
      if (!value) {
        this.eNF = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((everfeeds.thrift.domain.Filter)value);
        }
        break;

      case E_F:
        if (value == null) {
          unsetEF();
        } else {
          setEF((everfeeds.thrift.error.Forbidden)value);
        }
        break;

      case E_E:
        if (value == null) {
          unsetEE();
        } else {
          setEE((everfeeds.thrift.error.TokenExpired)value);
        }
        break;

      case E_TNF:
        if (value == null) {
          unsetETNF();
        } else {
          setETNF((everfeeds.thrift.error.TokenNotFound)value);
        }
        break;

      case E_NF:
        if (value == null) {
          unsetENF();
        } else {
          setENF((everfeeds.thrift.error.NotFound)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E_F:
        return getEF();

      case E_E:
        return getEE();

      case E_TNF:
        return getETNF();

      case E_NF:
        return getENF();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E_F:
        return isSetEF();
      case E_E:
        return isSetEE();
      case E_TNF:
        return isSetETNF();
      case E_NF:
        return isSetENF();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveFilter_result)
        return this.equals((saveFilter_result)that);
      return false;
    }

    public boolean equals(saveFilter_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_eF = true && this.isSetEF();
      boolean that_present_eF = true && that.isSetEF();
      if (this_present_eF || that_present_eF) {
        if (!(this_present_eF && that_present_eF))
          return false;
        if (!this.eF.equals(that.eF))
          return false;
      }

      boolean this_present_eE = true && this.isSetEE();
      boolean that_present_eE = true && that.isSetEE();
      if (this_present_eE || that_present_eE) {
        if (!(this_present_eE && that_present_eE))
          return false;
        if (!this.eE.equals(that.eE))
          return false;
      }

      boolean this_present_eTNF = true && this.isSetETNF();
      boolean that_present_eTNF = true && that.isSetETNF();
      if (this_present_eTNF || that_present_eTNF) {
        if (!(this_present_eTNF && that_present_eTNF))
          return false;
        if (!this.eTNF.equals(that.eTNF))
          return false;
      }

      boolean this_present_eNF = true && this.isSetENF();
      boolean that_present_eNF = true && that.isSetENF();
      if (this_present_eNF || that_present_eNF) {
        if (!(this_present_eNF && that_present_eNF))
          return false;
        if (!this.eNF.equals(that.eNF))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(saveFilter_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      saveFilter_result typedOther = (saveFilter_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEF()).compareTo(typedOther.isSetEF());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEF()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eF, typedOther.eF);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEE()).compareTo(typedOther.isSetEE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eE, typedOther.eE);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetETNF()).compareTo(typedOther.isSetETNF());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetETNF()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eTNF, typedOther.eTNF);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetENF()).compareTo(typedOther.isSetENF());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetENF()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eNF, typedOther.eNF);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.success = new everfeeds.thrift.domain.Filter();
              this.success.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E_F
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eF = new everfeeds.thrift.error.Forbidden();
              this.eF.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // E_E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eE = new everfeeds.thrift.error.TokenExpired();
              this.eE.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // E_TNF
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eTNF = new everfeeds.thrift.error.TokenNotFound();
              this.eTNF.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // E_NF
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eNF = new everfeeds.thrift.error.NotFound();
              this.eNF.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetEF()) {
        oprot.writeFieldBegin(E_F_FIELD_DESC);
        this.eF.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetEE()) {
        oprot.writeFieldBegin(E_E_FIELD_DESC);
        this.eE.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetETNF()) {
        oprot.writeFieldBegin(E_TNF_FIELD_DESC);
        this.eTNF.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetENF()) {
        oprot.writeFieldBegin(E_NF_FIELD_DESC);
        this.eNF.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveFilter_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eF:");
      if (this.eF == null) {
        sb.append("null");
      } else {
        sb.append(this.eF);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eE:");
      if (this.eE == null) {
        sb.append("null");
      } else {
        sb.append(this.eE);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eTNF:");
      if (this.eTNF == null) {
        sb.append("null");
      } else {
        sb.append(this.eTNF);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eNF:");
      if (this.eNF == null) {
        sb.append("null");
      } else {
        sb.append(this.eNF);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getMash_args implements org.apache.thrift.TBase<getMash_args, getMash_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMash_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SPLIT_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("splitDate", org.apache.thrift.protocol.TType.I64, (short)10);
    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I16, (short)20);
    private static final org.apache.thrift.protocol.TField MAX_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("maxCount", org.apache.thrift.protocol.TType.I16, (short)30);

    public String token;
    public long splitDate;
    public short page;
    public short maxCount;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token"),
      SPLIT_DATE((short)10, "splitDate"),
      PAGE((short)20, "page"),
      MAX_COUNT((short)30, "maxCount");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 10: // SPLIT_DATE
            return SPLIT_DATE;
          case 20: // PAGE
            return PAGE;
          case 30: // MAX_COUNT
            return MAX_COUNT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SPLITDATE_ISSET_ID = 0;
    private static final int __PAGE_ISSET_ID = 1;
    private static final int __MAXCOUNT_ISSET_ID = 2;
    private BitSet __isset_bit_vector = new BitSet(3);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "String")));
      tmpMap.put(_Fields.SPLIT_DATE, new org.apache.thrift.meta_data.FieldMetaData("splitDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Timestamp")));
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
      tmpMap.put(_Fields.MAX_COUNT, new org.apache.thrift.meta_data.FieldMetaData("maxCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMash_args.class, metaDataMap);
    }

    public getMash_args() {
    }

    public getMash_args(
      String token,
      long splitDate,
      short page,
      short maxCount)
    {
      this();
      this.token = token;
      this.splitDate = splitDate;
      setSplitDateIsSet(true);
      this.page = page;
      setPageIsSet(true);
      this.maxCount = maxCount;
      setMaxCountIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMash_args(getMash_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetToken()) {
        this.token = other.token;
      }
      this.splitDate = other.splitDate;
      this.page = other.page;
      this.maxCount = other.maxCount;
    }

    public getMash_args deepCopy() {
      return new getMash_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      setSplitDateIsSet(false);
      this.splitDate = 0;
      setPageIsSet(false);
      this.page = 0;
      setMaxCountIsSet(false);
      this.maxCount = 0;
    }

    public String getToken() {
      return this.token;
    }

    public getMash_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public long getSplitDate() {
      return this.splitDate;
    }

    public getMash_args setSplitDate(long splitDate) {
      this.splitDate = splitDate;
      setSplitDateIsSet(true);
      return this;
    }

    public void unsetSplitDate() {
      __isset_bit_vector.clear(__SPLITDATE_ISSET_ID);
    }

    /** Returns true if field splitDate is set (has been assigned a value) and false otherwise */
    public boolean isSetSplitDate() {
      return __isset_bit_vector.get(__SPLITDATE_ISSET_ID);
    }

    public void setSplitDateIsSet(boolean value) {
      __isset_bit_vector.set(__SPLITDATE_ISSET_ID, value);
    }

    public short getPage() {
      return this.page;
    }

    public getMash_args setPage(short page) {
      this.page = page;
      setPageIsSet(true);
      return this;
    }

    public void unsetPage() {
      __isset_bit_vector.clear(__PAGE_ISSET_ID);
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return __isset_bit_vector.get(__PAGE_ISSET_ID);
    }

    public void setPageIsSet(boolean value) {
      __isset_bit_vector.set(__PAGE_ISSET_ID, value);
    }

    public short getMaxCount() {
      return this.maxCount;
    }

    public getMash_args setMaxCount(short maxCount) {
      this.maxCount = maxCount;
      setMaxCountIsSet(true);
      return this;
    }

    public void unsetMaxCount() {
      __isset_bit_vector.clear(__MAXCOUNT_ISSET_ID);
    }

    /** Returns true if field maxCount is set (has been assigned a value) and false otherwise */
    public boolean isSetMaxCount() {
      return __isset_bit_vector.get(__MAXCOUNT_ISSET_ID);
    }

    public void setMaxCountIsSet(boolean value) {
      __isset_bit_vector.set(__MAXCOUNT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case SPLIT_DATE:
        if (value == null) {
          unsetSplitDate();
        } else {
          setSplitDate((Long)value);
        }
        break;

      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((Short)value);
        }
        break;

      case MAX_COUNT:
        if (value == null) {
          unsetMaxCount();
        } else {
          setMaxCount((Short)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case SPLIT_DATE:
        return new Long(getSplitDate());

      case PAGE:
        return new Short(getPage());

      case MAX_COUNT:
        return new Short(getMaxCount());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case SPLIT_DATE:
        return isSetSplitDate();
      case PAGE:
        return isSetPage();
      case MAX_COUNT:
        return isSetMaxCount();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMash_args)
        return this.equals((getMash_args)that);
      return false;
    }

    public boolean equals(getMash_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_splitDate = true;
      boolean that_present_splitDate = true;
      if (this_present_splitDate || that_present_splitDate) {
        if (!(this_present_splitDate && that_present_splitDate))
          return false;
        if (this.splitDate != that.splitDate)
          return false;
      }

      boolean this_present_page = true;
      boolean that_present_page = true;
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (this.page != that.page)
          return false;
      }

      boolean this_present_maxCount = true;
      boolean that_present_maxCount = true;
      if (this_present_maxCount || that_present_maxCount) {
        if (!(this_present_maxCount && that_present_maxCount))
          return false;
        if (this.maxCount != that.maxCount)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getMash_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getMash_args typedOther = (getMash_args)other;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(typedOther.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, typedOther.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSplitDate()).compareTo(typedOther.isSetSplitDate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSplitDate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.splitDate, typedOther.splitDate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPage()).compareTo(typedOther.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, typedOther.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMaxCount()).compareTo(typedOther.isSetMaxCount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMaxCount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxCount, typedOther.maxCount);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // TOKEN
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.token = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 10: // SPLIT_DATE
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.splitDate = iprot.readI64();
              setSplitDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 20: // PAGE
            if (field.type == org.apache.thrift.protocol.TType.I16) {
              this.page = iprot.readI16();
              setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 30: // MAX_COUNT
            if (field.type == org.apache.thrift.protocol.TType.I16) {
              this.maxCount = iprot.readI16();
              setMaxCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.token != null) {
        oprot.writeFieldBegin(TOKEN_FIELD_DESC);
        oprot.writeString(this.token);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SPLIT_DATE_FIELD_DESC);
      oprot.writeI64(this.splitDate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI16(this.page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_COUNT_FIELD_DESC);
      oprot.writeI16(this.maxCount);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMash_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("splitDate:");
      sb.append(this.splitDate);
      first = false;
      if (!first) sb.append(", ");
      sb.append("page:");
      sb.append(this.page);
      first = false;
      if (!first) sb.append(", ");
      sb.append("maxCount:");
      sb.append(this.maxCount);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getMash_result implements org.apache.thrift.TBase<getMash_result, getMash_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMash_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_F_FIELD_DESC = new org.apache.thrift.protocol.TField("eF", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField E_E_FIELD_DESC = new org.apache.thrift.protocol.TField("eE", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField E_TNF_FIELD_DESC = new org.apache.thrift.protocol.TField("eTNF", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField E_NF_FIELD_DESC = new org.apache.thrift.protocol.TField("eNF", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)5);

    public List<everfeeds.thrift.domain.Entry> success;
    public everfeeds.thrift.error.Forbidden eF;
    public everfeeds.thrift.error.TokenExpired eE;
    public everfeeds.thrift.error.TokenNotFound eTNF;
    public everfeeds.thrift.error.NotFound eNF;
    public everfeeds.thrift.error.WrongArgument e;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E_F((short)1, "eF"),
      E_E((short)2, "eE"),
      E_TNF((short)3, "eTNF"),
      E_NF((short)4, "eNF"),
      E((short)5, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E_F
            return E_F;
          case 2: // E_E
            return E_E;
          case 3: // E_TNF
            return E_TNF;
          case 4: // E_NF
            return E_NF;
          case 5: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, everfeeds.thrift.domain.Entry.class))));
      tmpMap.put(_Fields.E_F, new org.apache.thrift.meta_data.FieldMetaData("eF", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_E, new org.apache.thrift.meta_data.FieldMetaData("eE", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_TNF, new org.apache.thrift.meta_data.FieldMetaData("eTNF", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_NF, new org.apache.thrift.meta_data.FieldMetaData("eNF", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMash_result.class, metaDataMap);
    }

    public getMash_result() {
    }

    public getMash_result(
      List<everfeeds.thrift.domain.Entry> success,
      everfeeds.thrift.error.Forbidden eF,
      everfeeds.thrift.error.TokenExpired eE,
      everfeeds.thrift.error.TokenNotFound eTNF,
      everfeeds.thrift.error.NotFound eNF,
      everfeeds.thrift.error.WrongArgument e)
    {
      this();
      this.success = success;
      this.eF = eF;
      this.eE = eE;
      this.eTNF = eTNF;
      this.eNF = eNF;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMash_result(getMash_result other) {
      if (other.isSetSuccess()) {
        List<everfeeds.thrift.domain.Entry> __this__success = new ArrayList<everfeeds.thrift.domain.Entry>();
        for (everfeeds.thrift.domain.Entry other_element : other.success) {
          __this__success.add(new everfeeds.thrift.domain.Entry(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetEF()) {
        this.eF = new everfeeds.thrift.error.Forbidden(other.eF);
      }
      if (other.isSetEE()) {
        this.eE = new everfeeds.thrift.error.TokenExpired(other.eE);
      }
      if (other.isSetETNF()) {
        this.eTNF = new everfeeds.thrift.error.TokenNotFound(other.eTNF);
      }
      if (other.isSetENF()) {
        this.eNF = new everfeeds.thrift.error.NotFound(other.eNF);
      }
      if (other.isSetE()) {
        this.e = new everfeeds.thrift.error.WrongArgument(other.e);
      }
    }

    public getMash_result deepCopy() {
      return new getMash_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.eF = null;
      this.eE = null;
      this.eTNF = null;
      this.eNF = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<everfeeds.thrift.domain.Entry> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(everfeeds.thrift.domain.Entry elem) {
      if (this.success == null) {
        this.success = new ArrayList<everfeeds.thrift.domain.Entry>();
      }
      this.success.add(elem);
    }

    public List<everfeeds.thrift.domain.Entry> getSuccess() {
      return this.success;
    }

    public getMash_result setSuccess(List<everfeeds.thrift.domain.Entry> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public everfeeds.thrift.error.Forbidden getEF() {
      return this.eF;
    }

    public getMash_result setEF(everfeeds.thrift.error.Forbidden eF) {
      this.eF = eF;
      return this;
    }

    public void unsetEF() {
      this.eF = null;
    }

    /** Returns true if field eF is set (has been assigned a value) and false otherwise */
    public boolean isSetEF() {
      return this.eF != null;
    }

    public void setEFIsSet(boolean value) {
      if (!value) {
        this.eF = null;
      }
    }

    public everfeeds.thrift.error.TokenExpired getEE() {
      return this.eE;
    }

    public getMash_result setEE(everfeeds.thrift.error.TokenExpired eE) {
      this.eE = eE;
      return this;
    }

    public void unsetEE() {
      this.eE = null;
    }

    /** Returns true if field eE is set (has been assigned a value) and false otherwise */
    public boolean isSetEE() {
      return this.eE != null;
    }

    public void setEEIsSet(boolean value) {
      if (!value) {
        this.eE = null;
      }
    }

    public everfeeds.thrift.error.TokenNotFound getETNF() {
      return this.eTNF;
    }

    public getMash_result setETNF(everfeeds.thrift.error.TokenNotFound eTNF) {
      this.eTNF = eTNF;
      return this;
    }

    public void unsetETNF() {
      this.eTNF = null;
    }

    /** Returns true if field eTNF is set (has been assigned a value) and false otherwise */
    public boolean isSetETNF() {
      return this.eTNF != null;
    }

    public void setETNFIsSet(boolean value) {
      if (!value) {
        this.eTNF = null;
      }
    }

    public everfeeds.thrift.error.NotFound getENF() {
      return this.eNF;
    }

    public getMash_result setENF(everfeeds.thrift.error.NotFound eNF) {
      this.eNF = eNF;
      return this;
    }

    public void unsetENF() {
      this.eNF = null;
    }

    /** Returns true if field eNF is set (has been assigned a value) and false otherwise */
    public boolean isSetENF() {
      return this.eNF != null;
    }

    public void setENFIsSet(boolean value) {
      if (!value) {
        this.eNF = null;
      }
    }

    public everfeeds.thrift.error.WrongArgument getE() {
      return this.e;
    }

    public getMash_result setE(everfeeds.thrift.error.WrongArgument e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<everfeeds.thrift.domain.Entry>)value);
        }
        break;

      case E_F:
        if (value == null) {
          unsetEF();
        } else {
          setEF((everfeeds.thrift.error.Forbidden)value);
        }
        break;

      case E_E:
        if (value == null) {
          unsetEE();
        } else {
          setEE((everfeeds.thrift.error.TokenExpired)value);
        }
        break;

      case E_TNF:
        if (value == null) {
          unsetETNF();
        } else {
          setETNF((everfeeds.thrift.error.TokenNotFound)value);
        }
        break;

      case E_NF:
        if (value == null) {
          unsetENF();
        } else {
          setENF((everfeeds.thrift.error.NotFound)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((everfeeds.thrift.error.WrongArgument)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E_F:
        return getEF();

      case E_E:
        return getEE();

      case E_TNF:
        return getETNF();

      case E_NF:
        return getENF();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E_F:
        return isSetEF();
      case E_E:
        return isSetEE();
      case E_TNF:
        return isSetETNF();
      case E_NF:
        return isSetENF();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMash_result)
        return this.equals((getMash_result)that);
      return false;
    }

    public boolean equals(getMash_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_eF = true && this.isSetEF();
      boolean that_present_eF = true && that.isSetEF();
      if (this_present_eF || that_present_eF) {
        if (!(this_present_eF && that_present_eF))
          return false;
        if (!this.eF.equals(that.eF))
          return false;
      }

      boolean this_present_eE = true && this.isSetEE();
      boolean that_present_eE = true && that.isSetEE();
      if (this_present_eE || that_present_eE) {
        if (!(this_present_eE && that_present_eE))
          return false;
        if (!this.eE.equals(that.eE))
          return false;
      }

      boolean this_present_eTNF = true && this.isSetETNF();
      boolean that_present_eTNF = true && that.isSetETNF();
      if (this_present_eTNF || that_present_eTNF) {
        if (!(this_present_eTNF && that_present_eTNF))
          return false;
        if (!this.eTNF.equals(that.eTNF))
          return false;
      }

      boolean this_present_eNF = true && this.isSetENF();
      boolean that_present_eNF = true && that.isSetENF();
      if (this_present_eNF || that_present_eNF) {
        if (!(this_present_eNF && that_present_eNF))
          return false;
        if (!this.eNF.equals(that.eNF))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getMash_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getMash_result typedOther = (getMash_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEF()).compareTo(typedOther.isSetEF());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEF()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eF, typedOther.eF);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEE()).compareTo(typedOther.isSetEE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eE, typedOther.eE);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetETNF()).compareTo(typedOther.isSetETNF());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetETNF()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eTNF, typedOther.eTNF);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetENF()).compareTo(typedOther.isSetENF());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetENF()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eNF, typedOther.eNF);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                this.success = new ArrayList<everfeeds.thrift.domain.Entry>(_list32.size);
                for (int _i33 = 0; _i33 < _list32.size; ++_i33)
                {
                  everfeeds.thrift.domain.Entry _elem34;
                  _elem34 = new everfeeds.thrift.domain.Entry();
                  _elem34.read(iprot);
                  this.success.add(_elem34);
                }
                iprot.readListEnd();
              }
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E_F
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eF = new everfeeds.thrift.error.Forbidden();
              this.eF.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // E_E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eE = new everfeeds.thrift.error.TokenExpired();
              this.eE.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // E_TNF
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eTNF = new everfeeds.thrift.error.TokenNotFound();
              this.eTNF.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // E_NF
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eNF = new everfeeds.thrift.error.NotFound();
              this.eNF.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new everfeeds.thrift.error.WrongArgument();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, this.success.size()));
          for (everfeeds.thrift.domain.Entry _iter35 : this.success)
          {
            _iter35.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetEF()) {
        oprot.writeFieldBegin(E_F_FIELD_DESC);
        this.eF.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetEE()) {
        oprot.writeFieldBegin(E_E_FIELD_DESC);
        this.eE.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetETNF()) {
        oprot.writeFieldBegin(E_TNF_FIELD_DESC);
        this.eTNF.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetENF()) {
        oprot.writeFieldBegin(E_NF_FIELD_DESC);
        this.eNF.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMash_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eF:");
      if (this.eF == null) {
        sb.append("null");
      } else {
        sb.append(this.eF);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eE:");
      if (this.eE == null) {
        sb.append("null");
      } else {
        sb.append(this.eE);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eTNF:");
      if (this.eTNF == null) {
        sb.append("null");
      } else {
        sb.append(this.eTNF);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eNF:");
      if (this.eNF == null) {
        sb.append("null");
      } else {
        sb.append(this.eNF);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getMashNew_args implements org.apache.thrift.TBase<getMashNew_args, getMashNew_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMashNew_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SPLIT_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("splitDate", org.apache.thrift.protocol.TType.I64, (short)10);
    private static final org.apache.thrift.protocol.TField MAX_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("maxCount", org.apache.thrift.protocol.TType.I16, (short)20);

    public String token;
    public long splitDate;
    public short maxCount;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token"),
      SPLIT_DATE((short)10, "splitDate"),
      MAX_COUNT((short)20, "maxCount");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 10: // SPLIT_DATE
            return SPLIT_DATE;
          case 20: // MAX_COUNT
            return MAX_COUNT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SPLITDATE_ISSET_ID = 0;
    private static final int __MAXCOUNT_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "String")));
      tmpMap.put(_Fields.SPLIT_DATE, new org.apache.thrift.meta_data.FieldMetaData("splitDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Timestamp")));
      tmpMap.put(_Fields.MAX_COUNT, new org.apache.thrift.meta_data.FieldMetaData("maxCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMashNew_args.class, metaDataMap);
    }

    public getMashNew_args() {
    }

    public getMashNew_args(
      String token,
      long splitDate,
      short maxCount)
    {
      this();
      this.token = token;
      this.splitDate = splitDate;
      setSplitDateIsSet(true);
      this.maxCount = maxCount;
      setMaxCountIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMashNew_args(getMashNew_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetToken()) {
        this.token = other.token;
      }
      this.splitDate = other.splitDate;
      this.maxCount = other.maxCount;
    }

    public getMashNew_args deepCopy() {
      return new getMashNew_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      setSplitDateIsSet(false);
      this.splitDate = 0;
      setMaxCountIsSet(false);
      this.maxCount = 0;
    }

    public String getToken() {
      return this.token;
    }

    public getMashNew_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public long getSplitDate() {
      return this.splitDate;
    }

    public getMashNew_args setSplitDate(long splitDate) {
      this.splitDate = splitDate;
      setSplitDateIsSet(true);
      return this;
    }

    public void unsetSplitDate() {
      __isset_bit_vector.clear(__SPLITDATE_ISSET_ID);
    }

    /** Returns true if field splitDate is set (has been assigned a value) and false otherwise */
    public boolean isSetSplitDate() {
      return __isset_bit_vector.get(__SPLITDATE_ISSET_ID);
    }

    public void setSplitDateIsSet(boolean value) {
      __isset_bit_vector.set(__SPLITDATE_ISSET_ID, value);
    }

    public short getMaxCount() {
      return this.maxCount;
    }

    public getMashNew_args setMaxCount(short maxCount) {
      this.maxCount = maxCount;
      setMaxCountIsSet(true);
      return this;
    }

    public void unsetMaxCount() {
      __isset_bit_vector.clear(__MAXCOUNT_ISSET_ID);
    }

    /** Returns true if field maxCount is set (has been assigned a value) and false otherwise */
    public boolean isSetMaxCount() {
      return __isset_bit_vector.get(__MAXCOUNT_ISSET_ID);
    }

    public void setMaxCountIsSet(boolean value) {
      __isset_bit_vector.set(__MAXCOUNT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case SPLIT_DATE:
        if (value == null) {
          unsetSplitDate();
        } else {
          setSplitDate((Long)value);
        }
        break;

      case MAX_COUNT:
        if (value == null) {
          unsetMaxCount();
        } else {
          setMaxCount((Short)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case SPLIT_DATE:
        return new Long(getSplitDate());

      case MAX_COUNT:
        return new Short(getMaxCount());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case SPLIT_DATE:
        return isSetSplitDate();
      case MAX_COUNT:
        return isSetMaxCount();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMashNew_args)
        return this.equals((getMashNew_args)that);
      return false;
    }

    public boolean equals(getMashNew_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_splitDate = true;
      boolean that_present_splitDate = true;
      if (this_present_splitDate || that_present_splitDate) {
        if (!(this_present_splitDate && that_present_splitDate))
          return false;
        if (this.splitDate != that.splitDate)
          return false;
      }

      boolean this_present_maxCount = true;
      boolean that_present_maxCount = true;
      if (this_present_maxCount || that_present_maxCount) {
        if (!(this_present_maxCount && that_present_maxCount))
          return false;
        if (this.maxCount != that.maxCount)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getMashNew_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getMashNew_args typedOther = (getMashNew_args)other;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(typedOther.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, typedOther.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSplitDate()).compareTo(typedOther.isSetSplitDate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSplitDate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.splitDate, typedOther.splitDate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMaxCount()).compareTo(typedOther.isSetMaxCount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMaxCount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxCount, typedOther.maxCount);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // TOKEN
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.token = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 10: // SPLIT_DATE
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.splitDate = iprot.readI64();
              setSplitDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 20: // MAX_COUNT
            if (field.type == org.apache.thrift.protocol.TType.I16) {
              this.maxCount = iprot.readI16();
              setMaxCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.token != null) {
        oprot.writeFieldBegin(TOKEN_FIELD_DESC);
        oprot.writeString(this.token);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SPLIT_DATE_FIELD_DESC);
      oprot.writeI64(this.splitDate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_COUNT_FIELD_DESC);
      oprot.writeI16(this.maxCount);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMashNew_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("splitDate:");
      sb.append(this.splitDate);
      first = false;
      if (!first) sb.append(", ");
      sb.append("maxCount:");
      sb.append(this.maxCount);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getMashNew_result implements org.apache.thrift.TBase<getMashNew_result, getMashNew_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMashNew_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_F_FIELD_DESC = new org.apache.thrift.protocol.TField("eF", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField E_E_FIELD_DESC = new org.apache.thrift.protocol.TField("eE", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField E_TNF_FIELD_DESC = new org.apache.thrift.protocol.TField("eTNF", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField E_NF_FIELD_DESC = new org.apache.thrift.protocol.TField("eNF", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)5);

    public List<everfeeds.thrift.domain.Entry> success;
    public everfeeds.thrift.error.Forbidden eF;
    public everfeeds.thrift.error.TokenExpired eE;
    public everfeeds.thrift.error.TokenNotFound eTNF;
    public everfeeds.thrift.error.NotFound eNF;
    public everfeeds.thrift.error.WrongArgument e;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E_F((short)1, "eF"),
      E_E((short)2, "eE"),
      E_TNF((short)3, "eTNF"),
      E_NF((short)4, "eNF"),
      E((short)5, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E_F
            return E_F;
          case 2: // E_E
            return E_E;
          case 3: // E_TNF
            return E_TNF;
          case 4: // E_NF
            return E_NF;
          case 5: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, everfeeds.thrift.domain.Entry.class))));
      tmpMap.put(_Fields.E_F, new org.apache.thrift.meta_data.FieldMetaData("eF", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_E, new org.apache.thrift.meta_data.FieldMetaData("eE", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_TNF, new org.apache.thrift.meta_data.FieldMetaData("eTNF", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_NF, new org.apache.thrift.meta_data.FieldMetaData("eNF", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMashNew_result.class, metaDataMap);
    }

    public getMashNew_result() {
    }

    public getMashNew_result(
      List<everfeeds.thrift.domain.Entry> success,
      everfeeds.thrift.error.Forbidden eF,
      everfeeds.thrift.error.TokenExpired eE,
      everfeeds.thrift.error.TokenNotFound eTNF,
      everfeeds.thrift.error.NotFound eNF,
      everfeeds.thrift.error.WrongArgument e)
    {
      this();
      this.success = success;
      this.eF = eF;
      this.eE = eE;
      this.eTNF = eTNF;
      this.eNF = eNF;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMashNew_result(getMashNew_result other) {
      if (other.isSetSuccess()) {
        List<everfeeds.thrift.domain.Entry> __this__success = new ArrayList<everfeeds.thrift.domain.Entry>();
        for (everfeeds.thrift.domain.Entry other_element : other.success) {
          __this__success.add(new everfeeds.thrift.domain.Entry(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetEF()) {
        this.eF = new everfeeds.thrift.error.Forbidden(other.eF);
      }
      if (other.isSetEE()) {
        this.eE = new everfeeds.thrift.error.TokenExpired(other.eE);
      }
      if (other.isSetETNF()) {
        this.eTNF = new everfeeds.thrift.error.TokenNotFound(other.eTNF);
      }
      if (other.isSetENF()) {
        this.eNF = new everfeeds.thrift.error.NotFound(other.eNF);
      }
      if (other.isSetE()) {
        this.e = new everfeeds.thrift.error.WrongArgument(other.e);
      }
    }

    public getMashNew_result deepCopy() {
      return new getMashNew_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.eF = null;
      this.eE = null;
      this.eTNF = null;
      this.eNF = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<everfeeds.thrift.domain.Entry> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(everfeeds.thrift.domain.Entry elem) {
      if (this.success == null) {
        this.success = new ArrayList<everfeeds.thrift.domain.Entry>();
      }
      this.success.add(elem);
    }

    public List<everfeeds.thrift.domain.Entry> getSuccess() {
      return this.success;
    }

    public getMashNew_result setSuccess(List<everfeeds.thrift.domain.Entry> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public everfeeds.thrift.error.Forbidden getEF() {
      return this.eF;
    }

    public getMashNew_result setEF(everfeeds.thrift.error.Forbidden eF) {
      this.eF = eF;
      return this;
    }

    public void unsetEF() {
      this.eF = null;
    }

    /** Returns true if field eF is set (has been assigned a value) and false otherwise */
    public boolean isSetEF() {
      return this.eF != null;
    }

    public void setEFIsSet(boolean value) {
      if (!value) {
        this.eF = null;
      }
    }

    public everfeeds.thrift.error.TokenExpired getEE() {
      return this.eE;
    }

    public getMashNew_result setEE(everfeeds.thrift.error.TokenExpired eE) {
      this.eE = eE;
      return this;
    }

    public void unsetEE() {
      this.eE = null;
    }

    /** Returns true if field eE is set (has been assigned a value) and false otherwise */
    public boolean isSetEE() {
      return this.eE != null;
    }

    public void setEEIsSet(boolean value) {
      if (!value) {
        this.eE = null;
      }
    }

    public everfeeds.thrift.error.TokenNotFound getETNF() {
      return this.eTNF;
    }

    public getMashNew_result setETNF(everfeeds.thrift.error.TokenNotFound eTNF) {
      this.eTNF = eTNF;
      return this;
    }

    public void unsetETNF() {
      this.eTNF = null;
    }

    /** Returns true if field eTNF is set (has been assigned a value) and false otherwise */
    public boolean isSetETNF() {
      return this.eTNF != null;
    }

    public void setETNFIsSet(boolean value) {
      if (!value) {
        this.eTNF = null;
      }
    }

    public everfeeds.thrift.error.NotFound getENF() {
      return this.eNF;
    }

    public getMashNew_result setENF(everfeeds.thrift.error.NotFound eNF) {
      this.eNF = eNF;
      return this;
    }

    public void unsetENF() {
      this.eNF = null;
    }

    /** Returns true if field eNF is set (has been assigned a value) and false otherwise */
    public boolean isSetENF() {
      return this.eNF != null;
    }

    public void setENFIsSet(boolean value) {
      if (!value) {
        this.eNF = null;
      }
    }

    public everfeeds.thrift.error.WrongArgument getE() {
      return this.e;
    }

    public getMashNew_result setE(everfeeds.thrift.error.WrongArgument e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<everfeeds.thrift.domain.Entry>)value);
        }
        break;

      case E_F:
        if (value == null) {
          unsetEF();
        } else {
          setEF((everfeeds.thrift.error.Forbidden)value);
        }
        break;

      case E_E:
        if (value == null) {
          unsetEE();
        } else {
          setEE((everfeeds.thrift.error.TokenExpired)value);
        }
        break;

      case E_TNF:
        if (value == null) {
          unsetETNF();
        } else {
          setETNF((everfeeds.thrift.error.TokenNotFound)value);
        }
        break;

      case E_NF:
        if (value == null) {
          unsetENF();
        } else {
          setENF((everfeeds.thrift.error.NotFound)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((everfeeds.thrift.error.WrongArgument)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E_F:
        return getEF();

      case E_E:
        return getEE();

      case E_TNF:
        return getETNF();

      case E_NF:
        return getENF();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E_F:
        return isSetEF();
      case E_E:
        return isSetEE();
      case E_TNF:
        return isSetETNF();
      case E_NF:
        return isSetENF();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMashNew_result)
        return this.equals((getMashNew_result)that);
      return false;
    }

    public boolean equals(getMashNew_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_eF = true && this.isSetEF();
      boolean that_present_eF = true && that.isSetEF();
      if (this_present_eF || that_present_eF) {
        if (!(this_present_eF && that_present_eF))
          return false;
        if (!this.eF.equals(that.eF))
          return false;
      }

      boolean this_present_eE = true && this.isSetEE();
      boolean that_present_eE = true && that.isSetEE();
      if (this_present_eE || that_present_eE) {
        if (!(this_present_eE && that_present_eE))
          return false;
        if (!this.eE.equals(that.eE))
          return false;
      }

      boolean this_present_eTNF = true && this.isSetETNF();
      boolean that_present_eTNF = true && that.isSetETNF();
      if (this_present_eTNF || that_present_eTNF) {
        if (!(this_present_eTNF && that_present_eTNF))
          return false;
        if (!this.eTNF.equals(that.eTNF))
          return false;
      }

      boolean this_present_eNF = true && this.isSetENF();
      boolean that_present_eNF = true && that.isSetENF();
      if (this_present_eNF || that_present_eNF) {
        if (!(this_present_eNF && that_present_eNF))
          return false;
        if (!this.eNF.equals(that.eNF))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getMashNew_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getMashNew_result typedOther = (getMashNew_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEF()).compareTo(typedOther.isSetEF());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEF()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eF, typedOther.eF);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEE()).compareTo(typedOther.isSetEE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eE, typedOther.eE);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetETNF()).compareTo(typedOther.isSetETNF());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetETNF()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eTNF, typedOther.eTNF);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetENF()).compareTo(typedOther.isSetENF());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetENF()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eNF, typedOther.eNF);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list36 = iprot.readListBegin();
                this.success = new ArrayList<everfeeds.thrift.domain.Entry>(_list36.size);
                for (int _i37 = 0; _i37 < _list36.size; ++_i37)
                {
                  everfeeds.thrift.domain.Entry _elem38;
                  _elem38 = new everfeeds.thrift.domain.Entry();
                  _elem38.read(iprot);
                  this.success.add(_elem38);
                }
                iprot.readListEnd();
              }
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E_F
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eF = new everfeeds.thrift.error.Forbidden();
              this.eF.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // E_E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eE = new everfeeds.thrift.error.TokenExpired();
              this.eE.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // E_TNF
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eTNF = new everfeeds.thrift.error.TokenNotFound();
              this.eTNF.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // E_NF
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eNF = new everfeeds.thrift.error.NotFound();
              this.eNF.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new everfeeds.thrift.error.WrongArgument();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, this.success.size()));
          for (everfeeds.thrift.domain.Entry _iter39 : this.success)
          {
            _iter39.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetEF()) {
        oprot.writeFieldBegin(E_F_FIELD_DESC);
        this.eF.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetEE()) {
        oprot.writeFieldBegin(E_E_FIELD_DESC);
        this.eE.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetETNF()) {
        oprot.writeFieldBegin(E_TNF_FIELD_DESC);
        this.eTNF.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetENF()) {
        oprot.writeFieldBegin(E_NF_FIELD_DESC);
        this.eNF.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMashNew_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eF:");
      if (this.eF == null) {
        sb.append("null");
      } else {
        sb.append(this.eF);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eE:");
      if (this.eE == null) {
        sb.append("null");
      } else {
        sb.append(this.eE);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eTNF:");
      if (this.eTNF == null) {
        sb.append("null");
      } else {
        sb.append(this.eTNF);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eNF:");
      if (this.eNF == null) {
        sb.append("null");
      } else {
        sb.append(this.eNF);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getFiltered_args implements org.apache.thrift.TBase<getFiltered_args, getFiltered_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFiltered_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField FILTER_FIELD_DESC = new org.apache.thrift.protocol.TField("filter", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I16, (short)3);
    private static final org.apache.thrift.protocol.TField MAX_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("maxCount", org.apache.thrift.protocol.TType.I16, (short)4);

    public String token;
    public everfeeds.thrift.domain.Filter filter;
    public short page;
    public short maxCount;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token"),
      FILTER((short)2, "filter"),
      PAGE((short)3, "page"),
      MAX_COUNT((short)4, "maxCount");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 2: // FILTER
            return FILTER;
          case 3: // PAGE
            return PAGE;
          case 4: // MAX_COUNT
            return MAX_COUNT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PAGE_ISSET_ID = 0;
    private static final int __MAXCOUNT_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "String")));
      tmpMap.put(_Fields.FILTER, new org.apache.thrift.meta_data.FieldMetaData("filter", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, everfeeds.thrift.domain.Filter.class)));
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
      tmpMap.put(_Fields.MAX_COUNT, new org.apache.thrift.meta_data.FieldMetaData("maxCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFiltered_args.class, metaDataMap);
    }

    public getFiltered_args() {
    }

    public getFiltered_args(
      String token,
      everfeeds.thrift.domain.Filter filter,
      short page,
      short maxCount)
    {
      this();
      this.token = token;
      this.filter = filter;
      this.page = page;
      setPageIsSet(true);
      this.maxCount = maxCount;
      setMaxCountIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFiltered_args(getFiltered_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetToken()) {
        this.token = other.token;
      }
      if (other.isSetFilter()) {
        this.filter = new everfeeds.thrift.domain.Filter(other.filter);
      }
      this.page = other.page;
      this.maxCount = other.maxCount;
    }

    public getFiltered_args deepCopy() {
      return new getFiltered_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      this.filter = null;
      setPageIsSet(false);
      this.page = 0;
      setMaxCountIsSet(false);
      this.maxCount = 0;
    }

    public String getToken() {
      return this.token;
    }

    public getFiltered_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public everfeeds.thrift.domain.Filter getFilter() {
      return this.filter;
    }

    public getFiltered_args setFilter(everfeeds.thrift.domain.Filter filter) {
      this.filter = filter;
      return this;
    }

    public void unsetFilter() {
      this.filter = null;
    }

    /** Returns true if field filter is set (has been assigned a value) and false otherwise */
    public boolean isSetFilter() {
      return this.filter != null;
    }

    public void setFilterIsSet(boolean value) {
      if (!value) {
        this.filter = null;
      }
    }

    public short getPage() {
      return this.page;
    }

    public getFiltered_args setPage(short page) {
      this.page = page;
      setPageIsSet(true);
      return this;
    }

    public void unsetPage() {
      __isset_bit_vector.clear(__PAGE_ISSET_ID);
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return __isset_bit_vector.get(__PAGE_ISSET_ID);
    }

    public void setPageIsSet(boolean value) {
      __isset_bit_vector.set(__PAGE_ISSET_ID, value);
    }

    public short getMaxCount() {
      return this.maxCount;
    }

    public getFiltered_args setMaxCount(short maxCount) {
      this.maxCount = maxCount;
      setMaxCountIsSet(true);
      return this;
    }

    public void unsetMaxCount() {
      __isset_bit_vector.clear(__MAXCOUNT_ISSET_ID);
    }

    /** Returns true if field maxCount is set (has been assigned a value) and false otherwise */
    public boolean isSetMaxCount() {
      return __isset_bit_vector.get(__MAXCOUNT_ISSET_ID);
    }

    public void setMaxCountIsSet(boolean value) {
      __isset_bit_vector.set(__MAXCOUNT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case FILTER:
        if (value == null) {
          unsetFilter();
        } else {
          setFilter((everfeeds.thrift.domain.Filter)value);
        }
        break;

      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((Short)value);
        }
        break;

      case MAX_COUNT:
        if (value == null) {
          unsetMaxCount();
        } else {
          setMaxCount((Short)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case FILTER:
        return getFilter();

      case PAGE:
        return new Short(getPage());

      case MAX_COUNT:
        return new Short(getMaxCount());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case FILTER:
        return isSetFilter();
      case PAGE:
        return isSetPage();
      case MAX_COUNT:
        return isSetMaxCount();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFiltered_args)
        return this.equals((getFiltered_args)that);
      return false;
    }

    public boolean equals(getFiltered_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_filter = true && this.isSetFilter();
      boolean that_present_filter = true && that.isSetFilter();
      if (this_present_filter || that_present_filter) {
        if (!(this_present_filter && that_present_filter))
          return false;
        if (!this.filter.equals(that.filter))
          return false;
      }

      boolean this_present_page = true;
      boolean that_present_page = true;
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (this.page != that.page)
          return false;
      }

      boolean this_present_maxCount = true;
      boolean that_present_maxCount = true;
      if (this_present_maxCount || that_present_maxCount) {
        if (!(this_present_maxCount && that_present_maxCount))
          return false;
        if (this.maxCount != that.maxCount)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getFiltered_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getFiltered_args typedOther = (getFiltered_args)other;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(typedOther.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, typedOther.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFilter()).compareTo(typedOther.isSetFilter());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFilter()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filter, typedOther.filter);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPage()).compareTo(typedOther.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, typedOther.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMaxCount()).compareTo(typedOther.isSetMaxCount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMaxCount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxCount, typedOther.maxCount);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // TOKEN
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.token = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // FILTER
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.filter = new everfeeds.thrift.domain.Filter();
              this.filter.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // PAGE
            if (field.type == org.apache.thrift.protocol.TType.I16) {
              this.page = iprot.readI16();
              setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // MAX_COUNT
            if (field.type == org.apache.thrift.protocol.TType.I16) {
              this.maxCount = iprot.readI16();
              setMaxCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.token != null) {
        oprot.writeFieldBegin(TOKEN_FIELD_DESC);
        oprot.writeString(this.token);
        oprot.writeFieldEnd();
      }
      if (this.filter != null) {
        oprot.writeFieldBegin(FILTER_FIELD_DESC);
        this.filter.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI16(this.page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_COUNT_FIELD_DESC);
      oprot.writeI16(this.maxCount);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFiltered_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("filter:");
      if (this.filter == null) {
        sb.append("null");
      } else {
        sb.append(this.filter);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("page:");
      sb.append(this.page);
      first = false;
      if (!first) sb.append(", ");
      sb.append("maxCount:");
      sb.append(this.maxCount);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getFiltered_result implements org.apache.thrift.TBase<getFiltered_result, getFiltered_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFiltered_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_F_FIELD_DESC = new org.apache.thrift.protocol.TField("eF", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField E_E_FIELD_DESC = new org.apache.thrift.protocol.TField("eE", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField E_TNF_FIELD_DESC = new org.apache.thrift.protocol.TField("eTNF", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField E_NF_FIELD_DESC = new org.apache.thrift.protocol.TField("eNF", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)5);

    public List<everfeeds.thrift.domain.Entry> success;
    public everfeeds.thrift.error.Forbidden eF;
    public everfeeds.thrift.error.TokenExpired eE;
    public everfeeds.thrift.error.TokenNotFound eTNF;
    public everfeeds.thrift.error.NotFound eNF;
    public everfeeds.thrift.error.WrongArgument e;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E_F((short)1, "eF"),
      E_E((short)2, "eE"),
      E_TNF((short)3, "eTNF"),
      E_NF((short)4, "eNF"),
      E((short)5, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E_F
            return E_F;
          case 2: // E_E
            return E_E;
          case 3: // E_TNF
            return E_TNF;
          case 4: // E_NF
            return E_NF;
          case 5: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, everfeeds.thrift.domain.Entry.class))));
      tmpMap.put(_Fields.E_F, new org.apache.thrift.meta_data.FieldMetaData("eF", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_E, new org.apache.thrift.meta_data.FieldMetaData("eE", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_TNF, new org.apache.thrift.meta_data.FieldMetaData("eTNF", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_NF, new org.apache.thrift.meta_data.FieldMetaData("eNF", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFiltered_result.class, metaDataMap);
    }

    public getFiltered_result() {
    }

    public getFiltered_result(
      List<everfeeds.thrift.domain.Entry> success,
      everfeeds.thrift.error.Forbidden eF,
      everfeeds.thrift.error.TokenExpired eE,
      everfeeds.thrift.error.TokenNotFound eTNF,
      everfeeds.thrift.error.NotFound eNF,
      everfeeds.thrift.error.WrongArgument e)
    {
      this();
      this.success = success;
      this.eF = eF;
      this.eE = eE;
      this.eTNF = eTNF;
      this.eNF = eNF;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFiltered_result(getFiltered_result other) {
      if (other.isSetSuccess()) {
        List<everfeeds.thrift.domain.Entry> __this__success = new ArrayList<everfeeds.thrift.domain.Entry>();
        for (everfeeds.thrift.domain.Entry other_element : other.success) {
          __this__success.add(new everfeeds.thrift.domain.Entry(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetEF()) {
        this.eF = new everfeeds.thrift.error.Forbidden(other.eF);
      }
      if (other.isSetEE()) {
        this.eE = new everfeeds.thrift.error.TokenExpired(other.eE);
      }
      if (other.isSetETNF()) {
        this.eTNF = new everfeeds.thrift.error.TokenNotFound(other.eTNF);
      }
      if (other.isSetENF()) {
        this.eNF = new everfeeds.thrift.error.NotFound(other.eNF);
      }
      if (other.isSetE()) {
        this.e = new everfeeds.thrift.error.WrongArgument(other.e);
      }
    }

    public getFiltered_result deepCopy() {
      return new getFiltered_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.eF = null;
      this.eE = null;
      this.eTNF = null;
      this.eNF = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<everfeeds.thrift.domain.Entry> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(everfeeds.thrift.domain.Entry elem) {
      if (this.success == null) {
        this.success = new ArrayList<everfeeds.thrift.domain.Entry>();
      }
      this.success.add(elem);
    }

    public List<everfeeds.thrift.domain.Entry> getSuccess() {
      return this.success;
    }

    public getFiltered_result setSuccess(List<everfeeds.thrift.domain.Entry> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public everfeeds.thrift.error.Forbidden getEF() {
      return this.eF;
    }

    public getFiltered_result setEF(everfeeds.thrift.error.Forbidden eF) {
      this.eF = eF;
      return this;
    }

    public void unsetEF() {
      this.eF = null;
    }

    /** Returns true if field eF is set (has been assigned a value) and false otherwise */
    public boolean isSetEF() {
      return this.eF != null;
    }

    public void setEFIsSet(boolean value) {
      if (!value) {
        this.eF = null;
      }
    }

    public everfeeds.thrift.error.TokenExpired getEE() {
      return this.eE;
    }

    public getFiltered_result setEE(everfeeds.thrift.error.TokenExpired eE) {
      this.eE = eE;
      return this;
    }

    public void unsetEE() {
      this.eE = null;
    }

    /** Returns true if field eE is set (has been assigned a value) and false otherwise */
    public boolean isSetEE() {
      return this.eE != null;
    }

    public void setEEIsSet(boolean value) {
      if (!value) {
        this.eE = null;
      }
    }

    public everfeeds.thrift.error.TokenNotFound getETNF() {
      return this.eTNF;
    }

    public getFiltered_result setETNF(everfeeds.thrift.error.TokenNotFound eTNF) {
      this.eTNF = eTNF;
      return this;
    }

    public void unsetETNF() {
      this.eTNF = null;
    }

    /** Returns true if field eTNF is set (has been assigned a value) and false otherwise */
    public boolean isSetETNF() {
      return this.eTNF != null;
    }

    public void setETNFIsSet(boolean value) {
      if (!value) {
        this.eTNF = null;
      }
    }

    public everfeeds.thrift.error.NotFound getENF() {
      return this.eNF;
    }

    public getFiltered_result setENF(everfeeds.thrift.error.NotFound eNF) {
      this.eNF = eNF;
      return this;
    }

    public void unsetENF() {
      this.eNF = null;
    }

    /** Returns true if field eNF is set (has been assigned a value) and false otherwise */
    public boolean isSetENF() {
      return this.eNF != null;
    }

    public void setENFIsSet(boolean value) {
      if (!value) {
        this.eNF = null;
      }
    }

    public everfeeds.thrift.error.WrongArgument getE() {
      return this.e;
    }

    public getFiltered_result setE(everfeeds.thrift.error.WrongArgument e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<everfeeds.thrift.domain.Entry>)value);
        }
        break;

      case E_F:
        if (value == null) {
          unsetEF();
        } else {
          setEF((everfeeds.thrift.error.Forbidden)value);
        }
        break;

      case E_E:
        if (value == null) {
          unsetEE();
        } else {
          setEE((everfeeds.thrift.error.TokenExpired)value);
        }
        break;

      case E_TNF:
        if (value == null) {
          unsetETNF();
        } else {
          setETNF((everfeeds.thrift.error.TokenNotFound)value);
        }
        break;

      case E_NF:
        if (value == null) {
          unsetENF();
        } else {
          setENF((everfeeds.thrift.error.NotFound)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((everfeeds.thrift.error.WrongArgument)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E_F:
        return getEF();

      case E_E:
        return getEE();

      case E_TNF:
        return getETNF();

      case E_NF:
        return getENF();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E_F:
        return isSetEF();
      case E_E:
        return isSetEE();
      case E_TNF:
        return isSetETNF();
      case E_NF:
        return isSetENF();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFiltered_result)
        return this.equals((getFiltered_result)that);
      return false;
    }

    public boolean equals(getFiltered_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_eF = true && this.isSetEF();
      boolean that_present_eF = true && that.isSetEF();
      if (this_present_eF || that_present_eF) {
        if (!(this_present_eF && that_present_eF))
          return false;
        if (!this.eF.equals(that.eF))
          return false;
      }

      boolean this_present_eE = true && this.isSetEE();
      boolean that_present_eE = true && that.isSetEE();
      if (this_present_eE || that_present_eE) {
        if (!(this_present_eE && that_present_eE))
          return false;
        if (!this.eE.equals(that.eE))
          return false;
      }

      boolean this_present_eTNF = true && this.isSetETNF();
      boolean that_present_eTNF = true && that.isSetETNF();
      if (this_present_eTNF || that_present_eTNF) {
        if (!(this_present_eTNF && that_present_eTNF))
          return false;
        if (!this.eTNF.equals(that.eTNF))
          return false;
      }

      boolean this_present_eNF = true && this.isSetENF();
      boolean that_present_eNF = true && that.isSetENF();
      if (this_present_eNF || that_present_eNF) {
        if (!(this_present_eNF && that_present_eNF))
          return false;
        if (!this.eNF.equals(that.eNF))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getFiltered_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getFiltered_result typedOther = (getFiltered_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEF()).compareTo(typedOther.isSetEF());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEF()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eF, typedOther.eF);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEE()).compareTo(typedOther.isSetEE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eE, typedOther.eE);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetETNF()).compareTo(typedOther.isSetETNF());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetETNF()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eTNF, typedOther.eTNF);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetENF()).compareTo(typedOther.isSetENF());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetENF()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eNF, typedOther.eNF);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                this.success = new ArrayList<everfeeds.thrift.domain.Entry>(_list40.size);
                for (int _i41 = 0; _i41 < _list40.size; ++_i41)
                {
                  everfeeds.thrift.domain.Entry _elem42;
                  _elem42 = new everfeeds.thrift.domain.Entry();
                  _elem42.read(iprot);
                  this.success.add(_elem42);
                }
                iprot.readListEnd();
              }
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E_F
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eF = new everfeeds.thrift.error.Forbidden();
              this.eF.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // E_E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eE = new everfeeds.thrift.error.TokenExpired();
              this.eE.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // E_TNF
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eTNF = new everfeeds.thrift.error.TokenNotFound();
              this.eTNF.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // E_NF
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eNF = new everfeeds.thrift.error.NotFound();
              this.eNF.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new everfeeds.thrift.error.WrongArgument();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, this.success.size()));
          for (everfeeds.thrift.domain.Entry _iter43 : this.success)
          {
            _iter43.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetEF()) {
        oprot.writeFieldBegin(E_F_FIELD_DESC);
        this.eF.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetEE()) {
        oprot.writeFieldBegin(E_E_FIELD_DESC);
        this.eE.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetETNF()) {
        oprot.writeFieldBegin(E_TNF_FIELD_DESC);
        this.eTNF.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetENF()) {
        oprot.writeFieldBegin(E_NF_FIELD_DESC);
        this.eNF.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFiltered_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eF:");
      if (this.eF == null) {
        sb.append("null");
      } else {
        sb.append(this.eF);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eE:");
      if (this.eE == null) {
        sb.append("null");
      } else {
        sb.append(this.eE);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eTNF:");
      if (this.eTNF == null) {
        sb.append("null");
      } else {
        sb.append(this.eTNF);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eNF:");
      if (this.eNF == null) {
        sb.append("null");
      } else {
        sb.append(this.eNF);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getFilteredNew_args implements org.apache.thrift.TBase<getFilteredNew_args, getFilteredNew_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFilteredNew_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField FILTER_FIELD_DESC = new org.apache.thrift.protocol.TField("filter", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    public String token;
    public everfeeds.thrift.domain.Filter filter;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token"),
      FILTER((short)2, "filter");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 2: // FILTER
            return FILTER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "String")));
      tmpMap.put(_Fields.FILTER, new org.apache.thrift.meta_data.FieldMetaData("filter", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, everfeeds.thrift.domain.Filter.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFilteredNew_args.class, metaDataMap);
    }

    public getFilteredNew_args() {
    }

    public getFilteredNew_args(
      String token,
      everfeeds.thrift.domain.Filter filter)
    {
      this();
      this.token = token;
      this.filter = filter;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFilteredNew_args(getFilteredNew_args other) {
      if (other.isSetToken()) {
        this.token = other.token;
      }
      if (other.isSetFilter()) {
        this.filter = new everfeeds.thrift.domain.Filter(other.filter);
      }
    }

    public getFilteredNew_args deepCopy() {
      return new getFilteredNew_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      this.filter = null;
    }

    public String getToken() {
      return this.token;
    }

    public getFilteredNew_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public everfeeds.thrift.domain.Filter getFilter() {
      return this.filter;
    }

    public getFilteredNew_args setFilter(everfeeds.thrift.domain.Filter filter) {
      this.filter = filter;
      return this;
    }

    public void unsetFilter() {
      this.filter = null;
    }

    /** Returns true if field filter is set (has been assigned a value) and false otherwise */
    public boolean isSetFilter() {
      return this.filter != null;
    }

    public void setFilterIsSet(boolean value) {
      if (!value) {
        this.filter = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case FILTER:
        if (value == null) {
          unsetFilter();
        } else {
          setFilter((everfeeds.thrift.domain.Filter)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case FILTER:
        return getFilter();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case FILTER:
        return isSetFilter();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFilteredNew_args)
        return this.equals((getFilteredNew_args)that);
      return false;
    }

    public boolean equals(getFilteredNew_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_filter = true && this.isSetFilter();
      boolean that_present_filter = true && that.isSetFilter();
      if (this_present_filter || that_present_filter) {
        if (!(this_present_filter && that_present_filter))
          return false;
        if (!this.filter.equals(that.filter))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getFilteredNew_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getFilteredNew_args typedOther = (getFilteredNew_args)other;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(typedOther.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, typedOther.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFilter()).compareTo(typedOther.isSetFilter());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFilter()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filter, typedOther.filter);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // TOKEN
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.token = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // FILTER
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.filter = new everfeeds.thrift.domain.Filter();
              this.filter.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.token != null) {
        oprot.writeFieldBegin(TOKEN_FIELD_DESC);
        oprot.writeString(this.token);
        oprot.writeFieldEnd();
      }
      if (this.filter != null) {
        oprot.writeFieldBegin(FILTER_FIELD_DESC);
        this.filter.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFilteredNew_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("filter:");
      if (this.filter == null) {
        sb.append("null");
      } else {
        sb.append(this.filter);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getFilteredNew_result implements org.apache.thrift.TBase<getFilteredNew_result, getFilteredNew_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFilteredNew_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_F_FIELD_DESC = new org.apache.thrift.protocol.TField("eF", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField E_E_FIELD_DESC = new org.apache.thrift.protocol.TField("eE", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField E_TNF_FIELD_DESC = new org.apache.thrift.protocol.TField("eTNF", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField E_NF_FIELD_DESC = new org.apache.thrift.protocol.TField("eNF", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)5);

    public List<everfeeds.thrift.domain.Entry> success;
    public everfeeds.thrift.error.Forbidden eF;
    public everfeeds.thrift.error.TokenExpired eE;
    public everfeeds.thrift.error.TokenNotFound eTNF;
    public everfeeds.thrift.error.NotFound eNF;
    public everfeeds.thrift.error.WrongArgument e;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E_F((short)1, "eF"),
      E_E((short)2, "eE"),
      E_TNF((short)3, "eTNF"),
      E_NF((short)4, "eNF"),
      E((short)5, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E_F
            return E_F;
          case 2: // E_E
            return E_E;
          case 3: // E_TNF
            return E_TNF;
          case 4: // E_NF
            return E_NF;
          case 5: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, everfeeds.thrift.domain.Entry.class))));
      tmpMap.put(_Fields.E_F, new org.apache.thrift.meta_data.FieldMetaData("eF", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_E, new org.apache.thrift.meta_data.FieldMetaData("eE", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_TNF, new org.apache.thrift.meta_data.FieldMetaData("eTNF", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_NF, new org.apache.thrift.meta_data.FieldMetaData("eNF", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFilteredNew_result.class, metaDataMap);
    }

    public getFilteredNew_result() {
    }

    public getFilteredNew_result(
      List<everfeeds.thrift.domain.Entry> success,
      everfeeds.thrift.error.Forbidden eF,
      everfeeds.thrift.error.TokenExpired eE,
      everfeeds.thrift.error.TokenNotFound eTNF,
      everfeeds.thrift.error.NotFound eNF,
      everfeeds.thrift.error.WrongArgument e)
    {
      this();
      this.success = success;
      this.eF = eF;
      this.eE = eE;
      this.eTNF = eTNF;
      this.eNF = eNF;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFilteredNew_result(getFilteredNew_result other) {
      if (other.isSetSuccess()) {
        List<everfeeds.thrift.domain.Entry> __this__success = new ArrayList<everfeeds.thrift.domain.Entry>();
        for (everfeeds.thrift.domain.Entry other_element : other.success) {
          __this__success.add(new everfeeds.thrift.domain.Entry(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetEF()) {
        this.eF = new everfeeds.thrift.error.Forbidden(other.eF);
      }
      if (other.isSetEE()) {
        this.eE = new everfeeds.thrift.error.TokenExpired(other.eE);
      }
      if (other.isSetETNF()) {
        this.eTNF = new everfeeds.thrift.error.TokenNotFound(other.eTNF);
      }
      if (other.isSetENF()) {
        this.eNF = new everfeeds.thrift.error.NotFound(other.eNF);
      }
      if (other.isSetE()) {
        this.e = new everfeeds.thrift.error.WrongArgument(other.e);
      }
    }

    public getFilteredNew_result deepCopy() {
      return new getFilteredNew_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.eF = null;
      this.eE = null;
      this.eTNF = null;
      this.eNF = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<everfeeds.thrift.domain.Entry> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(everfeeds.thrift.domain.Entry elem) {
      if (this.success == null) {
        this.success = new ArrayList<everfeeds.thrift.domain.Entry>();
      }
      this.success.add(elem);
    }

    public List<everfeeds.thrift.domain.Entry> getSuccess() {
      return this.success;
    }

    public getFilteredNew_result setSuccess(List<everfeeds.thrift.domain.Entry> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public everfeeds.thrift.error.Forbidden getEF() {
      return this.eF;
    }

    public getFilteredNew_result setEF(everfeeds.thrift.error.Forbidden eF) {
      this.eF = eF;
      return this;
    }

    public void unsetEF() {
      this.eF = null;
    }

    /** Returns true if field eF is set (has been assigned a value) and false otherwise */
    public boolean isSetEF() {
      return this.eF != null;
    }

    public void setEFIsSet(boolean value) {
      if (!value) {
        this.eF = null;
      }
    }

    public everfeeds.thrift.error.TokenExpired getEE() {
      return this.eE;
    }

    public getFilteredNew_result setEE(everfeeds.thrift.error.TokenExpired eE) {
      this.eE = eE;
      return this;
    }

    public void unsetEE() {
      this.eE = null;
    }

    /** Returns true if field eE is set (has been assigned a value) and false otherwise */
    public boolean isSetEE() {
      return this.eE != null;
    }

    public void setEEIsSet(boolean value) {
      if (!value) {
        this.eE = null;
      }
    }

    public everfeeds.thrift.error.TokenNotFound getETNF() {
      return this.eTNF;
    }

    public getFilteredNew_result setETNF(everfeeds.thrift.error.TokenNotFound eTNF) {
      this.eTNF = eTNF;
      return this;
    }

    public void unsetETNF() {
      this.eTNF = null;
    }

    /** Returns true if field eTNF is set (has been assigned a value) and false otherwise */
    public boolean isSetETNF() {
      return this.eTNF != null;
    }

    public void setETNFIsSet(boolean value) {
      if (!value) {
        this.eTNF = null;
      }
    }

    public everfeeds.thrift.error.NotFound getENF() {
      return this.eNF;
    }

    public getFilteredNew_result setENF(everfeeds.thrift.error.NotFound eNF) {
      this.eNF = eNF;
      return this;
    }

    public void unsetENF() {
      this.eNF = null;
    }

    /** Returns true if field eNF is set (has been assigned a value) and false otherwise */
    public boolean isSetENF() {
      return this.eNF != null;
    }

    public void setENFIsSet(boolean value) {
      if (!value) {
        this.eNF = null;
      }
    }

    public everfeeds.thrift.error.WrongArgument getE() {
      return this.e;
    }

    public getFilteredNew_result setE(everfeeds.thrift.error.WrongArgument e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<everfeeds.thrift.domain.Entry>)value);
        }
        break;

      case E_F:
        if (value == null) {
          unsetEF();
        } else {
          setEF((everfeeds.thrift.error.Forbidden)value);
        }
        break;

      case E_E:
        if (value == null) {
          unsetEE();
        } else {
          setEE((everfeeds.thrift.error.TokenExpired)value);
        }
        break;

      case E_TNF:
        if (value == null) {
          unsetETNF();
        } else {
          setETNF((everfeeds.thrift.error.TokenNotFound)value);
        }
        break;

      case E_NF:
        if (value == null) {
          unsetENF();
        } else {
          setENF((everfeeds.thrift.error.NotFound)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((everfeeds.thrift.error.WrongArgument)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E_F:
        return getEF();

      case E_E:
        return getEE();

      case E_TNF:
        return getETNF();

      case E_NF:
        return getENF();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E_F:
        return isSetEF();
      case E_E:
        return isSetEE();
      case E_TNF:
        return isSetETNF();
      case E_NF:
        return isSetENF();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFilteredNew_result)
        return this.equals((getFilteredNew_result)that);
      return false;
    }

    public boolean equals(getFilteredNew_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_eF = true && this.isSetEF();
      boolean that_present_eF = true && that.isSetEF();
      if (this_present_eF || that_present_eF) {
        if (!(this_present_eF && that_present_eF))
          return false;
        if (!this.eF.equals(that.eF))
          return false;
      }

      boolean this_present_eE = true && this.isSetEE();
      boolean that_present_eE = true && that.isSetEE();
      if (this_present_eE || that_present_eE) {
        if (!(this_present_eE && that_present_eE))
          return false;
        if (!this.eE.equals(that.eE))
          return false;
      }

      boolean this_present_eTNF = true && this.isSetETNF();
      boolean that_present_eTNF = true && that.isSetETNF();
      if (this_present_eTNF || that_present_eTNF) {
        if (!(this_present_eTNF && that_present_eTNF))
          return false;
        if (!this.eTNF.equals(that.eTNF))
          return false;
      }

      boolean this_present_eNF = true && this.isSetENF();
      boolean that_present_eNF = true && that.isSetENF();
      if (this_present_eNF || that_present_eNF) {
        if (!(this_present_eNF && that_present_eNF))
          return false;
        if (!this.eNF.equals(that.eNF))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getFilteredNew_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getFilteredNew_result typedOther = (getFilteredNew_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEF()).compareTo(typedOther.isSetEF());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEF()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eF, typedOther.eF);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEE()).compareTo(typedOther.isSetEE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eE, typedOther.eE);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetETNF()).compareTo(typedOther.isSetETNF());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetETNF()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eTNF, typedOther.eTNF);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetENF()).compareTo(typedOther.isSetENF());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetENF()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eNF, typedOther.eNF);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list44 = iprot.readListBegin();
                this.success = new ArrayList<everfeeds.thrift.domain.Entry>(_list44.size);
                for (int _i45 = 0; _i45 < _list44.size; ++_i45)
                {
                  everfeeds.thrift.domain.Entry _elem46;
                  _elem46 = new everfeeds.thrift.domain.Entry();
                  _elem46.read(iprot);
                  this.success.add(_elem46);
                }
                iprot.readListEnd();
              }
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E_F
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eF = new everfeeds.thrift.error.Forbidden();
              this.eF.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // E_E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eE = new everfeeds.thrift.error.TokenExpired();
              this.eE.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // E_TNF
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eTNF = new everfeeds.thrift.error.TokenNotFound();
              this.eTNF.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // E_NF
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eNF = new everfeeds.thrift.error.NotFound();
              this.eNF.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new everfeeds.thrift.error.WrongArgument();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, this.success.size()));
          for (everfeeds.thrift.domain.Entry _iter47 : this.success)
          {
            _iter47.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetEF()) {
        oprot.writeFieldBegin(E_F_FIELD_DESC);
        this.eF.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetEE()) {
        oprot.writeFieldBegin(E_E_FIELD_DESC);
        this.eE.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetETNF()) {
        oprot.writeFieldBegin(E_TNF_FIELD_DESC);
        this.eTNF.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetENF()) {
        oprot.writeFieldBegin(E_NF_FIELD_DESC);
        this.eNF.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFilteredNew_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eF:");
      if (this.eF == null) {
        sb.append("null");
      } else {
        sb.append(this.eF);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eE:");
      if (this.eE == null) {
        sb.append("null");
      } else {
        sb.append(this.eE);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eTNF:");
      if (this.eTNF == null) {
        sb.append("null");
      } else {
        sb.append(this.eTNF);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eNF:");
      if (this.eNF == null) {
        sb.append("null");
      } else {
        sb.append(this.eNF);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

}
