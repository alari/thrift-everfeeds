/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package everfeeds.thrift.service;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class AccessAPI {

  public interface Iface extends AccountAPI.Iface {

    public List<everfeeds.thrift.domain.Tag> getTags(String token, String accessId) throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, org.apache.thrift.TException;

    public List<everfeeds.thrift.domain.Category> getCategories(String token, String accessId) throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, org.apache.thrift.TException;

    public List<everfeeds.thrift.ttype.EntryKind> getKinds(String token, String accessId) throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, org.apache.thrift.TException;

    public everfeeds.thrift.domain.Tag saveTag(String token, everfeeds.thrift.domain.Tag tag) throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, org.apache.thrift.TException;

    public everfeeds.thrift.domain.Category saveCategory(String token, everfeeds.thrift.domain.Category category) throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, org.apache.thrift.TException;

  }

  public interface AsyncIface extends AccountAPI .AsyncIface {

    public void getTags(String token, String accessId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getTags_call> resultHandler) throws org.apache.thrift.TException;

    public void getCategories(String token, String accessId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getCategories_call> resultHandler) throws org.apache.thrift.TException;

    public void getKinds(String token, String accessId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getKinds_call> resultHandler) throws org.apache.thrift.TException;

    public void saveTag(String token, everfeeds.thrift.domain.Tag tag, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.saveTag_call> resultHandler) throws org.apache.thrift.TException;

    public void saveCategory(String token, everfeeds.thrift.domain.Category category, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.saveCategory_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends AccountAPI.Client implements org.apache.thrift.TServiceClient, Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      this(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot)
    {
      super(iprot, oprot);
    }

    public List<everfeeds.thrift.domain.Tag> getTags(String token, String accessId) throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, org.apache.thrift.TException
    {
      send_getTags(token, accessId);
      return recv_getTags();
    }

    public void send_getTags(String token, String accessId) throws org.apache.thrift.TException
    {
      oprot_.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTags", org.apache.thrift.protocol.TMessageType.CALL, ++seqid_));
      getTags_args args = new getTags_args();
      args.setToken(token);
      args.setAccessId(accessId);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public List<everfeeds.thrift.domain.Tag> recv_getTags() throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot_.readMessageBegin();
      if (msg.type == org.apache.thrift.protocol.TMessageType.EXCEPTION) {
        org.apache.thrift.TApplicationException x = org.apache.thrift.TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.BAD_SEQUENCE_ID, "getTags failed: out of sequence response");
      }
      getTags_result result = new getTags_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.eF != null) {
        throw result.eF;
      }
      if (result.eE != null) {
        throw result.eE;
      }
      if (result.eTNF != null) {
        throw result.eTNF;
      }
      if (result.eNF != null) {
        throw result.eNF;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTags failed: unknown result");
    }

    public List<everfeeds.thrift.domain.Category> getCategories(String token, String accessId) throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, org.apache.thrift.TException
    {
      send_getCategories(token, accessId);
      return recv_getCategories();
    }

    public void send_getCategories(String token, String accessId) throws org.apache.thrift.TException
    {
      oprot_.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCategories", org.apache.thrift.protocol.TMessageType.CALL, ++seqid_));
      getCategories_args args = new getCategories_args();
      args.setToken(token);
      args.setAccessId(accessId);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public List<everfeeds.thrift.domain.Category> recv_getCategories() throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot_.readMessageBegin();
      if (msg.type == org.apache.thrift.protocol.TMessageType.EXCEPTION) {
        org.apache.thrift.TApplicationException x = org.apache.thrift.TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.BAD_SEQUENCE_ID, "getCategories failed: out of sequence response");
      }
      getCategories_result result = new getCategories_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.eF != null) {
        throw result.eF;
      }
      if (result.eE != null) {
        throw result.eE;
      }
      if (result.eTNF != null) {
        throw result.eTNF;
      }
      if (result.eNF != null) {
        throw result.eNF;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCategories failed: unknown result");
    }

    public List<everfeeds.thrift.ttype.EntryKind> getKinds(String token, String accessId) throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, org.apache.thrift.TException
    {
      send_getKinds(token, accessId);
      return recv_getKinds();
    }

    public void send_getKinds(String token, String accessId) throws org.apache.thrift.TException
    {
      oprot_.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getKinds", org.apache.thrift.protocol.TMessageType.CALL, ++seqid_));
      getKinds_args args = new getKinds_args();
      args.setToken(token);
      args.setAccessId(accessId);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public List<everfeeds.thrift.ttype.EntryKind> recv_getKinds() throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot_.readMessageBegin();
      if (msg.type == org.apache.thrift.protocol.TMessageType.EXCEPTION) {
        org.apache.thrift.TApplicationException x = org.apache.thrift.TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.BAD_SEQUENCE_ID, "getKinds failed: out of sequence response");
      }
      getKinds_result result = new getKinds_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.eF != null) {
        throw result.eF;
      }
      if (result.eE != null) {
        throw result.eE;
      }
      if (result.eTNF != null) {
        throw result.eTNF;
      }
      if (result.eNF != null) {
        throw result.eNF;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getKinds failed: unknown result");
    }

    public everfeeds.thrift.domain.Tag saveTag(String token, everfeeds.thrift.domain.Tag tag) throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, org.apache.thrift.TException
    {
      send_saveTag(token, tag);
      return recv_saveTag();
    }

    public void send_saveTag(String token, everfeeds.thrift.domain.Tag tag) throws org.apache.thrift.TException
    {
      oprot_.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveTag", org.apache.thrift.protocol.TMessageType.CALL, ++seqid_));
      saveTag_args args = new saveTag_args();
      args.setToken(token);
      args.setTag(tag);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public everfeeds.thrift.domain.Tag recv_saveTag() throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot_.readMessageBegin();
      if (msg.type == org.apache.thrift.protocol.TMessageType.EXCEPTION) {
        org.apache.thrift.TApplicationException x = org.apache.thrift.TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.BAD_SEQUENCE_ID, "saveTag failed: out of sequence response");
      }
      saveTag_result result = new saveTag_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.eF != null) {
        throw result.eF;
      }
      if (result.eE != null) {
        throw result.eE;
      }
      if (result.eTNF != null) {
        throw result.eTNF;
      }
      if (result.eNF != null) {
        throw result.eNF;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "saveTag failed: unknown result");
    }

    public everfeeds.thrift.domain.Category saveCategory(String token, everfeeds.thrift.domain.Category category) throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, org.apache.thrift.TException
    {
      send_saveCategory(token, category);
      return recv_saveCategory();
    }

    public void send_saveCategory(String token, everfeeds.thrift.domain.Category category) throws org.apache.thrift.TException
    {
      oprot_.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveCategory", org.apache.thrift.protocol.TMessageType.CALL, ++seqid_));
      saveCategory_args args = new saveCategory_args();
      args.setToken(token);
      args.setCategory(category);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public everfeeds.thrift.domain.Category recv_saveCategory() throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot_.readMessageBegin();
      if (msg.type == org.apache.thrift.protocol.TMessageType.EXCEPTION) {
        org.apache.thrift.TApplicationException x = org.apache.thrift.TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.BAD_SEQUENCE_ID, "saveCategory failed: out of sequence response");
      }
      saveCategory_result result = new saveCategory_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.eF != null) {
        throw result.eF;
      }
      if (result.eE != null) {
        throw result.eE;
      }
      if (result.eTNF != null) {
        throw result.eTNF;
      }
      if (result.eNF != null) {
        throw result.eNF;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "saveCategory failed: unknown result");
    }

  }
  public static class AsyncClient extends AccountAPI.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getTags(String token, String accessId, org.apache.thrift.async.AsyncMethodCallback<getTags_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTags_call method_call = new getTags_call(token, accessId, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class getTags_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String token;
      private String accessId;
      public getTags_call(String token, String accessId, org.apache.thrift.async.AsyncMethodCallback<getTags_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this.accessId = accessId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTags", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTags_args args = new getTags_args();
        args.setToken(token);
        args.setAccessId(accessId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<everfeeds.thrift.domain.Tag> getResult() throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTags();
      }
    }

    public void getCategories(String token, String accessId, org.apache.thrift.async.AsyncMethodCallback<getCategories_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getCategories_call method_call = new getCategories_call(token, accessId, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class getCategories_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String token;
      private String accessId;
      public getCategories_call(String token, String accessId, org.apache.thrift.async.AsyncMethodCallback<getCategories_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this.accessId = accessId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCategories", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCategories_args args = new getCategories_args();
        args.setToken(token);
        args.setAccessId(accessId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<everfeeds.thrift.domain.Category> getResult() throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getCategories();
      }
    }

    public void getKinds(String token, String accessId, org.apache.thrift.async.AsyncMethodCallback<getKinds_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getKinds_call method_call = new getKinds_call(token, accessId, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class getKinds_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String token;
      private String accessId;
      public getKinds_call(String token, String accessId, org.apache.thrift.async.AsyncMethodCallback<getKinds_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this.accessId = accessId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getKinds", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getKinds_args args = new getKinds_args();
        args.setToken(token);
        args.setAccessId(accessId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<everfeeds.thrift.ttype.EntryKind> getResult() throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getKinds();
      }
    }

    public void saveTag(String token, everfeeds.thrift.domain.Tag tag, org.apache.thrift.async.AsyncMethodCallback<saveTag_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saveTag_call method_call = new saveTag_call(token, tag, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class saveTag_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String token;
      private everfeeds.thrift.domain.Tag tag;
      public saveTag_call(String token, everfeeds.thrift.domain.Tag tag, org.apache.thrift.async.AsyncMethodCallback<saveTag_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this.tag = tag;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveTag", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saveTag_args args = new saveTag_args();
        args.setToken(token);
        args.setTag(tag);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public everfeeds.thrift.domain.Tag getResult() throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_saveTag();
      }
    }

    public void saveCategory(String token, everfeeds.thrift.domain.Category category, org.apache.thrift.async.AsyncMethodCallback<saveCategory_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saveCategory_call method_call = new saveCategory_call(token, category, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class saveCategory_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String token;
      private everfeeds.thrift.domain.Category category;
      public saveCategory_call(String token, everfeeds.thrift.domain.Category category, org.apache.thrift.async.AsyncMethodCallback<saveCategory_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this.category = category;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveCategory", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saveCategory_args args = new saveCategory_args();
        args.setToken(token);
        args.setCategory(category);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public everfeeds.thrift.domain.Category getResult() throws everfeeds.thrift.error.Forbidden, everfeeds.thrift.error.TokenExpired, everfeeds.thrift.error.TokenNotFound, everfeeds.thrift.error.NotFound, org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_saveCategory();
      }
    }

  }

  public static class Processor extends AccountAPI.Processor implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(Iface iface)
    {
      super(iface);
      iface_ = iface;
      processMap_.put("getTags", new getTags());
      processMap_.put("getCategories", new getCategories());
      processMap_.put("getKinds", new getKinds());
      processMap_.put("saveTag", new saveTag());
      processMap_.put("saveCategory", new saveCategory());
    }

    private Iface iface_;

    public boolean process(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot.readMessageBegin();
      ProcessFunction fn = processMap_.get(msg.name);
      if (fn == null) {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, org.apache.thrift.protocol.TType.STRUCT);
        iprot.readMessageEnd();
        org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.UNKNOWN_METHOD, "Invalid method name: '"+msg.name+"'");
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(msg.name, org.apache.thrift.protocol.TMessageType.EXCEPTION, msg.seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return true;
      }
      fn.process(msg.seqid, iprot, oprot);
      return true;
    }

    private class getTags implements ProcessFunction {
      public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        getTags_args args = new getTags_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTags", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getTags_result result = new getTags_result();
        try {
          result.success = iface_.getTags(args.token, args.accessId);
        } catch (everfeeds.thrift.error.Forbidden eF) {
          result.eF = eF;
        } catch (everfeeds.thrift.error.TokenExpired eE) {
          result.eE = eE;
        } catch (everfeeds.thrift.error.TokenNotFound eTNF) {
          result.eTNF = eTNF;
        } catch (everfeeds.thrift.error.NotFound eNF) {
          result.eNF = eNF;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing getTags", th);
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, "Internal error processing getTags");
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTags", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTags", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getCategories implements ProcessFunction {
      public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        getCategories_args args = new getCategories_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCategories", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getCategories_result result = new getCategories_result();
        try {
          result.success = iface_.getCategories(args.token, args.accessId);
        } catch (everfeeds.thrift.error.Forbidden eF) {
          result.eF = eF;
        } catch (everfeeds.thrift.error.TokenExpired eE) {
          result.eE = eE;
        } catch (everfeeds.thrift.error.TokenNotFound eTNF) {
          result.eTNF = eTNF;
        } catch (everfeeds.thrift.error.NotFound eNF) {
          result.eNF = eNF;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing getCategories", th);
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, "Internal error processing getCategories");
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCategories", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCategories", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getKinds implements ProcessFunction {
      public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        getKinds_args args = new getKinds_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getKinds", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getKinds_result result = new getKinds_result();
        try {
          result.success = iface_.getKinds(args.token, args.accessId);
        } catch (everfeeds.thrift.error.Forbidden eF) {
          result.eF = eF;
        } catch (everfeeds.thrift.error.TokenExpired eE) {
          result.eE = eE;
        } catch (everfeeds.thrift.error.TokenNotFound eTNF) {
          result.eTNF = eTNF;
        } catch (everfeeds.thrift.error.NotFound eNF) {
          result.eNF = eNF;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing getKinds", th);
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, "Internal error processing getKinds");
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getKinds", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getKinds", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class saveTag implements ProcessFunction {
      public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        saveTag_args args = new saveTag_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveTag", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        saveTag_result result = new saveTag_result();
        try {
          result.success = iface_.saveTag(args.token, args.tag);
        } catch (everfeeds.thrift.error.Forbidden eF) {
          result.eF = eF;
        } catch (everfeeds.thrift.error.TokenExpired eE) {
          result.eE = eE;
        } catch (everfeeds.thrift.error.TokenNotFound eTNF) {
          result.eTNF = eTNF;
        } catch (everfeeds.thrift.error.NotFound eNF) {
          result.eNF = eNF;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing saveTag", th);
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, "Internal error processing saveTag");
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveTag", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveTag", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class saveCategory implements ProcessFunction {
      public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        saveCategory_args args = new saveCategory_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveCategory", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        saveCategory_result result = new saveCategory_result();
        try {
          result.success = iface_.saveCategory(args.token, args.category);
        } catch (everfeeds.thrift.error.Forbidden eF) {
          result.eF = eF;
        } catch (everfeeds.thrift.error.TokenExpired eE) {
          result.eE = eE;
        } catch (everfeeds.thrift.error.TokenNotFound eTNF) {
          result.eTNF = eTNF;
        } catch (everfeeds.thrift.error.NotFound eNF) {
          result.eNF = eNF;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing saveCategory", th);
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, "Internal error processing saveCategory");
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveCategory", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveCategory", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

  }

  public static class getTags_args implements org.apache.thrift.TBase<getTags_args, getTags_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTags_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ACCESS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("accessId", org.apache.thrift.protocol.TType.STRING, (short)5);

    public String token;
    public String accessId;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token"),
      ACCESS_ID((short)5, "accessId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 5: // ACCESS_ID
            return ACCESS_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "String")));
      tmpMap.put(_Fields.ACCESS_ID, new org.apache.thrift.meta_data.FieldMetaData("accessId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "Id")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTags_args.class, metaDataMap);
    }

    public getTags_args() {
    }

    public getTags_args(
      String token,
      String accessId)
    {
      this();
      this.token = token;
      this.accessId = accessId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTags_args(getTags_args other) {
      if (other.isSetToken()) {
        this.token = other.token;
      }
      if (other.isSetAccessId()) {
        this.accessId = other.accessId;
      }
    }

    public getTags_args deepCopy() {
      return new getTags_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      this.accessId = null;
    }

    public String getToken() {
      return this.token;
    }

    public getTags_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public String getAccessId() {
      return this.accessId;
    }

    public getTags_args setAccessId(String accessId) {
      this.accessId = accessId;
      return this;
    }

    public void unsetAccessId() {
      this.accessId = null;
    }

    /** Returns true if field accessId is set (has been assigned a value) and false otherwise */
    public boolean isSetAccessId() {
      return this.accessId != null;
    }

    public void setAccessIdIsSet(boolean value) {
      if (!value) {
        this.accessId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case ACCESS_ID:
        if (value == null) {
          unsetAccessId();
        } else {
          setAccessId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case ACCESS_ID:
        return getAccessId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case ACCESS_ID:
        return isSetAccessId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTags_args)
        return this.equals((getTags_args)that);
      return false;
    }

    public boolean equals(getTags_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_accessId = true && this.isSetAccessId();
      boolean that_present_accessId = true && that.isSetAccessId();
      if (this_present_accessId || that_present_accessId) {
        if (!(this_present_accessId && that_present_accessId))
          return false;
        if (!this.accessId.equals(that.accessId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getTags_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getTags_args typedOther = (getTags_args)other;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(typedOther.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, typedOther.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAccessId()).compareTo(typedOther.isSetAccessId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccessId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accessId, typedOther.accessId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // TOKEN
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.token = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // ACCESS_ID
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.accessId = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.token != null) {
        oprot.writeFieldBegin(TOKEN_FIELD_DESC);
        oprot.writeString(this.token);
        oprot.writeFieldEnd();
      }
      if (this.accessId != null) {
        oprot.writeFieldBegin(ACCESS_ID_FIELD_DESC);
        oprot.writeString(this.accessId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTags_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("accessId:");
      if (this.accessId == null) {
        sb.append("null");
      } else {
        sb.append(this.accessId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getTags_result implements org.apache.thrift.TBase<getTags_result, getTags_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTags_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_F_FIELD_DESC = new org.apache.thrift.protocol.TField("eF", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField E_E_FIELD_DESC = new org.apache.thrift.protocol.TField("eE", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField E_TNF_FIELD_DESC = new org.apache.thrift.protocol.TField("eTNF", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField E_NF_FIELD_DESC = new org.apache.thrift.protocol.TField("eNF", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    public List<everfeeds.thrift.domain.Tag> success;
    public everfeeds.thrift.error.Forbidden eF;
    public everfeeds.thrift.error.TokenExpired eE;
    public everfeeds.thrift.error.TokenNotFound eTNF;
    public everfeeds.thrift.error.NotFound eNF;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E_F((short)1, "eF"),
      E_E((short)2, "eE"),
      E_TNF((short)3, "eTNF"),
      E_NF((short)4, "eNF");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E_F
            return E_F;
          case 2: // E_E
            return E_E;
          case 3: // E_TNF
            return E_TNF;
          case 4: // E_NF
            return E_NF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, everfeeds.thrift.domain.Tag.class))));
      tmpMap.put(_Fields.E_F, new org.apache.thrift.meta_data.FieldMetaData("eF", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_E, new org.apache.thrift.meta_data.FieldMetaData("eE", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_TNF, new org.apache.thrift.meta_data.FieldMetaData("eTNF", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_NF, new org.apache.thrift.meta_data.FieldMetaData("eNF", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTags_result.class, metaDataMap);
    }

    public getTags_result() {
    }

    public getTags_result(
      List<everfeeds.thrift.domain.Tag> success,
      everfeeds.thrift.error.Forbidden eF,
      everfeeds.thrift.error.TokenExpired eE,
      everfeeds.thrift.error.TokenNotFound eTNF,
      everfeeds.thrift.error.NotFound eNF)
    {
      this();
      this.success = success;
      this.eF = eF;
      this.eE = eE;
      this.eTNF = eTNF;
      this.eNF = eNF;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTags_result(getTags_result other) {
      if (other.isSetSuccess()) {
        List<everfeeds.thrift.domain.Tag> __this__success = new ArrayList<everfeeds.thrift.domain.Tag>();
        for (everfeeds.thrift.domain.Tag other_element : other.success) {
          __this__success.add(new everfeeds.thrift.domain.Tag(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetEF()) {
        this.eF = new everfeeds.thrift.error.Forbidden(other.eF);
      }
      if (other.isSetEE()) {
        this.eE = new everfeeds.thrift.error.TokenExpired(other.eE);
      }
      if (other.isSetETNF()) {
        this.eTNF = new everfeeds.thrift.error.TokenNotFound(other.eTNF);
      }
      if (other.isSetENF()) {
        this.eNF = new everfeeds.thrift.error.NotFound(other.eNF);
      }
    }

    public getTags_result deepCopy() {
      return new getTags_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.eF = null;
      this.eE = null;
      this.eTNF = null;
      this.eNF = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<everfeeds.thrift.domain.Tag> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(everfeeds.thrift.domain.Tag elem) {
      if (this.success == null) {
        this.success = new ArrayList<everfeeds.thrift.domain.Tag>();
      }
      this.success.add(elem);
    }

    public List<everfeeds.thrift.domain.Tag> getSuccess() {
      return this.success;
    }

    public getTags_result setSuccess(List<everfeeds.thrift.domain.Tag> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public everfeeds.thrift.error.Forbidden getEF() {
      return this.eF;
    }

    public getTags_result setEF(everfeeds.thrift.error.Forbidden eF) {
      this.eF = eF;
      return this;
    }

    public void unsetEF() {
      this.eF = null;
    }

    /** Returns true if field eF is set (has been assigned a value) and false otherwise */
    public boolean isSetEF() {
      return this.eF != null;
    }

    public void setEFIsSet(boolean value) {
      if (!value) {
        this.eF = null;
      }
    }

    public everfeeds.thrift.error.TokenExpired getEE() {
      return this.eE;
    }

    public getTags_result setEE(everfeeds.thrift.error.TokenExpired eE) {
      this.eE = eE;
      return this;
    }

    public void unsetEE() {
      this.eE = null;
    }

    /** Returns true if field eE is set (has been assigned a value) and false otherwise */
    public boolean isSetEE() {
      return this.eE != null;
    }

    public void setEEIsSet(boolean value) {
      if (!value) {
        this.eE = null;
      }
    }

    public everfeeds.thrift.error.TokenNotFound getETNF() {
      return this.eTNF;
    }

    public getTags_result setETNF(everfeeds.thrift.error.TokenNotFound eTNF) {
      this.eTNF = eTNF;
      return this;
    }

    public void unsetETNF() {
      this.eTNF = null;
    }

    /** Returns true if field eTNF is set (has been assigned a value) and false otherwise */
    public boolean isSetETNF() {
      return this.eTNF != null;
    }

    public void setETNFIsSet(boolean value) {
      if (!value) {
        this.eTNF = null;
      }
    }

    public everfeeds.thrift.error.NotFound getENF() {
      return this.eNF;
    }

    public getTags_result setENF(everfeeds.thrift.error.NotFound eNF) {
      this.eNF = eNF;
      return this;
    }

    public void unsetENF() {
      this.eNF = null;
    }

    /** Returns true if field eNF is set (has been assigned a value) and false otherwise */
    public boolean isSetENF() {
      return this.eNF != null;
    }

    public void setENFIsSet(boolean value) {
      if (!value) {
        this.eNF = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<everfeeds.thrift.domain.Tag>)value);
        }
        break;

      case E_F:
        if (value == null) {
          unsetEF();
        } else {
          setEF((everfeeds.thrift.error.Forbidden)value);
        }
        break;

      case E_E:
        if (value == null) {
          unsetEE();
        } else {
          setEE((everfeeds.thrift.error.TokenExpired)value);
        }
        break;

      case E_TNF:
        if (value == null) {
          unsetETNF();
        } else {
          setETNF((everfeeds.thrift.error.TokenNotFound)value);
        }
        break;

      case E_NF:
        if (value == null) {
          unsetENF();
        } else {
          setENF((everfeeds.thrift.error.NotFound)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E_F:
        return getEF();

      case E_E:
        return getEE();

      case E_TNF:
        return getETNF();

      case E_NF:
        return getENF();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E_F:
        return isSetEF();
      case E_E:
        return isSetEE();
      case E_TNF:
        return isSetETNF();
      case E_NF:
        return isSetENF();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTags_result)
        return this.equals((getTags_result)that);
      return false;
    }

    public boolean equals(getTags_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_eF = true && this.isSetEF();
      boolean that_present_eF = true && that.isSetEF();
      if (this_present_eF || that_present_eF) {
        if (!(this_present_eF && that_present_eF))
          return false;
        if (!this.eF.equals(that.eF))
          return false;
      }

      boolean this_present_eE = true && this.isSetEE();
      boolean that_present_eE = true && that.isSetEE();
      if (this_present_eE || that_present_eE) {
        if (!(this_present_eE && that_present_eE))
          return false;
        if (!this.eE.equals(that.eE))
          return false;
      }

      boolean this_present_eTNF = true && this.isSetETNF();
      boolean that_present_eTNF = true && that.isSetETNF();
      if (this_present_eTNF || that_present_eTNF) {
        if (!(this_present_eTNF && that_present_eTNF))
          return false;
        if (!this.eTNF.equals(that.eTNF))
          return false;
      }

      boolean this_present_eNF = true && this.isSetENF();
      boolean that_present_eNF = true && that.isSetENF();
      if (this_present_eNF || that_present_eNF) {
        if (!(this_present_eNF && that_present_eNF))
          return false;
        if (!this.eNF.equals(that.eNF))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getTags_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getTags_result typedOther = (getTags_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEF()).compareTo(typedOther.isSetEF());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEF()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eF, typedOther.eF);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEE()).compareTo(typedOther.isSetEE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eE, typedOther.eE);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetETNF()).compareTo(typedOther.isSetETNF());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetETNF()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eTNF, typedOther.eTNF);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetENF()).compareTo(typedOther.isSetENF());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetENF()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eNF, typedOther.eNF);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list20 = iprot.readListBegin();
                this.success = new ArrayList<everfeeds.thrift.domain.Tag>(_list20.size);
                for (int _i21 = 0; _i21 < _list20.size; ++_i21)
                {
                  everfeeds.thrift.domain.Tag _elem22;
                  _elem22 = new everfeeds.thrift.domain.Tag();
                  _elem22.read(iprot);
                  this.success.add(_elem22);
                }
                iprot.readListEnd();
              }
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E_F
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eF = new everfeeds.thrift.error.Forbidden();
              this.eF.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // E_E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eE = new everfeeds.thrift.error.TokenExpired();
              this.eE.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // E_TNF
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eTNF = new everfeeds.thrift.error.TokenNotFound();
              this.eTNF.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // E_NF
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eNF = new everfeeds.thrift.error.NotFound();
              this.eNF.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, this.success.size()));
          for (everfeeds.thrift.domain.Tag _iter23 : this.success)
          {
            _iter23.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetEF()) {
        oprot.writeFieldBegin(E_F_FIELD_DESC);
        this.eF.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetEE()) {
        oprot.writeFieldBegin(E_E_FIELD_DESC);
        this.eE.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetETNF()) {
        oprot.writeFieldBegin(E_TNF_FIELD_DESC);
        this.eTNF.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetENF()) {
        oprot.writeFieldBegin(E_NF_FIELD_DESC);
        this.eNF.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTags_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eF:");
      if (this.eF == null) {
        sb.append("null");
      } else {
        sb.append(this.eF);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eE:");
      if (this.eE == null) {
        sb.append("null");
      } else {
        sb.append(this.eE);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eTNF:");
      if (this.eTNF == null) {
        sb.append("null");
      } else {
        sb.append(this.eTNF);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eNF:");
      if (this.eNF == null) {
        sb.append("null");
      } else {
        sb.append(this.eNF);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getCategories_args implements org.apache.thrift.TBase<getCategories_args, getCategories_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCategories_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ACCESS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("accessId", org.apache.thrift.protocol.TType.STRING, (short)5);

    public String token;
    public String accessId;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token"),
      ACCESS_ID((short)5, "accessId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 5: // ACCESS_ID
            return ACCESS_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "String")));
      tmpMap.put(_Fields.ACCESS_ID, new org.apache.thrift.meta_data.FieldMetaData("accessId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "Id")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCategories_args.class, metaDataMap);
    }

    public getCategories_args() {
    }

    public getCategories_args(
      String token,
      String accessId)
    {
      this();
      this.token = token;
      this.accessId = accessId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCategories_args(getCategories_args other) {
      if (other.isSetToken()) {
        this.token = other.token;
      }
      if (other.isSetAccessId()) {
        this.accessId = other.accessId;
      }
    }

    public getCategories_args deepCopy() {
      return new getCategories_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      this.accessId = null;
    }

    public String getToken() {
      return this.token;
    }

    public getCategories_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public String getAccessId() {
      return this.accessId;
    }

    public getCategories_args setAccessId(String accessId) {
      this.accessId = accessId;
      return this;
    }

    public void unsetAccessId() {
      this.accessId = null;
    }

    /** Returns true if field accessId is set (has been assigned a value) and false otherwise */
    public boolean isSetAccessId() {
      return this.accessId != null;
    }

    public void setAccessIdIsSet(boolean value) {
      if (!value) {
        this.accessId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case ACCESS_ID:
        if (value == null) {
          unsetAccessId();
        } else {
          setAccessId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case ACCESS_ID:
        return getAccessId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case ACCESS_ID:
        return isSetAccessId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCategories_args)
        return this.equals((getCategories_args)that);
      return false;
    }

    public boolean equals(getCategories_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_accessId = true && this.isSetAccessId();
      boolean that_present_accessId = true && that.isSetAccessId();
      if (this_present_accessId || that_present_accessId) {
        if (!(this_present_accessId && that_present_accessId))
          return false;
        if (!this.accessId.equals(that.accessId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getCategories_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getCategories_args typedOther = (getCategories_args)other;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(typedOther.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, typedOther.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAccessId()).compareTo(typedOther.isSetAccessId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccessId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accessId, typedOther.accessId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // TOKEN
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.token = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // ACCESS_ID
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.accessId = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.token != null) {
        oprot.writeFieldBegin(TOKEN_FIELD_DESC);
        oprot.writeString(this.token);
        oprot.writeFieldEnd();
      }
      if (this.accessId != null) {
        oprot.writeFieldBegin(ACCESS_ID_FIELD_DESC);
        oprot.writeString(this.accessId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCategories_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("accessId:");
      if (this.accessId == null) {
        sb.append("null");
      } else {
        sb.append(this.accessId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getCategories_result implements org.apache.thrift.TBase<getCategories_result, getCategories_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCategories_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_F_FIELD_DESC = new org.apache.thrift.protocol.TField("eF", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField E_E_FIELD_DESC = new org.apache.thrift.protocol.TField("eE", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField E_TNF_FIELD_DESC = new org.apache.thrift.protocol.TField("eTNF", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField E_NF_FIELD_DESC = new org.apache.thrift.protocol.TField("eNF", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    public List<everfeeds.thrift.domain.Category> success;
    public everfeeds.thrift.error.Forbidden eF;
    public everfeeds.thrift.error.TokenExpired eE;
    public everfeeds.thrift.error.TokenNotFound eTNF;
    public everfeeds.thrift.error.NotFound eNF;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E_F((short)1, "eF"),
      E_E((short)2, "eE"),
      E_TNF((short)3, "eTNF"),
      E_NF((short)4, "eNF");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E_F
            return E_F;
          case 2: // E_E
            return E_E;
          case 3: // E_TNF
            return E_TNF;
          case 4: // E_NF
            return E_NF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, everfeeds.thrift.domain.Category.class))));
      tmpMap.put(_Fields.E_F, new org.apache.thrift.meta_data.FieldMetaData("eF", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_E, new org.apache.thrift.meta_data.FieldMetaData("eE", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_TNF, new org.apache.thrift.meta_data.FieldMetaData("eTNF", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_NF, new org.apache.thrift.meta_data.FieldMetaData("eNF", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCategories_result.class, metaDataMap);
    }

    public getCategories_result() {
    }

    public getCategories_result(
      List<everfeeds.thrift.domain.Category> success,
      everfeeds.thrift.error.Forbidden eF,
      everfeeds.thrift.error.TokenExpired eE,
      everfeeds.thrift.error.TokenNotFound eTNF,
      everfeeds.thrift.error.NotFound eNF)
    {
      this();
      this.success = success;
      this.eF = eF;
      this.eE = eE;
      this.eTNF = eTNF;
      this.eNF = eNF;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCategories_result(getCategories_result other) {
      if (other.isSetSuccess()) {
        List<everfeeds.thrift.domain.Category> __this__success = new ArrayList<everfeeds.thrift.domain.Category>();
        for (everfeeds.thrift.domain.Category other_element : other.success) {
          __this__success.add(new everfeeds.thrift.domain.Category(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetEF()) {
        this.eF = new everfeeds.thrift.error.Forbidden(other.eF);
      }
      if (other.isSetEE()) {
        this.eE = new everfeeds.thrift.error.TokenExpired(other.eE);
      }
      if (other.isSetETNF()) {
        this.eTNF = new everfeeds.thrift.error.TokenNotFound(other.eTNF);
      }
      if (other.isSetENF()) {
        this.eNF = new everfeeds.thrift.error.NotFound(other.eNF);
      }
    }

    public getCategories_result deepCopy() {
      return new getCategories_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.eF = null;
      this.eE = null;
      this.eTNF = null;
      this.eNF = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<everfeeds.thrift.domain.Category> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(everfeeds.thrift.domain.Category elem) {
      if (this.success == null) {
        this.success = new ArrayList<everfeeds.thrift.domain.Category>();
      }
      this.success.add(elem);
    }

    public List<everfeeds.thrift.domain.Category> getSuccess() {
      return this.success;
    }

    public getCategories_result setSuccess(List<everfeeds.thrift.domain.Category> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public everfeeds.thrift.error.Forbidden getEF() {
      return this.eF;
    }

    public getCategories_result setEF(everfeeds.thrift.error.Forbidden eF) {
      this.eF = eF;
      return this;
    }

    public void unsetEF() {
      this.eF = null;
    }

    /** Returns true if field eF is set (has been assigned a value) and false otherwise */
    public boolean isSetEF() {
      return this.eF != null;
    }

    public void setEFIsSet(boolean value) {
      if (!value) {
        this.eF = null;
      }
    }

    public everfeeds.thrift.error.TokenExpired getEE() {
      return this.eE;
    }

    public getCategories_result setEE(everfeeds.thrift.error.TokenExpired eE) {
      this.eE = eE;
      return this;
    }

    public void unsetEE() {
      this.eE = null;
    }

    /** Returns true if field eE is set (has been assigned a value) and false otherwise */
    public boolean isSetEE() {
      return this.eE != null;
    }

    public void setEEIsSet(boolean value) {
      if (!value) {
        this.eE = null;
      }
    }

    public everfeeds.thrift.error.TokenNotFound getETNF() {
      return this.eTNF;
    }

    public getCategories_result setETNF(everfeeds.thrift.error.TokenNotFound eTNF) {
      this.eTNF = eTNF;
      return this;
    }

    public void unsetETNF() {
      this.eTNF = null;
    }

    /** Returns true if field eTNF is set (has been assigned a value) and false otherwise */
    public boolean isSetETNF() {
      return this.eTNF != null;
    }

    public void setETNFIsSet(boolean value) {
      if (!value) {
        this.eTNF = null;
      }
    }

    public everfeeds.thrift.error.NotFound getENF() {
      return this.eNF;
    }

    public getCategories_result setENF(everfeeds.thrift.error.NotFound eNF) {
      this.eNF = eNF;
      return this;
    }

    public void unsetENF() {
      this.eNF = null;
    }

    /** Returns true if field eNF is set (has been assigned a value) and false otherwise */
    public boolean isSetENF() {
      return this.eNF != null;
    }

    public void setENFIsSet(boolean value) {
      if (!value) {
        this.eNF = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<everfeeds.thrift.domain.Category>)value);
        }
        break;

      case E_F:
        if (value == null) {
          unsetEF();
        } else {
          setEF((everfeeds.thrift.error.Forbidden)value);
        }
        break;

      case E_E:
        if (value == null) {
          unsetEE();
        } else {
          setEE((everfeeds.thrift.error.TokenExpired)value);
        }
        break;

      case E_TNF:
        if (value == null) {
          unsetETNF();
        } else {
          setETNF((everfeeds.thrift.error.TokenNotFound)value);
        }
        break;

      case E_NF:
        if (value == null) {
          unsetENF();
        } else {
          setENF((everfeeds.thrift.error.NotFound)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E_F:
        return getEF();

      case E_E:
        return getEE();

      case E_TNF:
        return getETNF();

      case E_NF:
        return getENF();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E_F:
        return isSetEF();
      case E_E:
        return isSetEE();
      case E_TNF:
        return isSetETNF();
      case E_NF:
        return isSetENF();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCategories_result)
        return this.equals((getCategories_result)that);
      return false;
    }

    public boolean equals(getCategories_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_eF = true && this.isSetEF();
      boolean that_present_eF = true && that.isSetEF();
      if (this_present_eF || that_present_eF) {
        if (!(this_present_eF && that_present_eF))
          return false;
        if (!this.eF.equals(that.eF))
          return false;
      }

      boolean this_present_eE = true && this.isSetEE();
      boolean that_present_eE = true && that.isSetEE();
      if (this_present_eE || that_present_eE) {
        if (!(this_present_eE && that_present_eE))
          return false;
        if (!this.eE.equals(that.eE))
          return false;
      }

      boolean this_present_eTNF = true && this.isSetETNF();
      boolean that_present_eTNF = true && that.isSetETNF();
      if (this_present_eTNF || that_present_eTNF) {
        if (!(this_present_eTNF && that_present_eTNF))
          return false;
        if (!this.eTNF.equals(that.eTNF))
          return false;
      }

      boolean this_present_eNF = true && this.isSetENF();
      boolean that_present_eNF = true && that.isSetENF();
      if (this_present_eNF || that_present_eNF) {
        if (!(this_present_eNF && that_present_eNF))
          return false;
        if (!this.eNF.equals(that.eNF))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getCategories_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getCategories_result typedOther = (getCategories_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEF()).compareTo(typedOther.isSetEF());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEF()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eF, typedOther.eF);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEE()).compareTo(typedOther.isSetEE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eE, typedOther.eE);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetETNF()).compareTo(typedOther.isSetETNF());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetETNF()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eTNF, typedOther.eTNF);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetENF()).compareTo(typedOther.isSetENF());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetENF()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eNF, typedOther.eNF);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                this.success = new ArrayList<everfeeds.thrift.domain.Category>(_list24.size);
                for (int _i25 = 0; _i25 < _list24.size; ++_i25)
                {
                  everfeeds.thrift.domain.Category _elem26;
                  _elem26 = new everfeeds.thrift.domain.Category();
                  _elem26.read(iprot);
                  this.success.add(_elem26);
                }
                iprot.readListEnd();
              }
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E_F
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eF = new everfeeds.thrift.error.Forbidden();
              this.eF.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // E_E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eE = new everfeeds.thrift.error.TokenExpired();
              this.eE.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // E_TNF
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eTNF = new everfeeds.thrift.error.TokenNotFound();
              this.eTNF.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // E_NF
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eNF = new everfeeds.thrift.error.NotFound();
              this.eNF.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, this.success.size()));
          for (everfeeds.thrift.domain.Category _iter27 : this.success)
          {
            _iter27.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetEF()) {
        oprot.writeFieldBegin(E_F_FIELD_DESC);
        this.eF.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetEE()) {
        oprot.writeFieldBegin(E_E_FIELD_DESC);
        this.eE.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetETNF()) {
        oprot.writeFieldBegin(E_TNF_FIELD_DESC);
        this.eTNF.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetENF()) {
        oprot.writeFieldBegin(E_NF_FIELD_DESC);
        this.eNF.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCategories_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eF:");
      if (this.eF == null) {
        sb.append("null");
      } else {
        sb.append(this.eF);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eE:");
      if (this.eE == null) {
        sb.append("null");
      } else {
        sb.append(this.eE);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eTNF:");
      if (this.eTNF == null) {
        sb.append("null");
      } else {
        sb.append(this.eTNF);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eNF:");
      if (this.eNF == null) {
        sb.append("null");
      } else {
        sb.append(this.eNF);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getKinds_args implements org.apache.thrift.TBase<getKinds_args, getKinds_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getKinds_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ACCESS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("accessId", org.apache.thrift.protocol.TType.STRING, (short)5);

    public String token;
    public String accessId;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token"),
      ACCESS_ID((short)5, "accessId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 5: // ACCESS_ID
            return ACCESS_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "String")));
      tmpMap.put(_Fields.ACCESS_ID, new org.apache.thrift.meta_data.FieldMetaData("accessId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "Id")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getKinds_args.class, metaDataMap);
    }

    public getKinds_args() {
    }

    public getKinds_args(
      String token,
      String accessId)
    {
      this();
      this.token = token;
      this.accessId = accessId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getKinds_args(getKinds_args other) {
      if (other.isSetToken()) {
        this.token = other.token;
      }
      if (other.isSetAccessId()) {
        this.accessId = other.accessId;
      }
    }

    public getKinds_args deepCopy() {
      return new getKinds_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      this.accessId = null;
    }

    public String getToken() {
      return this.token;
    }

    public getKinds_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public String getAccessId() {
      return this.accessId;
    }

    public getKinds_args setAccessId(String accessId) {
      this.accessId = accessId;
      return this;
    }

    public void unsetAccessId() {
      this.accessId = null;
    }

    /** Returns true if field accessId is set (has been assigned a value) and false otherwise */
    public boolean isSetAccessId() {
      return this.accessId != null;
    }

    public void setAccessIdIsSet(boolean value) {
      if (!value) {
        this.accessId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case ACCESS_ID:
        if (value == null) {
          unsetAccessId();
        } else {
          setAccessId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case ACCESS_ID:
        return getAccessId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case ACCESS_ID:
        return isSetAccessId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getKinds_args)
        return this.equals((getKinds_args)that);
      return false;
    }

    public boolean equals(getKinds_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_accessId = true && this.isSetAccessId();
      boolean that_present_accessId = true && that.isSetAccessId();
      if (this_present_accessId || that_present_accessId) {
        if (!(this_present_accessId && that_present_accessId))
          return false;
        if (!this.accessId.equals(that.accessId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getKinds_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getKinds_args typedOther = (getKinds_args)other;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(typedOther.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, typedOther.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAccessId()).compareTo(typedOther.isSetAccessId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccessId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accessId, typedOther.accessId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // TOKEN
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.token = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // ACCESS_ID
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.accessId = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.token != null) {
        oprot.writeFieldBegin(TOKEN_FIELD_DESC);
        oprot.writeString(this.token);
        oprot.writeFieldEnd();
      }
      if (this.accessId != null) {
        oprot.writeFieldBegin(ACCESS_ID_FIELD_DESC);
        oprot.writeString(this.accessId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getKinds_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("accessId:");
      if (this.accessId == null) {
        sb.append("null");
      } else {
        sb.append(this.accessId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getKinds_result implements org.apache.thrift.TBase<getKinds_result, getKinds_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getKinds_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_F_FIELD_DESC = new org.apache.thrift.protocol.TField("eF", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField E_E_FIELD_DESC = new org.apache.thrift.protocol.TField("eE", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField E_TNF_FIELD_DESC = new org.apache.thrift.protocol.TField("eTNF", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField E_NF_FIELD_DESC = new org.apache.thrift.protocol.TField("eNF", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    public List<everfeeds.thrift.ttype.EntryKind> success;
    public everfeeds.thrift.error.Forbidden eF;
    public everfeeds.thrift.error.TokenExpired eE;
    public everfeeds.thrift.error.TokenNotFound eTNF;
    public everfeeds.thrift.error.NotFound eNF;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E_F((short)1, "eF"),
      E_E((short)2, "eE"),
      E_TNF((short)3, "eTNF"),
      E_NF((short)4, "eNF");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E_F
            return E_F;
          case 2: // E_E
            return E_E;
          case 3: // E_TNF
            return E_TNF;
          case 4: // E_NF
            return E_NF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, everfeeds.thrift.ttype.EntryKind.class))));
      tmpMap.put(_Fields.E_F, new org.apache.thrift.meta_data.FieldMetaData("eF", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_E, new org.apache.thrift.meta_data.FieldMetaData("eE", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_TNF, new org.apache.thrift.meta_data.FieldMetaData("eTNF", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_NF, new org.apache.thrift.meta_data.FieldMetaData("eNF", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getKinds_result.class, metaDataMap);
    }

    public getKinds_result() {
    }

    public getKinds_result(
      List<everfeeds.thrift.ttype.EntryKind> success,
      everfeeds.thrift.error.Forbidden eF,
      everfeeds.thrift.error.TokenExpired eE,
      everfeeds.thrift.error.TokenNotFound eTNF,
      everfeeds.thrift.error.NotFound eNF)
    {
      this();
      this.success = success;
      this.eF = eF;
      this.eE = eE;
      this.eTNF = eTNF;
      this.eNF = eNF;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getKinds_result(getKinds_result other) {
      if (other.isSetSuccess()) {
        List<everfeeds.thrift.ttype.EntryKind> __this__success = new ArrayList<everfeeds.thrift.ttype.EntryKind>();
        for (everfeeds.thrift.ttype.EntryKind other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetEF()) {
        this.eF = new everfeeds.thrift.error.Forbidden(other.eF);
      }
      if (other.isSetEE()) {
        this.eE = new everfeeds.thrift.error.TokenExpired(other.eE);
      }
      if (other.isSetETNF()) {
        this.eTNF = new everfeeds.thrift.error.TokenNotFound(other.eTNF);
      }
      if (other.isSetENF()) {
        this.eNF = new everfeeds.thrift.error.NotFound(other.eNF);
      }
    }

    public getKinds_result deepCopy() {
      return new getKinds_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.eF = null;
      this.eE = null;
      this.eTNF = null;
      this.eNF = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<everfeeds.thrift.ttype.EntryKind> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(everfeeds.thrift.ttype.EntryKind elem) {
      if (this.success == null) {
        this.success = new ArrayList<everfeeds.thrift.ttype.EntryKind>();
      }
      this.success.add(elem);
    }

    public List<everfeeds.thrift.ttype.EntryKind> getSuccess() {
      return this.success;
    }

    public getKinds_result setSuccess(List<everfeeds.thrift.ttype.EntryKind> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public everfeeds.thrift.error.Forbidden getEF() {
      return this.eF;
    }

    public getKinds_result setEF(everfeeds.thrift.error.Forbidden eF) {
      this.eF = eF;
      return this;
    }

    public void unsetEF() {
      this.eF = null;
    }

    /** Returns true if field eF is set (has been assigned a value) and false otherwise */
    public boolean isSetEF() {
      return this.eF != null;
    }

    public void setEFIsSet(boolean value) {
      if (!value) {
        this.eF = null;
      }
    }

    public everfeeds.thrift.error.TokenExpired getEE() {
      return this.eE;
    }

    public getKinds_result setEE(everfeeds.thrift.error.TokenExpired eE) {
      this.eE = eE;
      return this;
    }

    public void unsetEE() {
      this.eE = null;
    }

    /** Returns true if field eE is set (has been assigned a value) and false otherwise */
    public boolean isSetEE() {
      return this.eE != null;
    }

    public void setEEIsSet(boolean value) {
      if (!value) {
        this.eE = null;
      }
    }

    public everfeeds.thrift.error.TokenNotFound getETNF() {
      return this.eTNF;
    }

    public getKinds_result setETNF(everfeeds.thrift.error.TokenNotFound eTNF) {
      this.eTNF = eTNF;
      return this;
    }

    public void unsetETNF() {
      this.eTNF = null;
    }

    /** Returns true if field eTNF is set (has been assigned a value) and false otherwise */
    public boolean isSetETNF() {
      return this.eTNF != null;
    }

    public void setETNFIsSet(boolean value) {
      if (!value) {
        this.eTNF = null;
      }
    }

    public everfeeds.thrift.error.NotFound getENF() {
      return this.eNF;
    }

    public getKinds_result setENF(everfeeds.thrift.error.NotFound eNF) {
      this.eNF = eNF;
      return this;
    }

    public void unsetENF() {
      this.eNF = null;
    }

    /** Returns true if field eNF is set (has been assigned a value) and false otherwise */
    public boolean isSetENF() {
      return this.eNF != null;
    }

    public void setENFIsSet(boolean value) {
      if (!value) {
        this.eNF = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<everfeeds.thrift.ttype.EntryKind>)value);
        }
        break;

      case E_F:
        if (value == null) {
          unsetEF();
        } else {
          setEF((everfeeds.thrift.error.Forbidden)value);
        }
        break;

      case E_E:
        if (value == null) {
          unsetEE();
        } else {
          setEE((everfeeds.thrift.error.TokenExpired)value);
        }
        break;

      case E_TNF:
        if (value == null) {
          unsetETNF();
        } else {
          setETNF((everfeeds.thrift.error.TokenNotFound)value);
        }
        break;

      case E_NF:
        if (value == null) {
          unsetENF();
        } else {
          setENF((everfeeds.thrift.error.NotFound)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E_F:
        return getEF();

      case E_E:
        return getEE();

      case E_TNF:
        return getETNF();

      case E_NF:
        return getENF();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E_F:
        return isSetEF();
      case E_E:
        return isSetEE();
      case E_TNF:
        return isSetETNF();
      case E_NF:
        return isSetENF();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getKinds_result)
        return this.equals((getKinds_result)that);
      return false;
    }

    public boolean equals(getKinds_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_eF = true && this.isSetEF();
      boolean that_present_eF = true && that.isSetEF();
      if (this_present_eF || that_present_eF) {
        if (!(this_present_eF && that_present_eF))
          return false;
        if (!this.eF.equals(that.eF))
          return false;
      }

      boolean this_present_eE = true && this.isSetEE();
      boolean that_present_eE = true && that.isSetEE();
      if (this_present_eE || that_present_eE) {
        if (!(this_present_eE && that_present_eE))
          return false;
        if (!this.eE.equals(that.eE))
          return false;
      }

      boolean this_present_eTNF = true && this.isSetETNF();
      boolean that_present_eTNF = true && that.isSetETNF();
      if (this_present_eTNF || that_present_eTNF) {
        if (!(this_present_eTNF && that_present_eTNF))
          return false;
        if (!this.eTNF.equals(that.eTNF))
          return false;
      }

      boolean this_present_eNF = true && this.isSetENF();
      boolean that_present_eNF = true && that.isSetENF();
      if (this_present_eNF || that_present_eNF) {
        if (!(this_present_eNF && that_present_eNF))
          return false;
        if (!this.eNF.equals(that.eNF))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getKinds_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getKinds_result typedOther = (getKinds_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEF()).compareTo(typedOther.isSetEF());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEF()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eF, typedOther.eF);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEE()).compareTo(typedOther.isSetEE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eE, typedOther.eE);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetETNF()).compareTo(typedOther.isSetETNF());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetETNF()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eTNF, typedOther.eTNF);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetENF()).compareTo(typedOther.isSetENF());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetENF()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eNF, typedOther.eNF);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list28 = iprot.readListBegin();
                this.success = new ArrayList<everfeeds.thrift.ttype.EntryKind>(_list28.size);
                for (int _i29 = 0; _i29 < _list28.size; ++_i29)
                {
                  everfeeds.thrift.ttype.EntryKind _elem30;
                  _elem30 = everfeeds.thrift.ttype.EntryKind.findByValue(iprot.readI32());
                  this.success.add(_elem30);
                }
                iprot.readListEnd();
              }
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E_F
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eF = new everfeeds.thrift.error.Forbidden();
              this.eF.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // E_E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eE = new everfeeds.thrift.error.TokenExpired();
              this.eE.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // E_TNF
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eTNF = new everfeeds.thrift.error.TokenNotFound();
              this.eTNF.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // E_NF
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eNF = new everfeeds.thrift.error.NotFound();
              this.eNF.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, this.success.size()));
          for (everfeeds.thrift.ttype.EntryKind _iter31 : this.success)
          {
            oprot.writeI32(_iter31.getValue());
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetEF()) {
        oprot.writeFieldBegin(E_F_FIELD_DESC);
        this.eF.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetEE()) {
        oprot.writeFieldBegin(E_E_FIELD_DESC);
        this.eE.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetETNF()) {
        oprot.writeFieldBegin(E_TNF_FIELD_DESC);
        this.eTNF.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetENF()) {
        oprot.writeFieldBegin(E_NF_FIELD_DESC);
        this.eNF.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getKinds_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eF:");
      if (this.eF == null) {
        sb.append("null");
      } else {
        sb.append(this.eF);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eE:");
      if (this.eE == null) {
        sb.append("null");
      } else {
        sb.append(this.eE);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eTNF:");
      if (this.eTNF == null) {
        sb.append("null");
      } else {
        sb.append(this.eTNF);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eNF:");
      if (this.eNF == null) {
        sb.append("null");
      } else {
        sb.append(this.eNF);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class saveTag_args implements org.apache.thrift.TBase<saveTag_args, saveTag_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveTag_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField TAG_FIELD_DESC = new org.apache.thrift.protocol.TField("tag", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    public String token;
    public everfeeds.thrift.domain.Tag tag;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token"),
      TAG((short)3, "tag");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 3: // TAG
            return TAG;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "String")));
      tmpMap.put(_Fields.TAG, new org.apache.thrift.meta_data.FieldMetaData("tag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, everfeeds.thrift.domain.Tag.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveTag_args.class, metaDataMap);
    }

    public saveTag_args() {
    }

    public saveTag_args(
      String token,
      everfeeds.thrift.domain.Tag tag)
    {
      this();
      this.token = token;
      this.tag = tag;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveTag_args(saveTag_args other) {
      if (other.isSetToken()) {
        this.token = other.token;
      }
      if (other.isSetTag()) {
        this.tag = new everfeeds.thrift.domain.Tag(other.tag);
      }
    }

    public saveTag_args deepCopy() {
      return new saveTag_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      this.tag = null;
    }

    public String getToken() {
      return this.token;
    }

    public saveTag_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public everfeeds.thrift.domain.Tag getTag() {
      return this.tag;
    }

    public saveTag_args setTag(everfeeds.thrift.domain.Tag tag) {
      this.tag = tag;
      return this;
    }

    public void unsetTag() {
      this.tag = null;
    }

    /** Returns true if field tag is set (has been assigned a value) and false otherwise */
    public boolean isSetTag() {
      return this.tag != null;
    }

    public void setTagIsSet(boolean value) {
      if (!value) {
        this.tag = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case TAG:
        if (value == null) {
          unsetTag();
        } else {
          setTag((everfeeds.thrift.domain.Tag)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case TAG:
        return getTag();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case TAG:
        return isSetTag();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveTag_args)
        return this.equals((saveTag_args)that);
      return false;
    }

    public boolean equals(saveTag_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_tag = true && this.isSetTag();
      boolean that_present_tag = true && that.isSetTag();
      if (this_present_tag || that_present_tag) {
        if (!(this_present_tag && that_present_tag))
          return false;
        if (!this.tag.equals(that.tag))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(saveTag_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      saveTag_args typedOther = (saveTag_args)other;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(typedOther.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, typedOther.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTag()).compareTo(typedOther.isSetTag());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTag()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tag, typedOther.tag);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // TOKEN
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.token = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // TAG
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.tag = new everfeeds.thrift.domain.Tag();
              this.tag.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.token != null) {
        oprot.writeFieldBegin(TOKEN_FIELD_DESC);
        oprot.writeString(this.token);
        oprot.writeFieldEnd();
      }
      if (this.tag != null) {
        oprot.writeFieldBegin(TAG_FIELD_DESC);
        this.tag.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveTag_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tag:");
      if (this.tag == null) {
        sb.append("null");
      } else {
        sb.append(this.tag);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class saveTag_result implements org.apache.thrift.TBase<saveTag_result, saveTag_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveTag_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_F_FIELD_DESC = new org.apache.thrift.protocol.TField("eF", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField E_E_FIELD_DESC = new org.apache.thrift.protocol.TField("eE", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField E_TNF_FIELD_DESC = new org.apache.thrift.protocol.TField("eTNF", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField E_NF_FIELD_DESC = new org.apache.thrift.protocol.TField("eNF", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    public everfeeds.thrift.domain.Tag success;
    public everfeeds.thrift.error.Forbidden eF;
    public everfeeds.thrift.error.TokenExpired eE;
    public everfeeds.thrift.error.TokenNotFound eTNF;
    public everfeeds.thrift.error.NotFound eNF;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E_F((short)1, "eF"),
      E_E((short)2, "eE"),
      E_TNF((short)3, "eTNF"),
      E_NF((short)4, "eNF");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E_F
            return E_F;
          case 2: // E_E
            return E_E;
          case 3: // E_TNF
            return E_TNF;
          case 4: // E_NF
            return E_NF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, everfeeds.thrift.domain.Tag.class)));
      tmpMap.put(_Fields.E_F, new org.apache.thrift.meta_data.FieldMetaData("eF", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_E, new org.apache.thrift.meta_data.FieldMetaData("eE", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_TNF, new org.apache.thrift.meta_data.FieldMetaData("eTNF", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_NF, new org.apache.thrift.meta_data.FieldMetaData("eNF", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveTag_result.class, metaDataMap);
    }

    public saveTag_result() {
    }

    public saveTag_result(
      everfeeds.thrift.domain.Tag success,
      everfeeds.thrift.error.Forbidden eF,
      everfeeds.thrift.error.TokenExpired eE,
      everfeeds.thrift.error.TokenNotFound eTNF,
      everfeeds.thrift.error.NotFound eNF)
    {
      this();
      this.success = success;
      this.eF = eF;
      this.eE = eE;
      this.eTNF = eTNF;
      this.eNF = eNF;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveTag_result(saveTag_result other) {
      if (other.isSetSuccess()) {
        this.success = new everfeeds.thrift.domain.Tag(other.success);
      }
      if (other.isSetEF()) {
        this.eF = new everfeeds.thrift.error.Forbidden(other.eF);
      }
      if (other.isSetEE()) {
        this.eE = new everfeeds.thrift.error.TokenExpired(other.eE);
      }
      if (other.isSetETNF()) {
        this.eTNF = new everfeeds.thrift.error.TokenNotFound(other.eTNF);
      }
      if (other.isSetENF()) {
        this.eNF = new everfeeds.thrift.error.NotFound(other.eNF);
      }
    }

    public saveTag_result deepCopy() {
      return new saveTag_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.eF = null;
      this.eE = null;
      this.eTNF = null;
      this.eNF = null;
    }

    public everfeeds.thrift.domain.Tag getSuccess() {
      return this.success;
    }

    public saveTag_result setSuccess(everfeeds.thrift.domain.Tag success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public everfeeds.thrift.error.Forbidden getEF() {
      return this.eF;
    }

    public saveTag_result setEF(everfeeds.thrift.error.Forbidden eF) {
      this.eF = eF;
      return this;
    }

    public void unsetEF() {
      this.eF = null;
    }

    /** Returns true if field eF is set (has been assigned a value) and false otherwise */
    public boolean isSetEF() {
      return this.eF != null;
    }

    public void setEFIsSet(boolean value) {
      if (!value) {
        this.eF = null;
      }
    }

    public everfeeds.thrift.error.TokenExpired getEE() {
      return this.eE;
    }

    public saveTag_result setEE(everfeeds.thrift.error.TokenExpired eE) {
      this.eE = eE;
      return this;
    }

    public void unsetEE() {
      this.eE = null;
    }

    /** Returns true if field eE is set (has been assigned a value) and false otherwise */
    public boolean isSetEE() {
      return this.eE != null;
    }

    public void setEEIsSet(boolean value) {
      if (!value) {
        this.eE = null;
      }
    }

    public everfeeds.thrift.error.TokenNotFound getETNF() {
      return this.eTNF;
    }

    public saveTag_result setETNF(everfeeds.thrift.error.TokenNotFound eTNF) {
      this.eTNF = eTNF;
      return this;
    }

    public void unsetETNF() {
      this.eTNF = null;
    }

    /** Returns true if field eTNF is set (has been assigned a value) and false otherwise */
    public boolean isSetETNF() {
      return this.eTNF != null;
    }

    public void setETNFIsSet(boolean value) {
      if (!value) {
        this.eTNF = null;
      }
    }

    public everfeeds.thrift.error.NotFound getENF() {
      return this.eNF;
    }

    public saveTag_result setENF(everfeeds.thrift.error.NotFound eNF) {
      this.eNF = eNF;
      return this;
    }

    public void unsetENF() {
      this.eNF = null;
    }

    /** Returns true if field eNF is set (has been assigned a value) and false otherwise */
    public boolean isSetENF() {
      return this.eNF != null;
    }

    public void setENFIsSet(boolean value) {
      if (!value) {
        this.eNF = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((everfeeds.thrift.domain.Tag)value);
        }
        break;

      case E_F:
        if (value == null) {
          unsetEF();
        } else {
          setEF((everfeeds.thrift.error.Forbidden)value);
        }
        break;

      case E_E:
        if (value == null) {
          unsetEE();
        } else {
          setEE((everfeeds.thrift.error.TokenExpired)value);
        }
        break;

      case E_TNF:
        if (value == null) {
          unsetETNF();
        } else {
          setETNF((everfeeds.thrift.error.TokenNotFound)value);
        }
        break;

      case E_NF:
        if (value == null) {
          unsetENF();
        } else {
          setENF((everfeeds.thrift.error.NotFound)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E_F:
        return getEF();

      case E_E:
        return getEE();

      case E_TNF:
        return getETNF();

      case E_NF:
        return getENF();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E_F:
        return isSetEF();
      case E_E:
        return isSetEE();
      case E_TNF:
        return isSetETNF();
      case E_NF:
        return isSetENF();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveTag_result)
        return this.equals((saveTag_result)that);
      return false;
    }

    public boolean equals(saveTag_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_eF = true && this.isSetEF();
      boolean that_present_eF = true && that.isSetEF();
      if (this_present_eF || that_present_eF) {
        if (!(this_present_eF && that_present_eF))
          return false;
        if (!this.eF.equals(that.eF))
          return false;
      }

      boolean this_present_eE = true && this.isSetEE();
      boolean that_present_eE = true && that.isSetEE();
      if (this_present_eE || that_present_eE) {
        if (!(this_present_eE && that_present_eE))
          return false;
        if (!this.eE.equals(that.eE))
          return false;
      }

      boolean this_present_eTNF = true && this.isSetETNF();
      boolean that_present_eTNF = true && that.isSetETNF();
      if (this_present_eTNF || that_present_eTNF) {
        if (!(this_present_eTNF && that_present_eTNF))
          return false;
        if (!this.eTNF.equals(that.eTNF))
          return false;
      }

      boolean this_present_eNF = true && this.isSetENF();
      boolean that_present_eNF = true && that.isSetENF();
      if (this_present_eNF || that_present_eNF) {
        if (!(this_present_eNF && that_present_eNF))
          return false;
        if (!this.eNF.equals(that.eNF))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(saveTag_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      saveTag_result typedOther = (saveTag_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEF()).compareTo(typedOther.isSetEF());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEF()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eF, typedOther.eF);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEE()).compareTo(typedOther.isSetEE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eE, typedOther.eE);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetETNF()).compareTo(typedOther.isSetETNF());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetETNF()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eTNF, typedOther.eTNF);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetENF()).compareTo(typedOther.isSetENF());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetENF()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eNF, typedOther.eNF);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.success = new everfeeds.thrift.domain.Tag();
              this.success.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E_F
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eF = new everfeeds.thrift.error.Forbidden();
              this.eF.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // E_E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eE = new everfeeds.thrift.error.TokenExpired();
              this.eE.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // E_TNF
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eTNF = new everfeeds.thrift.error.TokenNotFound();
              this.eTNF.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // E_NF
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eNF = new everfeeds.thrift.error.NotFound();
              this.eNF.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetEF()) {
        oprot.writeFieldBegin(E_F_FIELD_DESC);
        this.eF.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetEE()) {
        oprot.writeFieldBegin(E_E_FIELD_DESC);
        this.eE.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetETNF()) {
        oprot.writeFieldBegin(E_TNF_FIELD_DESC);
        this.eTNF.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetENF()) {
        oprot.writeFieldBegin(E_NF_FIELD_DESC);
        this.eNF.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveTag_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eF:");
      if (this.eF == null) {
        sb.append("null");
      } else {
        sb.append(this.eF);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eE:");
      if (this.eE == null) {
        sb.append("null");
      } else {
        sb.append(this.eE);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eTNF:");
      if (this.eTNF == null) {
        sb.append("null");
      } else {
        sb.append(this.eTNF);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eNF:");
      if (this.eNF == null) {
        sb.append("null");
      } else {
        sb.append(this.eNF);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class saveCategory_args implements org.apache.thrift.TBase<saveCategory_args, saveCategory_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveCategory_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CATEGORY_FIELD_DESC = new org.apache.thrift.protocol.TField("category", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    public String token;
    public everfeeds.thrift.domain.Category category;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token"),
      CATEGORY((short)3, "category");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 3: // CATEGORY
            return CATEGORY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "String")));
      tmpMap.put(_Fields.CATEGORY, new org.apache.thrift.meta_data.FieldMetaData("category", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, everfeeds.thrift.domain.Category.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveCategory_args.class, metaDataMap);
    }

    public saveCategory_args() {
    }

    public saveCategory_args(
      String token,
      everfeeds.thrift.domain.Category category)
    {
      this();
      this.token = token;
      this.category = category;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveCategory_args(saveCategory_args other) {
      if (other.isSetToken()) {
        this.token = other.token;
      }
      if (other.isSetCategory()) {
        this.category = new everfeeds.thrift.domain.Category(other.category);
      }
    }

    public saveCategory_args deepCopy() {
      return new saveCategory_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      this.category = null;
    }

    public String getToken() {
      return this.token;
    }

    public saveCategory_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public everfeeds.thrift.domain.Category getCategory() {
      return this.category;
    }

    public saveCategory_args setCategory(everfeeds.thrift.domain.Category category) {
      this.category = category;
      return this;
    }

    public void unsetCategory() {
      this.category = null;
    }

    /** Returns true if field category is set (has been assigned a value) and false otherwise */
    public boolean isSetCategory() {
      return this.category != null;
    }

    public void setCategoryIsSet(boolean value) {
      if (!value) {
        this.category = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case CATEGORY:
        if (value == null) {
          unsetCategory();
        } else {
          setCategory((everfeeds.thrift.domain.Category)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case CATEGORY:
        return getCategory();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case CATEGORY:
        return isSetCategory();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveCategory_args)
        return this.equals((saveCategory_args)that);
      return false;
    }

    public boolean equals(saveCategory_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_category = true && this.isSetCategory();
      boolean that_present_category = true && that.isSetCategory();
      if (this_present_category || that_present_category) {
        if (!(this_present_category && that_present_category))
          return false;
        if (!this.category.equals(that.category))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(saveCategory_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      saveCategory_args typedOther = (saveCategory_args)other;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(typedOther.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, typedOther.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCategory()).compareTo(typedOther.isSetCategory());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCategory()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.category, typedOther.category);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // TOKEN
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.token = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // CATEGORY
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.category = new everfeeds.thrift.domain.Category();
              this.category.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.token != null) {
        oprot.writeFieldBegin(TOKEN_FIELD_DESC);
        oprot.writeString(this.token);
        oprot.writeFieldEnd();
      }
      if (this.category != null) {
        oprot.writeFieldBegin(CATEGORY_FIELD_DESC);
        this.category.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveCategory_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("category:");
      if (this.category == null) {
        sb.append("null");
      } else {
        sb.append(this.category);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class saveCategory_result implements org.apache.thrift.TBase<saveCategory_result, saveCategory_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveCategory_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_F_FIELD_DESC = new org.apache.thrift.protocol.TField("eF", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField E_E_FIELD_DESC = new org.apache.thrift.protocol.TField("eE", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField E_TNF_FIELD_DESC = new org.apache.thrift.protocol.TField("eTNF", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField E_NF_FIELD_DESC = new org.apache.thrift.protocol.TField("eNF", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    public everfeeds.thrift.domain.Category success;
    public everfeeds.thrift.error.Forbidden eF;
    public everfeeds.thrift.error.TokenExpired eE;
    public everfeeds.thrift.error.TokenNotFound eTNF;
    public everfeeds.thrift.error.NotFound eNF;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E_F((short)1, "eF"),
      E_E((short)2, "eE"),
      E_TNF((short)3, "eTNF"),
      E_NF((short)4, "eNF");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E_F
            return E_F;
          case 2: // E_E
            return E_E;
          case 3: // E_TNF
            return E_TNF;
          case 4: // E_NF
            return E_NF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, everfeeds.thrift.domain.Category.class)));
      tmpMap.put(_Fields.E_F, new org.apache.thrift.meta_data.FieldMetaData("eF", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_E, new org.apache.thrift.meta_data.FieldMetaData("eE", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_TNF, new org.apache.thrift.meta_data.FieldMetaData("eTNF", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_NF, new org.apache.thrift.meta_data.FieldMetaData("eNF", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveCategory_result.class, metaDataMap);
    }

    public saveCategory_result() {
    }

    public saveCategory_result(
      everfeeds.thrift.domain.Category success,
      everfeeds.thrift.error.Forbidden eF,
      everfeeds.thrift.error.TokenExpired eE,
      everfeeds.thrift.error.TokenNotFound eTNF,
      everfeeds.thrift.error.NotFound eNF)
    {
      this();
      this.success = success;
      this.eF = eF;
      this.eE = eE;
      this.eTNF = eTNF;
      this.eNF = eNF;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveCategory_result(saveCategory_result other) {
      if (other.isSetSuccess()) {
        this.success = new everfeeds.thrift.domain.Category(other.success);
      }
      if (other.isSetEF()) {
        this.eF = new everfeeds.thrift.error.Forbidden(other.eF);
      }
      if (other.isSetEE()) {
        this.eE = new everfeeds.thrift.error.TokenExpired(other.eE);
      }
      if (other.isSetETNF()) {
        this.eTNF = new everfeeds.thrift.error.TokenNotFound(other.eTNF);
      }
      if (other.isSetENF()) {
        this.eNF = new everfeeds.thrift.error.NotFound(other.eNF);
      }
    }

    public saveCategory_result deepCopy() {
      return new saveCategory_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.eF = null;
      this.eE = null;
      this.eTNF = null;
      this.eNF = null;
    }

    public everfeeds.thrift.domain.Category getSuccess() {
      return this.success;
    }

    public saveCategory_result setSuccess(everfeeds.thrift.domain.Category success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public everfeeds.thrift.error.Forbidden getEF() {
      return this.eF;
    }

    public saveCategory_result setEF(everfeeds.thrift.error.Forbidden eF) {
      this.eF = eF;
      return this;
    }

    public void unsetEF() {
      this.eF = null;
    }

    /** Returns true if field eF is set (has been assigned a value) and false otherwise */
    public boolean isSetEF() {
      return this.eF != null;
    }

    public void setEFIsSet(boolean value) {
      if (!value) {
        this.eF = null;
      }
    }

    public everfeeds.thrift.error.TokenExpired getEE() {
      return this.eE;
    }

    public saveCategory_result setEE(everfeeds.thrift.error.TokenExpired eE) {
      this.eE = eE;
      return this;
    }

    public void unsetEE() {
      this.eE = null;
    }

    /** Returns true if field eE is set (has been assigned a value) and false otherwise */
    public boolean isSetEE() {
      return this.eE != null;
    }

    public void setEEIsSet(boolean value) {
      if (!value) {
        this.eE = null;
      }
    }

    public everfeeds.thrift.error.TokenNotFound getETNF() {
      return this.eTNF;
    }

    public saveCategory_result setETNF(everfeeds.thrift.error.TokenNotFound eTNF) {
      this.eTNF = eTNF;
      return this;
    }

    public void unsetETNF() {
      this.eTNF = null;
    }

    /** Returns true if field eTNF is set (has been assigned a value) and false otherwise */
    public boolean isSetETNF() {
      return this.eTNF != null;
    }

    public void setETNFIsSet(boolean value) {
      if (!value) {
        this.eTNF = null;
      }
    }

    public everfeeds.thrift.error.NotFound getENF() {
      return this.eNF;
    }

    public saveCategory_result setENF(everfeeds.thrift.error.NotFound eNF) {
      this.eNF = eNF;
      return this;
    }

    public void unsetENF() {
      this.eNF = null;
    }

    /** Returns true if field eNF is set (has been assigned a value) and false otherwise */
    public boolean isSetENF() {
      return this.eNF != null;
    }

    public void setENFIsSet(boolean value) {
      if (!value) {
        this.eNF = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((everfeeds.thrift.domain.Category)value);
        }
        break;

      case E_F:
        if (value == null) {
          unsetEF();
        } else {
          setEF((everfeeds.thrift.error.Forbidden)value);
        }
        break;

      case E_E:
        if (value == null) {
          unsetEE();
        } else {
          setEE((everfeeds.thrift.error.TokenExpired)value);
        }
        break;

      case E_TNF:
        if (value == null) {
          unsetETNF();
        } else {
          setETNF((everfeeds.thrift.error.TokenNotFound)value);
        }
        break;

      case E_NF:
        if (value == null) {
          unsetENF();
        } else {
          setENF((everfeeds.thrift.error.NotFound)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E_F:
        return getEF();

      case E_E:
        return getEE();

      case E_TNF:
        return getETNF();

      case E_NF:
        return getENF();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E_F:
        return isSetEF();
      case E_E:
        return isSetEE();
      case E_TNF:
        return isSetETNF();
      case E_NF:
        return isSetENF();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveCategory_result)
        return this.equals((saveCategory_result)that);
      return false;
    }

    public boolean equals(saveCategory_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_eF = true && this.isSetEF();
      boolean that_present_eF = true && that.isSetEF();
      if (this_present_eF || that_present_eF) {
        if (!(this_present_eF && that_present_eF))
          return false;
        if (!this.eF.equals(that.eF))
          return false;
      }

      boolean this_present_eE = true && this.isSetEE();
      boolean that_present_eE = true && that.isSetEE();
      if (this_present_eE || that_present_eE) {
        if (!(this_present_eE && that_present_eE))
          return false;
        if (!this.eE.equals(that.eE))
          return false;
      }

      boolean this_present_eTNF = true && this.isSetETNF();
      boolean that_present_eTNF = true && that.isSetETNF();
      if (this_present_eTNF || that_present_eTNF) {
        if (!(this_present_eTNF && that_present_eTNF))
          return false;
        if (!this.eTNF.equals(that.eTNF))
          return false;
      }

      boolean this_present_eNF = true && this.isSetENF();
      boolean that_present_eNF = true && that.isSetENF();
      if (this_present_eNF || that_present_eNF) {
        if (!(this_present_eNF && that_present_eNF))
          return false;
        if (!this.eNF.equals(that.eNF))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(saveCategory_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      saveCategory_result typedOther = (saveCategory_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEF()).compareTo(typedOther.isSetEF());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEF()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eF, typedOther.eF);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEE()).compareTo(typedOther.isSetEE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eE, typedOther.eE);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetETNF()).compareTo(typedOther.isSetETNF());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetETNF()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eTNF, typedOther.eTNF);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetENF()).compareTo(typedOther.isSetENF());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetENF()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eNF, typedOther.eNF);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.success = new everfeeds.thrift.domain.Category();
              this.success.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E_F
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eF = new everfeeds.thrift.error.Forbidden();
              this.eF.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // E_E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eE = new everfeeds.thrift.error.TokenExpired();
              this.eE.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // E_TNF
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eTNF = new everfeeds.thrift.error.TokenNotFound();
              this.eTNF.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // E_NF
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eNF = new everfeeds.thrift.error.NotFound();
              this.eNF.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetEF()) {
        oprot.writeFieldBegin(E_F_FIELD_DESC);
        this.eF.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetEE()) {
        oprot.writeFieldBegin(E_E_FIELD_DESC);
        this.eE.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetETNF()) {
        oprot.writeFieldBegin(E_TNF_FIELD_DESC);
        this.eTNF.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetENF()) {
        oprot.writeFieldBegin(E_NF_FIELD_DESC);
        this.eNF.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveCategory_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eF:");
      if (this.eF == null) {
        sb.append("null");
      } else {
        sb.append(this.eF);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eE:");
      if (this.eE == null) {
        sb.append("null");
      } else {
        sb.append(this.eE);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eTNF:");
      if (this.eTNF == null) {
        sb.append("null");
      } else {
        sb.append(this.eTNF);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eNF:");
      if (this.eNF == null) {
        sb.append("null");
      } else {
        sb.append(this.eNF);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

}
