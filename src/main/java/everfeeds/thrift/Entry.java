/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package everfeeds.thrift;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Entry implements org.apache.thrift.TBase<Entry, Entry._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Entry");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField IDENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("identity", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField ACCESS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("accessId", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField KIND_FIELD_DESC = new org.apache.thrift.protocol.TField("kind", org.apache.thrift.protocol.TType.I32, (short)20);
  private static final org.apache.thrift.protocol.TField IS_AUTHOR_FIELD_DESC = new org.apache.thrift.protocol.TField("isAuthor", org.apache.thrift.protocol.TType.BOOL, (short)30);
  private static final org.apache.thrift.protocol.TField IS_PUBLIC_AVAILABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("isPublicAvailable", org.apache.thrift.protocol.TType.BOOL, (short)31);
  private static final org.apache.thrift.protocol.TField IS_FAVORITE_FIELD_DESC = new org.apache.thrift.protocol.TField("isFavorite", org.apache.thrift.protocol.TType.BOOL, (short)32);
  private static final org.apache.thrift.protocol.TField IS_READ_FIELD_DESC = new org.apache.thrift.protocol.TField("isRead", org.apache.thrift.protocol.TType.BOOL, (short)33);
  private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)40);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)41);
  private static final org.apache.thrift.protocol.TField AUTHOR_FIELD_DESC = new org.apache.thrift.protocol.TField("author", org.apache.thrift.protocol.TType.STRING, (short)50);
  private static final org.apache.thrift.protocol.TField AUTHOR_IDENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("authorIdentity", org.apache.thrift.protocol.TType.STRING, (short)51);
  private static final org.apache.thrift.protocol.TField AUTHOR_PIC_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("authorPicUrl", org.apache.thrift.protocol.TType.STRING, (short)52);
  private static final org.apache.thrift.protocol.TField AUTHOR_SCREEN_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("authorScreenName", org.apache.thrift.protocol.TType.STRING, (short)53);
  private static final org.apache.thrift.protocol.TField DATE_CREATED_FIELD_DESC = new org.apache.thrift.protocol.TField("dateCreated", org.apache.thrift.protocol.TType.I64, (short)60);
  private static final org.apache.thrift.protocol.TField LAST_UPDATED_FIELD_DESC = new org.apache.thrift.protocol.TField("lastUpdated", org.apache.thrift.protocol.TType.I64, (short)61);
  private static final org.apache.thrift.protocol.TField DATE_PLACED_FIELD_DESC = new org.apache.thrift.protocol.TField("datePlaced", org.apache.thrift.protocol.TType.I64, (short)62);
  private static final org.apache.thrift.protocol.TField CATEGORY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("categoryId", org.apache.thrift.protocol.TType.STRING, (short)70);
  private static final org.apache.thrift.protocol.TField TAG_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("tagIds", org.apache.thrift.protocol.TType.LIST, (short)71);
  private static final org.apache.thrift.protocol.TField FILTER_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("filterIds", org.apache.thrift.protocol.TType.LIST, (short)72);

  public String id;
  public String identity;
  public String accessId;
  /**
   * 
   * @see EntryKind
   */
  public EntryKind kind;
  public boolean isAuthor;
  public boolean isPublicAvailable;
  public boolean isFavorite;
  public boolean isRead;
  public String title;
  public String description;
  public String author;
  public String authorIdentity;
  public String authorPicUrl;
  public String authorScreenName;
  public long dateCreated;
  public long lastUpdated;
  public long datePlaced;
  public String categoryId;
  public List<String> tagIds;
  public List<String> filterIds;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    IDENTITY((short)2, "identity"),
    ACCESS_ID((short)10, "accessId"),
    /**
     * 
     * @see EntryKind
     */
    KIND((short)20, "kind"),
    IS_AUTHOR((short)30, "isAuthor"),
    IS_PUBLIC_AVAILABLE((short)31, "isPublicAvailable"),
    IS_FAVORITE((short)32, "isFavorite"),
    IS_READ((short)33, "isRead"),
    TITLE((short)40, "title"),
    DESCRIPTION((short)41, "description"),
    AUTHOR((short)50, "author"),
    AUTHOR_IDENTITY((short)51, "authorIdentity"),
    AUTHOR_PIC_URL((short)52, "authorPicUrl"),
    AUTHOR_SCREEN_NAME((short)53, "authorScreenName"),
    DATE_CREATED((short)60, "dateCreated"),
    LAST_UPDATED((short)61, "lastUpdated"),
    DATE_PLACED((short)62, "datePlaced"),
    CATEGORY_ID((short)70, "categoryId"),
    TAG_IDS((short)71, "tagIds"),
    FILTER_IDS((short)72, "filterIds");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // IDENTITY
          return IDENTITY;
        case 10: // ACCESS_ID
          return ACCESS_ID;
        case 20: // KIND
          return KIND;
        case 30: // IS_AUTHOR
          return IS_AUTHOR;
        case 31: // IS_PUBLIC_AVAILABLE
          return IS_PUBLIC_AVAILABLE;
        case 32: // IS_FAVORITE
          return IS_FAVORITE;
        case 33: // IS_READ
          return IS_READ;
        case 40: // TITLE
          return TITLE;
        case 41: // DESCRIPTION
          return DESCRIPTION;
        case 50: // AUTHOR
          return AUTHOR;
        case 51: // AUTHOR_IDENTITY
          return AUTHOR_IDENTITY;
        case 52: // AUTHOR_PIC_URL
          return AUTHOR_PIC_URL;
        case 53: // AUTHOR_SCREEN_NAME
          return AUTHOR_SCREEN_NAME;
        case 60: // DATE_CREATED
          return DATE_CREATED;
        case 61: // LAST_UPDATED
          return LAST_UPDATED;
        case 62: // DATE_PLACED
          return DATE_PLACED;
        case 70: // CATEGORY_ID
          return CATEGORY_ID;
        case 71: // TAG_IDS
          return TAG_IDS;
        case 72: // FILTER_IDS
          return FILTER_IDS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ISAUTHOR_ISSET_ID = 0;
  private static final int __ISPUBLICAVAILABLE_ISSET_ID = 1;
  private static final int __ISFAVORITE_ISSET_ID = 2;
  private static final int __ISREAD_ISSET_ID = 3;
  private static final int __DATECREATED_ISSET_ID = 4;
  private static final int __LASTUPDATED_ISSET_ID = 5;
  private static final int __DATEPLACED_ISSET_ID = 6;
  private BitSet __isset_bit_vector = new BitSet(7);

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "Id")));
    tmpMap.put(_Fields.IDENTITY, new org.apache.thrift.meta_data.FieldMetaData("identity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "String")));
    tmpMap.put(_Fields.ACCESS_ID, new org.apache.thrift.meta_data.FieldMetaData("accessId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "Id")));
    tmpMap.put(_Fields.KIND, new org.apache.thrift.meta_data.FieldMetaData("kind", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, EntryKind.class)));
    tmpMap.put(_Fields.IS_AUTHOR, new org.apache.thrift.meta_data.FieldMetaData("isAuthor", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_PUBLIC_AVAILABLE, new org.apache.thrift.meta_data.FieldMetaData("isPublicAvailable", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_FAVORITE, new org.apache.thrift.meta_data.FieldMetaData("isFavorite", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_READ, new org.apache.thrift.meta_data.FieldMetaData("isRead", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "String")));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "String")));
    tmpMap.put(_Fields.AUTHOR, new org.apache.thrift.meta_data.FieldMetaData("author", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "String")));
    tmpMap.put(_Fields.AUTHOR_IDENTITY, new org.apache.thrift.meta_data.FieldMetaData("authorIdentity", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "String")));
    tmpMap.put(_Fields.AUTHOR_PIC_URL, new org.apache.thrift.meta_data.FieldMetaData("authorPicUrl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "String")));
    tmpMap.put(_Fields.AUTHOR_SCREEN_NAME, new org.apache.thrift.meta_data.FieldMetaData("authorScreenName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "String")));
    tmpMap.put(_Fields.DATE_CREATED, new org.apache.thrift.meta_data.FieldMetaData("dateCreated", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "Timestamp")));
    tmpMap.put(_Fields.LAST_UPDATED, new org.apache.thrift.meta_data.FieldMetaData("lastUpdated", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "Timestamp")));
    tmpMap.put(_Fields.DATE_PLACED, new org.apache.thrift.meta_data.FieldMetaData("datePlaced", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "Timestamp")));
    tmpMap.put(_Fields.CATEGORY_ID, new org.apache.thrift.meta_data.FieldMetaData("categoryId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "Id")));
    tmpMap.put(_Fields.TAG_IDS, new org.apache.thrift.meta_data.FieldMetaData("tagIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , "Id"))));
    tmpMap.put(_Fields.FILTER_IDS, new org.apache.thrift.meta_data.FieldMetaData("filterIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , "Id"))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Entry.class, metaDataMap);
  }

  public Entry() {
  }

  public Entry(
    String id,
    String identity,
    String accessId,
    EntryKind kind,
    boolean isAuthor,
    boolean isPublicAvailable,
    boolean isFavorite,
    boolean isRead,
    String title,
    String categoryId,
    List<String> tagIds,
    List<String> filterIds)
  {
    this();
    this.id = id;
    this.identity = identity;
    this.accessId = accessId;
    this.kind = kind;
    this.isAuthor = isAuthor;
    setIsAuthorIsSet(true);
    this.isPublicAvailable = isPublicAvailable;
    setIsPublicAvailableIsSet(true);
    this.isFavorite = isFavorite;
    setIsFavoriteIsSet(true);
    this.isRead = isRead;
    setIsReadIsSet(true);
    this.title = title;
    this.categoryId = categoryId;
    this.tagIds = tagIds;
    this.filterIds = filterIds;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Entry(Entry other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetIdentity()) {
      this.identity = other.identity;
    }
    if (other.isSetAccessId()) {
      this.accessId = other.accessId;
    }
    if (other.isSetKind()) {
      this.kind = other.kind;
    }
    this.isAuthor = other.isAuthor;
    this.isPublicAvailable = other.isPublicAvailable;
    this.isFavorite = other.isFavorite;
    this.isRead = other.isRead;
    if (other.isSetTitle()) {
      this.title = other.title;
    }
    if (other.isSetDescription()) {
      this.description = other.description;
    }
    if (other.isSetAuthor()) {
      this.author = other.author;
    }
    if (other.isSetAuthorIdentity()) {
      this.authorIdentity = other.authorIdentity;
    }
    if (other.isSetAuthorPicUrl()) {
      this.authorPicUrl = other.authorPicUrl;
    }
    if (other.isSetAuthorScreenName()) {
      this.authorScreenName = other.authorScreenName;
    }
    this.dateCreated = other.dateCreated;
    this.lastUpdated = other.lastUpdated;
    this.datePlaced = other.datePlaced;
    if (other.isSetCategoryId()) {
      this.categoryId = other.categoryId;
    }
    if (other.isSetTagIds()) {
      List<String> __this__tagIds = new ArrayList<String>();
      for (String other_element : other.tagIds) {
        __this__tagIds.add(other_element);
      }
      this.tagIds = __this__tagIds;
    }
    if (other.isSetFilterIds()) {
      List<String> __this__filterIds = new ArrayList<String>();
      for (String other_element : other.filterIds) {
        __this__filterIds.add(other_element);
      }
      this.filterIds = __this__filterIds;
    }
  }

  public Entry deepCopy() {
    return new Entry(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.identity = null;
    this.accessId = null;
    this.kind = null;
    setIsAuthorIsSet(false);
    this.isAuthor = false;
    setIsPublicAvailableIsSet(false);
    this.isPublicAvailable = false;
    setIsFavoriteIsSet(false);
    this.isFavorite = false;
    setIsReadIsSet(false);
    this.isRead = false;
    this.title = null;
    this.description = null;
    this.author = null;
    this.authorIdentity = null;
    this.authorPicUrl = null;
    this.authorScreenName = null;
    setDateCreatedIsSet(false);
    this.dateCreated = 0;
    setLastUpdatedIsSet(false);
    this.lastUpdated = 0;
    setDatePlacedIsSet(false);
    this.datePlaced = 0;
    this.categoryId = null;
    this.tagIds = null;
    this.filterIds = null;
  }

  public String getId() {
    return this.id;
  }

  public Entry setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public String getIdentity() {
    return this.identity;
  }

  public Entry setIdentity(String identity) {
    this.identity = identity;
    return this;
  }

  public void unsetIdentity() {
    this.identity = null;
  }

  /** Returns true if field identity is set (has been assigned a value) and false otherwise */
  public boolean isSetIdentity() {
    return this.identity != null;
  }

  public void setIdentityIsSet(boolean value) {
    if (!value) {
      this.identity = null;
    }
  }

  public String getAccessId() {
    return this.accessId;
  }

  public Entry setAccessId(String accessId) {
    this.accessId = accessId;
    return this;
  }

  public void unsetAccessId() {
    this.accessId = null;
  }

  /** Returns true if field accessId is set (has been assigned a value) and false otherwise */
  public boolean isSetAccessId() {
    return this.accessId != null;
  }

  public void setAccessIdIsSet(boolean value) {
    if (!value) {
      this.accessId = null;
    }
  }

  /**
   * 
   * @see EntryKind
   */
  public EntryKind getKind() {
    return this.kind;
  }

  /**
   * 
   * @see EntryKind
   */
  public Entry setKind(EntryKind kind) {
    this.kind = kind;
    return this;
  }

  public void unsetKind() {
    this.kind = null;
  }

  /** Returns true if field kind is set (has been assigned a value) and false otherwise */
  public boolean isSetKind() {
    return this.kind != null;
  }

  public void setKindIsSet(boolean value) {
    if (!value) {
      this.kind = null;
    }
  }

  public boolean isIsAuthor() {
    return this.isAuthor;
  }

  public Entry setIsAuthor(boolean isAuthor) {
    this.isAuthor = isAuthor;
    setIsAuthorIsSet(true);
    return this;
  }

  public void unsetIsAuthor() {
    __isset_bit_vector.clear(__ISAUTHOR_ISSET_ID);
  }

  /** Returns true if field isAuthor is set (has been assigned a value) and false otherwise */
  public boolean isSetIsAuthor() {
    return __isset_bit_vector.get(__ISAUTHOR_ISSET_ID);
  }

  public void setIsAuthorIsSet(boolean value) {
    __isset_bit_vector.set(__ISAUTHOR_ISSET_ID, value);
  }

  public boolean isIsPublicAvailable() {
    return this.isPublicAvailable;
  }

  public Entry setIsPublicAvailable(boolean isPublicAvailable) {
    this.isPublicAvailable = isPublicAvailable;
    setIsPublicAvailableIsSet(true);
    return this;
  }

  public void unsetIsPublicAvailable() {
    __isset_bit_vector.clear(__ISPUBLICAVAILABLE_ISSET_ID);
  }

  /** Returns true if field isPublicAvailable is set (has been assigned a value) and false otherwise */
  public boolean isSetIsPublicAvailable() {
    return __isset_bit_vector.get(__ISPUBLICAVAILABLE_ISSET_ID);
  }

  public void setIsPublicAvailableIsSet(boolean value) {
    __isset_bit_vector.set(__ISPUBLICAVAILABLE_ISSET_ID, value);
  }

  public boolean isIsFavorite() {
    return this.isFavorite;
  }

  public Entry setIsFavorite(boolean isFavorite) {
    this.isFavorite = isFavorite;
    setIsFavoriteIsSet(true);
    return this;
  }

  public void unsetIsFavorite() {
    __isset_bit_vector.clear(__ISFAVORITE_ISSET_ID);
  }

  /** Returns true if field isFavorite is set (has been assigned a value) and false otherwise */
  public boolean isSetIsFavorite() {
    return __isset_bit_vector.get(__ISFAVORITE_ISSET_ID);
  }

  public void setIsFavoriteIsSet(boolean value) {
    __isset_bit_vector.set(__ISFAVORITE_ISSET_ID, value);
  }

  public boolean isIsRead() {
    return this.isRead;
  }

  public Entry setIsRead(boolean isRead) {
    this.isRead = isRead;
    setIsReadIsSet(true);
    return this;
  }

  public void unsetIsRead() {
    __isset_bit_vector.clear(__ISREAD_ISSET_ID);
  }

  /** Returns true if field isRead is set (has been assigned a value) and false otherwise */
  public boolean isSetIsRead() {
    return __isset_bit_vector.get(__ISREAD_ISSET_ID);
  }

  public void setIsReadIsSet(boolean value) {
    __isset_bit_vector.set(__ISREAD_ISSET_ID, value);
  }

  public String getTitle() {
    return this.title;
  }

  public Entry setTitle(String title) {
    this.title = title;
    return this;
  }

  public void unsetTitle() {
    this.title = null;
  }

  /** Returns true if field title is set (has been assigned a value) and false otherwise */
  public boolean isSetTitle() {
    return this.title != null;
  }

  public void setTitleIsSet(boolean value) {
    if (!value) {
      this.title = null;
    }
  }

  public String getDescription() {
    return this.description;
  }

  public Entry setDescription(String description) {
    this.description = description;
    return this;
  }

  public void unsetDescription() {
    this.description = null;
  }

  /** Returns true if field description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.description = null;
    }
  }

  public String getAuthor() {
    return this.author;
  }

  public Entry setAuthor(String author) {
    this.author = author;
    return this;
  }

  public void unsetAuthor() {
    this.author = null;
  }

  /** Returns true if field author is set (has been assigned a value) and false otherwise */
  public boolean isSetAuthor() {
    return this.author != null;
  }

  public void setAuthorIsSet(boolean value) {
    if (!value) {
      this.author = null;
    }
  }

  public String getAuthorIdentity() {
    return this.authorIdentity;
  }

  public Entry setAuthorIdentity(String authorIdentity) {
    this.authorIdentity = authorIdentity;
    return this;
  }

  public void unsetAuthorIdentity() {
    this.authorIdentity = null;
  }

  /** Returns true if field authorIdentity is set (has been assigned a value) and false otherwise */
  public boolean isSetAuthorIdentity() {
    return this.authorIdentity != null;
  }

  public void setAuthorIdentityIsSet(boolean value) {
    if (!value) {
      this.authorIdentity = null;
    }
  }

  public String getAuthorPicUrl() {
    return this.authorPicUrl;
  }

  public Entry setAuthorPicUrl(String authorPicUrl) {
    this.authorPicUrl = authorPicUrl;
    return this;
  }

  public void unsetAuthorPicUrl() {
    this.authorPicUrl = null;
  }

  /** Returns true if field authorPicUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetAuthorPicUrl() {
    return this.authorPicUrl != null;
  }

  public void setAuthorPicUrlIsSet(boolean value) {
    if (!value) {
      this.authorPicUrl = null;
    }
  }

  public String getAuthorScreenName() {
    return this.authorScreenName;
  }

  public Entry setAuthorScreenName(String authorScreenName) {
    this.authorScreenName = authorScreenName;
    return this;
  }

  public void unsetAuthorScreenName() {
    this.authorScreenName = null;
  }

  /** Returns true if field authorScreenName is set (has been assigned a value) and false otherwise */
  public boolean isSetAuthorScreenName() {
    return this.authorScreenName != null;
  }

  public void setAuthorScreenNameIsSet(boolean value) {
    if (!value) {
      this.authorScreenName = null;
    }
  }

  public long getDateCreated() {
    return this.dateCreated;
  }

  public Entry setDateCreated(long dateCreated) {
    this.dateCreated = dateCreated;
    setDateCreatedIsSet(true);
    return this;
  }

  public void unsetDateCreated() {
    __isset_bit_vector.clear(__DATECREATED_ISSET_ID);
  }

  /** Returns true if field dateCreated is set (has been assigned a value) and false otherwise */
  public boolean isSetDateCreated() {
    return __isset_bit_vector.get(__DATECREATED_ISSET_ID);
  }

  public void setDateCreatedIsSet(boolean value) {
    __isset_bit_vector.set(__DATECREATED_ISSET_ID, value);
  }

  public long getLastUpdated() {
    return this.lastUpdated;
  }

  public Entry setLastUpdated(long lastUpdated) {
    this.lastUpdated = lastUpdated;
    setLastUpdatedIsSet(true);
    return this;
  }

  public void unsetLastUpdated() {
    __isset_bit_vector.clear(__LASTUPDATED_ISSET_ID);
  }

  /** Returns true if field lastUpdated is set (has been assigned a value) and false otherwise */
  public boolean isSetLastUpdated() {
    return __isset_bit_vector.get(__LASTUPDATED_ISSET_ID);
  }

  public void setLastUpdatedIsSet(boolean value) {
    __isset_bit_vector.set(__LASTUPDATED_ISSET_ID, value);
  }

  public long getDatePlaced() {
    return this.datePlaced;
  }

  public Entry setDatePlaced(long datePlaced) {
    this.datePlaced = datePlaced;
    setDatePlacedIsSet(true);
    return this;
  }

  public void unsetDatePlaced() {
    __isset_bit_vector.clear(__DATEPLACED_ISSET_ID);
  }

  /** Returns true if field datePlaced is set (has been assigned a value) and false otherwise */
  public boolean isSetDatePlaced() {
    return __isset_bit_vector.get(__DATEPLACED_ISSET_ID);
  }

  public void setDatePlacedIsSet(boolean value) {
    __isset_bit_vector.set(__DATEPLACED_ISSET_ID, value);
  }

  public String getCategoryId() {
    return this.categoryId;
  }

  public Entry setCategoryId(String categoryId) {
    this.categoryId = categoryId;
    return this;
  }

  public void unsetCategoryId() {
    this.categoryId = null;
  }

  /** Returns true if field categoryId is set (has been assigned a value) and false otherwise */
  public boolean isSetCategoryId() {
    return this.categoryId != null;
  }

  public void setCategoryIdIsSet(boolean value) {
    if (!value) {
      this.categoryId = null;
    }
  }

  public int getTagIdsSize() {
    return (this.tagIds == null) ? 0 : this.tagIds.size();
  }

  public java.util.Iterator<String> getTagIdsIterator() {
    return (this.tagIds == null) ? null : this.tagIds.iterator();
  }

  public void addToTagIds(String elem) {
    if (this.tagIds == null) {
      this.tagIds = new ArrayList<String>();
    }
    this.tagIds.add(elem);
  }

  public List<String> getTagIds() {
    return this.tagIds;
  }

  public Entry setTagIds(List<String> tagIds) {
    this.tagIds = tagIds;
    return this;
  }

  public void unsetTagIds() {
    this.tagIds = null;
  }

  /** Returns true if field tagIds is set (has been assigned a value) and false otherwise */
  public boolean isSetTagIds() {
    return this.tagIds != null;
  }

  public void setTagIdsIsSet(boolean value) {
    if (!value) {
      this.tagIds = null;
    }
  }

  public int getFilterIdsSize() {
    return (this.filterIds == null) ? 0 : this.filterIds.size();
  }

  public java.util.Iterator<String> getFilterIdsIterator() {
    return (this.filterIds == null) ? null : this.filterIds.iterator();
  }

  public void addToFilterIds(String elem) {
    if (this.filterIds == null) {
      this.filterIds = new ArrayList<String>();
    }
    this.filterIds.add(elem);
  }

  public List<String> getFilterIds() {
    return this.filterIds;
  }

  public Entry setFilterIds(List<String> filterIds) {
    this.filterIds = filterIds;
    return this;
  }

  public void unsetFilterIds() {
    this.filterIds = null;
  }

  /** Returns true if field filterIds is set (has been assigned a value) and false otherwise */
  public boolean isSetFilterIds() {
    return this.filterIds != null;
  }

  public void setFilterIdsIsSet(boolean value) {
    if (!value) {
      this.filterIds = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case IDENTITY:
      if (value == null) {
        unsetIdentity();
      } else {
        setIdentity((String)value);
      }
      break;

    case ACCESS_ID:
      if (value == null) {
        unsetAccessId();
      } else {
        setAccessId((String)value);
      }
      break;

    case KIND:
      if (value == null) {
        unsetKind();
      } else {
        setKind((EntryKind)value);
      }
      break;

    case IS_AUTHOR:
      if (value == null) {
        unsetIsAuthor();
      } else {
        setIsAuthor((Boolean)value);
      }
      break;

    case IS_PUBLIC_AVAILABLE:
      if (value == null) {
        unsetIsPublicAvailable();
      } else {
        setIsPublicAvailable((Boolean)value);
      }
      break;

    case IS_FAVORITE:
      if (value == null) {
        unsetIsFavorite();
      } else {
        setIsFavorite((Boolean)value);
      }
      break;

    case IS_READ:
      if (value == null) {
        unsetIsRead();
      } else {
        setIsRead((Boolean)value);
      }
      break;

    case TITLE:
      if (value == null) {
        unsetTitle();
      } else {
        setTitle((String)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((String)value);
      }
      break;

    case AUTHOR:
      if (value == null) {
        unsetAuthor();
      } else {
        setAuthor((String)value);
      }
      break;

    case AUTHOR_IDENTITY:
      if (value == null) {
        unsetAuthorIdentity();
      } else {
        setAuthorIdentity((String)value);
      }
      break;

    case AUTHOR_PIC_URL:
      if (value == null) {
        unsetAuthorPicUrl();
      } else {
        setAuthorPicUrl((String)value);
      }
      break;

    case AUTHOR_SCREEN_NAME:
      if (value == null) {
        unsetAuthorScreenName();
      } else {
        setAuthorScreenName((String)value);
      }
      break;

    case DATE_CREATED:
      if (value == null) {
        unsetDateCreated();
      } else {
        setDateCreated((Long)value);
      }
      break;

    case LAST_UPDATED:
      if (value == null) {
        unsetLastUpdated();
      } else {
        setLastUpdated((Long)value);
      }
      break;

    case DATE_PLACED:
      if (value == null) {
        unsetDatePlaced();
      } else {
        setDatePlaced((Long)value);
      }
      break;

    case CATEGORY_ID:
      if (value == null) {
        unsetCategoryId();
      } else {
        setCategoryId((String)value);
      }
      break;

    case TAG_IDS:
      if (value == null) {
        unsetTagIds();
      } else {
        setTagIds((List<String>)value);
      }
      break;

    case FILTER_IDS:
      if (value == null) {
        unsetFilterIds();
      } else {
        setFilterIds((List<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case IDENTITY:
      return getIdentity();

    case ACCESS_ID:
      return getAccessId();

    case KIND:
      return getKind();

    case IS_AUTHOR:
      return new Boolean(isIsAuthor());

    case IS_PUBLIC_AVAILABLE:
      return new Boolean(isIsPublicAvailable());

    case IS_FAVORITE:
      return new Boolean(isIsFavorite());

    case IS_READ:
      return new Boolean(isIsRead());

    case TITLE:
      return getTitle();

    case DESCRIPTION:
      return getDescription();

    case AUTHOR:
      return getAuthor();

    case AUTHOR_IDENTITY:
      return getAuthorIdentity();

    case AUTHOR_PIC_URL:
      return getAuthorPicUrl();

    case AUTHOR_SCREEN_NAME:
      return getAuthorScreenName();

    case DATE_CREATED:
      return new Long(getDateCreated());

    case LAST_UPDATED:
      return new Long(getLastUpdated());

    case DATE_PLACED:
      return new Long(getDatePlaced());

    case CATEGORY_ID:
      return getCategoryId();

    case TAG_IDS:
      return getTagIds();

    case FILTER_IDS:
      return getFilterIds();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case IDENTITY:
      return isSetIdentity();
    case ACCESS_ID:
      return isSetAccessId();
    case KIND:
      return isSetKind();
    case IS_AUTHOR:
      return isSetIsAuthor();
    case IS_PUBLIC_AVAILABLE:
      return isSetIsPublicAvailable();
    case IS_FAVORITE:
      return isSetIsFavorite();
    case IS_READ:
      return isSetIsRead();
    case TITLE:
      return isSetTitle();
    case DESCRIPTION:
      return isSetDescription();
    case AUTHOR:
      return isSetAuthor();
    case AUTHOR_IDENTITY:
      return isSetAuthorIdentity();
    case AUTHOR_PIC_URL:
      return isSetAuthorPicUrl();
    case AUTHOR_SCREEN_NAME:
      return isSetAuthorScreenName();
    case DATE_CREATED:
      return isSetDateCreated();
    case LAST_UPDATED:
      return isSetLastUpdated();
    case DATE_PLACED:
      return isSetDatePlaced();
    case CATEGORY_ID:
      return isSetCategoryId();
    case TAG_IDS:
      return isSetTagIds();
    case FILTER_IDS:
      return isSetFilterIds();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Entry)
      return this.equals((Entry)that);
    return false;
  }

  public boolean equals(Entry that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_identity = true && this.isSetIdentity();
    boolean that_present_identity = true && that.isSetIdentity();
    if (this_present_identity || that_present_identity) {
      if (!(this_present_identity && that_present_identity))
        return false;
      if (!this.identity.equals(that.identity))
        return false;
    }

    boolean this_present_accessId = true && this.isSetAccessId();
    boolean that_present_accessId = true && that.isSetAccessId();
    if (this_present_accessId || that_present_accessId) {
      if (!(this_present_accessId && that_present_accessId))
        return false;
      if (!this.accessId.equals(that.accessId))
        return false;
    }

    boolean this_present_kind = true && this.isSetKind();
    boolean that_present_kind = true && that.isSetKind();
    if (this_present_kind || that_present_kind) {
      if (!(this_present_kind && that_present_kind))
        return false;
      if (!this.kind.equals(that.kind))
        return false;
    }

    boolean this_present_isAuthor = true;
    boolean that_present_isAuthor = true;
    if (this_present_isAuthor || that_present_isAuthor) {
      if (!(this_present_isAuthor && that_present_isAuthor))
        return false;
      if (this.isAuthor != that.isAuthor)
        return false;
    }

    boolean this_present_isPublicAvailable = true;
    boolean that_present_isPublicAvailable = true;
    if (this_present_isPublicAvailable || that_present_isPublicAvailable) {
      if (!(this_present_isPublicAvailable && that_present_isPublicAvailable))
        return false;
      if (this.isPublicAvailable != that.isPublicAvailable)
        return false;
    }

    boolean this_present_isFavorite = true;
    boolean that_present_isFavorite = true;
    if (this_present_isFavorite || that_present_isFavorite) {
      if (!(this_present_isFavorite && that_present_isFavorite))
        return false;
      if (this.isFavorite != that.isFavorite)
        return false;
    }

    boolean this_present_isRead = true;
    boolean that_present_isRead = true;
    if (this_present_isRead || that_present_isRead) {
      if (!(this_present_isRead && that_present_isRead))
        return false;
      if (this.isRead != that.isRead)
        return false;
    }

    boolean this_present_title = true && this.isSetTitle();
    boolean that_present_title = true && that.isSetTitle();
    if (this_present_title || that_present_title) {
      if (!(this_present_title && that_present_title))
        return false;
      if (!this.title.equals(that.title))
        return false;
    }

    boolean this_present_description = true && this.isSetDescription();
    boolean that_present_description = true && that.isSetDescription();
    if (this_present_description || that_present_description) {
      if (!(this_present_description && that_present_description))
        return false;
      if (!this.description.equals(that.description))
        return false;
    }

    boolean this_present_author = true && this.isSetAuthor();
    boolean that_present_author = true && that.isSetAuthor();
    if (this_present_author || that_present_author) {
      if (!(this_present_author && that_present_author))
        return false;
      if (!this.author.equals(that.author))
        return false;
    }

    boolean this_present_authorIdentity = true && this.isSetAuthorIdentity();
    boolean that_present_authorIdentity = true && that.isSetAuthorIdentity();
    if (this_present_authorIdentity || that_present_authorIdentity) {
      if (!(this_present_authorIdentity && that_present_authorIdentity))
        return false;
      if (!this.authorIdentity.equals(that.authorIdentity))
        return false;
    }

    boolean this_present_authorPicUrl = true && this.isSetAuthorPicUrl();
    boolean that_present_authorPicUrl = true && that.isSetAuthorPicUrl();
    if (this_present_authorPicUrl || that_present_authorPicUrl) {
      if (!(this_present_authorPicUrl && that_present_authorPicUrl))
        return false;
      if (!this.authorPicUrl.equals(that.authorPicUrl))
        return false;
    }

    boolean this_present_authorScreenName = true && this.isSetAuthorScreenName();
    boolean that_present_authorScreenName = true && that.isSetAuthorScreenName();
    if (this_present_authorScreenName || that_present_authorScreenName) {
      if (!(this_present_authorScreenName && that_present_authorScreenName))
        return false;
      if (!this.authorScreenName.equals(that.authorScreenName))
        return false;
    }

    boolean this_present_dateCreated = true && this.isSetDateCreated();
    boolean that_present_dateCreated = true && that.isSetDateCreated();
    if (this_present_dateCreated || that_present_dateCreated) {
      if (!(this_present_dateCreated && that_present_dateCreated))
        return false;
      if (this.dateCreated != that.dateCreated)
        return false;
    }

    boolean this_present_lastUpdated = true && this.isSetLastUpdated();
    boolean that_present_lastUpdated = true && that.isSetLastUpdated();
    if (this_present_lastUpdated || that_present_lastUpdated) {
      if (!(this_present_lastUpdated && that_present_lastUpdated))
        return false;
      if (this.lastUpdated != that.lastUpdated)
        return false;
    }

    boolean this_present_datePlaced = true && this.isSetDatePlaced();
    boolean that_present_datePlaced = true && that.isSetDatePlaced();
    if (this_present_datePlaced || that_present_datePlaced) {
      if (!(this_present_datePlaced && that_present_datePlaced))
        return false;
      if (this.datePlaced != that.datePlaced)
        return false;
    }

    boolean this_present_categoryId = true && this.isSetCategoryId();
    boolean that_present_categoryId = true && that.isSetCategoryId();
    if (this_present_categoryId || that_present_categoryId) {
      if (!(this_present_categoryId && that_present_categoryId))
        return false;
      if (!this.categoryId.equals(that.categoryId))
        return false;
    }

    boolean this_present_tagIds = true && this.isSetTagIds();
    boolean that_present_tagIds = true && that.isSetTagIds();
    if (this_present_tagIds || that_present_tagIds) {
      if (!(this_present_tagIds && that_present_tagIds))
        return false;
      if (!this.tagIds.equals(that.tagIds))
        return false;
    }

    boolean this_present_filterIds = true && this.isSetFilterIds();
    boolean that_present_filterIds = true && that.isSetFilterIds();
    if (this_present_filterIds || that_present_filterIds) {
      if (!(this_present_filterIds && that_present_filterIds))
        return false;
      if (!this.filterIds.equals(that.filterIds))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Entry other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Entry typedOther = (Entry)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIdentity()).compareTo(typedOther.isSetIdentity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdentity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.identity, typedOther.identity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccessId()).compareTo(typedOther.isSetAccessId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccessId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accessId, typedOther.accessId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKind()).compareTo(typedOther.isSetKind());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKind()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.kind, typedOther.kind);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsAuthor()).compareTo(typedOther.isSetIsAuthor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsAuthor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isAuthor, typedOther.isAuthor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsPublicAvailable()).compareTo(typedOther.isSetIsPublicAvailable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsPublicAvailable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isPublicAvailable, typedOther.isPublicAvailable);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsFavorite()).compareTo(typedOther.isSetIsFavorite());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsFavorite()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isFavorite, typedOther.isFavorite);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsRead()).compareTo(typedOther.isSetIsRead());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsRead()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isRead, typedOther.isRead);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTitle()).compareTo(typedOther.isSetTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, typedOther.title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDescription()).compareTo(typedOther.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, typedOther.description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAuthor()).compareTo(typedOther.isSetAuthor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuthor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.author, typedOther.author);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAuthorIdentity()).compareTo(typedOther.isSetAuthorIdentity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuthorIdentity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authorIdentity, typedOther.authorIdentity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAuthorPicUrl()).compareTo(typedOther.isSetAuthorPicUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuthorPicUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authorPicUrl, typedOther.authorPicUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAuthorScreenName()).compareTo(typedOther.isSetAuthorScreenName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuthorScreenName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authorScreenName, typedOther.authorScreenName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDateCreated()).compareTo(typedOther.isSetDateCreated());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDateCreated()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dateCreated, typedOther.dateCreated);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastUpdated()).compareTo(typedOther.isSetLastUpdated());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastUpdated()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastUpdated, typedOther.lastUpdated);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDatePlaced()).compareTo(typedOther.isSetDatePlaced());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDatePlaced()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datePlaced, typedOther.datePlaced);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCategoryId()).compareTo(typedOther.isSetCategoryId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCategoryId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.categoryId, typedOther.categoryId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTagIds()).compareTo(typedOther.isSetTagIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTagIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tagIds, typedOther.tagIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFilterIds()).compareTo(typedOther.isSetFilterIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFilterIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filterIds, typedOther.filterIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // ID
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.id = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // IDENTITY
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.identity = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 10: // ACCESS_ID
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.accessId = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 20: // KIND
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.kind = EntryKind.findByValue(iprot.readI32());
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 30: // IS_AUTHOR
          if (field.type == org.apache.thrift.protocol.TType.BOOL) {
            this.isAuthor = iprot.readBool();
            setIsAuthorIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 31: // IS_PUBLIC_AVAILABLE
          if (field.type == org.apache.thrift.protocol.TType.BOOL) {
            this.isPublicAvailable = iprot.readBool();
            setIsPublicAvailableIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 32: // IS_FAVORITE
          if (field.type == org.apache.thrift.protocol.TType.BOOL) {
            this.isFavorite = iprot.readBool();
            setIsFavoriteIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 33: // IS_READ
          if (field.type == org.apache.thrift.protocol.TType.BOOL) {
            this.isRead = iprot.readBool();
            setIsReadIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 40: // TITLE
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.title = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 41: // DESCRIPTION
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.description = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 50: // AUTHOR
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.author = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 51: // AUTHOR_IDENTITY
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.authorIdentity = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 52: // AUTHOR_PIC_URL
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.authorPicUrl = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 53: // AUTHOR_SCREEN_NAME
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.authorScreenName = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 60: // DATE_CREATED
          if (field.type == org.apache.thrift.protocol.TType.I64) {
            this.dateCreated = iprot.readI64();
            setDateCreatedIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 61: // LAST_UPDATED
          if (field.type == org.apache.thrift.protocol.TType.I64) {
            this.lastUpdated = iprot.readI64();
            setLastUpdatedIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 62: // DATE_PLACED
          if (field.type == org.apache.thrift.protocol.TType.I64) {
            this.datePlaced = iprot.readI64();
            setDatePlacedIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 70: // CATEGORY_ID
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.categoryId = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 71: // TAG_IDS
          if (field.type == org.apache.thrift.protocol.TType.LIST) {
            {
              org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
              this.tagIds = new ArrayList<String>(_list0.size);
              for (int _i1 = 0; _i1 < _list0.size; ++_i1)
              {
                String _elem2;
                _elem2 = iprot.readString();
                this.tagIds.add(_elem2);
              }
              iprot.readListEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 72: // FILTER_IDS
          if (field.type == org.apache.thrift.protocol.TType.LIST) {
            {
              org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
              this.filterIds = new ArrayList<String>(_list3.size);
              for (int _i4 = 0; _i4 < _list3.size; ++_i4)
              {
                String _elem5;
                _elem5 = iprot.readString();
                this.filterIds.add(_elem5);
              }
              iprot.readListEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.id != null) {
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeString(this.id);
      oprot.writeFieldEnd();
    }
    if (this.identity != null) {
      oprot.writeFieldBegin(IDENTITY_FIELD_DESC);
      oprot.writeString(this.identity);
      oprot.writeFieldEnd();
    }
    if (this.accessId != null) {
      oprot.writeFieldBegin(ACCESS_ID_FIELD_DESC);
      oprot.writeString(this.accessId);
      oprot.writeFieldEnd();
    }
    if (this.kind != null) {
      oprot.writeFieldBegin(KIND_FIELD_DESC);
      oprot.writeI32(this.kind.getValue());
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(IS_AUTHOR_FIELD_DESC);
    oprot.writeBool(this.isAuthor);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(IS_PUBLIC_AVAILABLE_FIELD_DESC);
    oprot.writeBool(this.isPublicAvailable);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(IS_FAVORITE_FIELD_DESC);
    oprot.writeBool(this.isFavorite);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(IS_READ_FIELD_DESC);
    oprot.writeBool(this.isRead);
    oprot.writeFieldEnd();
    if (this.title != null) {
      oprot.writeFieldBegin(TITLE_FIELD_DESC);
      oprot.writeString(this.title);
      oprot.writeFieldEnd();
    }
    if (this.description != null) {
      if (isSetDescription()) {
        oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
        oprot.writeString(this.description);
        oprot.writeFieldEnd();
      }
    }
    if (this.author != null) {
      if (isSetAuthor()) {
        oprot.writeFieldBegin(AUTHOR_FIELD_DESC);
        oprot.writeString(this.author);
        oprot.writeFieldEnd();
      }
    }
    if (this.authorIdentity != null) {
      if (isSetAuthorIdentity()) {
        oprot.writeFieldBegin(AUTHOR_IDENTITY_FIELD_DESC);
        oprot.writeString(this.authorIdentity);
        oprot.writeFieldEnd();
      }
    }
    if (this.authorPicUrl != null) {
      if (isSetAuthorPicUrl()) {
        oprot.writeFieldBegin(AUTHOR_PIC_URL_FIELD_DESC);
        oprot.writeString(this.authorPicUrl);
        oprot.writeFieldEnd();
      }
    }
    if (this.authorScreenName != null) {
      if (isSetAuthorScreenName()) {
        oprot.writeFieldBegin(AUTHOR_SCREEN_NAME_FIELD_DESC);
        oprot.writeString(this.authorScreenName);
        oprot.writeFieldEnd();
      }
    }
    if (isSetDateCreated()) {
      oprot.writeFieldBegin(DATE_CREATED_FIELD_DESC);
      oprot.writeI64(this.dateCreated);
      oprot.writeFieldEnd();
    }
    if (isSetLastUpdated()) {
      oprot.writeFieldBegin(LAST_UPDATED_FIELD_DESC);
      oprot.writeI64(this.lastUpdated);
      oprot.writeFieldEnd();
    }
    if (isSetDatePlaced()) {
      oprot.writeFieldBegin(DATE_PLACED_FIELD_DESC);
      oprot.writeI64(this.datePlaced);
      oprot.writeFieldEnd();
    }
    if (this.categoryId != null) {
      oprot.writeFieldBegin(CATEGORY_ID_FIELD_DESC);
      oprot.writeString(this.categoryId);
      oprot.writeFieldEnd();
    }
    if (this.tagIds != null) {
      oprot.writeFieldBegin(TAG_IDS_FIELD_DESC);
      {
        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, this.tagIds.size()));
        for (String _iter6 : this.tagIds)
        {
          oprot.writeString(_iter6);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.filterIds != null) {
      oprot.writeFieldBegin(FILTER_IDS_FIELD_DESC);
      {
        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, this.filterIds.size()));
        for (String _iter7 : this.filterIds)
        {
          oprot.writeString(_iter7);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Entry(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("identity:");
    if (this.identity == null) {
      sb.append("null");
    } else {
      sb.append(this.identity);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("accessId:");
    if (this.accessId == null) {
      sb.append("null");
    } else {
      sb.append(this.accessId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("kind:");
    if (this.kind == null) {
      sb.append("null");
    } else {
      sb.append(this.kind);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isAuthor:");
    sb.append(this.isAuthor);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isPublicAvailable:");
    sb.append(this.isPublicAvailable);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isFavorite:");
    sb.append(this.isFavorite);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isRead:");
    sb.append(this.isRead);
    first = false;
    if (!first) sb.append(", ");
    sb.append("title:");
    if (this.title == null) {
      sb.append("null");
    } else {
      sb.append(this.title);
    }
    first = false;
    if (isSetDescription()) {
      if (!first) sb.append(", ");
      sb.append("description:");
      if (this.description == null) {
        sb.append("null");
      } else {
        sb.append(this.description);
      }
      first = false;
    }
    if (isSetAuthor()) {
      if (!first) sb.append(", ");
      sb.append("author:");
      if (this.author == null) {
        sb.append("null");
      } else {
        sb.append(this.author);
      }
      first = false;
    }
    if (isSetAuthorIdentity()) {
      if (!first) sb.append(", ");
      sb.append("authorIdentity:");
      if (this.authorIdentity == null) {
        sb.append("null");
      } else {
        sb.append(this.authorIdentity);
      }
      first = false;
    }
    if (isSetAuthorPicUrl()) {
      if (!first) sb.append(", ");
      sb.append("authorPicUrl:");
      if (this.authorPicUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.authorPicUrl);
      }
      first = false;
    }
    if (isSetAuthorScreenName()) {
      if (!first) sb.append(", ");
      sb.append("authorScreenName:");
      if (this.authorScreenName == null) {
        sb.append("null");
      } else {
        sb.append(this.authorScreenName);
      }
      first = false;
    }
    if (isSetDateCreated()) {
      if (!first) sb.append(", ");
      sb.append("dateCreated:");
      sb.append(this.dateCreated);
      first = false;
    }
    if (isSetLastUpdated()) {
      if (!first) sb.append(", ");
      sb.append("lastUpdated:");
      sb.append(this.lastUpdated);
      first = false;
    }
    if (isSetDatePlaced()) {
      if (!first) sb.append(", ");
      sb.append("datePlaced:");
      sb.append(this.datePlaced);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("categoryId:");
    if (this.categoryId == null) {
      sb.append("null");
    } else {
      sb.append(this.categoryId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tagIds:");
    if (this.tagIds == null) {
      sb.append("null");
    } else {
      sb.append(this.tagIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("filterIds:");
    if (this.filterIds == null) {
      sb.append("null");
    } else {
      sb.append(this.filterIds);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

