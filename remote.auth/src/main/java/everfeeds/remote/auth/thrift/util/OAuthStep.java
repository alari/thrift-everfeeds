/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package everfeeds.remote.auth.thrift.util;

import java.util.*;

public class OAuthStep implements org.apache.thrift.TBase<OAuthStep, OAuthStep._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OAuthStep");

  private static final org.apache.thrift.protocol.TField AUTH_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("authUrl", org.apache.thrift.protocol.TType.STRING, (short) 1);
  private static final org.apache.thrift.protocol.TField REQUEST_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("requestToken", org.apache.thrift.protocol.TType.STRING, (short) 2);
  private static final org.apache.thrift.protocol.TField REQUEST_SECRET_FIELD_DESC = new org.apache.thrift.protocol.TField("requestSecret", org.apache.thrift.protocol.TType.STRING, (short) 3);

  public String authUrl;
  public String requestToken;
  public String requestSecret;

  /**
   * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
   */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    AUTH_URL((short) 1, "authUrl"),
    REQUEST_TOKEN((short) 2, "requestToken"),
    REQUEST_SECRET((short) 3, "requestSecret");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch (fieldId) {
        case 1: // AUTH_URL
          return AUTH_URL;
        case 2: // REQUEST_TOKEN
          return REQUEST_TOKEN;
        case 3: // REQUEST_SECRET
          return REQUEST_SECRET;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.AUTH_URL, new org.apache.thrift.meta_data.FieldMetaData("authUrl", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REQUEST_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("requestToken", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                                       new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REQUEST_SECRET, new org.apache.thrift.meta_data.FieldMetaData("requestSecret", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(OAuthStep.class, metaDataMap);
  }

  public OAuthStep() {
  }

  public OAuthStep(
                      String authUrl,
                      String requestToken,
                      String requestSecret) {
    this();
    this.authUrl = authUrl;
    this.requestToken = requestToken;
    this.requestSecret = requestSecret;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public OAuthStep(OAuthStep other) {
    if (other.isSetAuthUrl()) {
      this.authUrl = other.authUrl;
    }
    if (other.isSetRequestToken()) {
      this.requestToken = other.requestToken;
    }
    if (other.isSetRequestSecret()) {
      this.requestSecret = other.requestSecret;
    }
  }

  public OAuthStep deepCopy() {
    return new OAuthStep(this);
  }

  @Override
  public void clear() {
    this.authUrl = null;
    this.requestToken = null;
    this.requestSecret = null;
  }

  public String getAuthUrl() {
    return this.authUrl;
  }

  public OAuthStep setAuthUrl(String authUrl) {
    this.authUrl = authUrl;
    return this;
  }

  public void unsetAuthUrl() {
    this.authUrl = null;
  }

  /**
   * Returns true if field authUrl is set (has been assigned a value) and false otherwise
   */
  public boolean isSetAuthUrl() {
    return this.authUrl != null;
  }

  public void setAuthUrlIsSet(boolean value) {
    if (!value) {
      this.authUrl = null;
    }
  }

  public String getRequestToken() {
    return this.requestToken;
  }

  public OAuthStep setRequestToken(String requestToken) {
    this.requestToken = requestToken;
    return this;
  }

  public void unsetRequestToken() {
    this.requestToken = null;
  }

  /**
   * Returns true if field requestToken is set (has been assigned a value) and false otherwise
   */
  public boolean isSetRequestToken() {
    return this.requestToken != null;
  }

  public void setRequestTokenIsSet(boolean value) {
    if (!value) {
      this.requestToken = null;
    }
  }

  public String getRequestSecret() {
    return this.requestSecret;
  }

  public OAuthStep setRequestSecret(String requestSecret) {
    this.requestSecret = requestSecret;
    return this;
  }

  public void unsetRequestSecret() {
    this.requestSecret = null;
  }

  /**
   * Returns true if field requestSecret is set (has been assigned a value) and false otherwise
   */
  public boolean isSetRequestSecret() {
    return this.requestSecret != null;
  }

  public void setRequestSecretIsSet(boolean value) {
    if (!value) {
      this.requestSecret = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
      case AUTH_URL:
        if (value == null) {
          unsetAuthUrl();
        } else {
          setAuthUrl((String) value);
        }
        break;

      case REQUEST_TOKEN:
        if (value == null) {
          unsetRequestToken();
        } else {
          setRequestToken((String) value);
        }
        break;

      case REQUEST_SECRET:
        if (value == null) {
          unsetRequestSecret();
        } else {
          setRequestSecret((String) value);
        }
        break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
      case AUTH_URL:
        return getAuthUrl();

      case REQUEST_TOKEN:
        return getRequestToken();

      case REQUEST_SECRET:
        return getRequestSecret();

    }
    throw new IllegalStateException();
  }

  /**
   * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
   */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
      case AUTH_URL:
        return isSetAuthUrl();
      case REQUEST_TOKEN:
        return isSetRequestToken();
      case REQUEST_SECRET:
        return isSetRequestSecret();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof OAuthStep)
      return this.equals((OAuthStep) that);
    return false;
  }

  public boolean equals(OAuthStep that) {
    if (that == null)
      return false;

    boolean this_present_authUrl = true && this.isSetAuthUrl();
    boolean that_present_authUrl = true && that.isSetAuthUrl();
    if (this_present_authUrl || that_present_authUrl) {
      if (!(this_present_authUrl && that_present_authUrl))
        return false;
      if (!this.authUrl.equals(that.authUrl))
        return false;
    }

    boolean this_present_requestToken = true && this.isSetRequestToken();
    boolean that_present_requestToken = true && that.isSetRequestToken();
    if (this_present_requestToken || that_present_requestToken) {
      if (!(this_present_requestToken && that_present_requestToken))
        return false;
      if (!this.requestToken.equals(that.requestToken))
        return false;
    }

    boolean this_present_requestSecret = true && this.isSetRequestSecret();
    boolean that_present_requestSecret = true && that.isSetRequestSecret();
    if (this_present_requestSecret || that_present_requestSecret) {
      if (!(this_present_requestSecret && that_present_requestSecret))
        return false;
      if (!this.requestSecret.equals(that.requestSecret))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(OAuthStep other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    OAuthStep typedOther = (OAuthStep) other;

    lastComparison = Boolean.valueOf(isSetAuthUrl()).compareTo(typedOther.isSetAuthUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuthUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authUrl, typedOther.authUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestToken()).compareTo(typedOther.isSetRequestToken());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestToken()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestToken, typedOther.requestToken);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestSecret()).compareTo(typedOther.isSetRequestSecret());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestSecret()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestSecret, typedOther.requestSecret);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // AUTH_URL
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.authUrl = iprot.readString();
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // REQUEST_TOKEN
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.requestToken = iprot.readString();
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // REQUEST_SECRET
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.requestSecret = iprot.readString();
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.authUrl != null) {
      oprot.writeFieldBegin(AUTH_URL_FIELD_DESC);
      oprot.writeString(this.authUrl);
      oprot.writeFieldEnd();
    }
    if (this.requestToken != null) {
      oprot.writeFieldBegin(REQUEST_TOKEN_FIELD_DESC);
      oprot.writeString(this.requestToken);
      oprot.writeFieldEnd();
    }
    if (this.requestSecret != null) {
      oprot.writeFieldBegin(REQUEST_SECRET_FIELD_DESC);
      oprot.writeString(this.requestSecret);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("OAuthStep(");
    boolean first = true;

    sb.append("authUrl:");
    if (this.authUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.authUrl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestToken:");
    if (this.requestToken == null) {
      sb.append("null");
    } else {
      sb.append(this.requestToken);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestSecret:");
    if (this.requestSecret == null) {
      sb.append("null");
    } else {
      sb.append(this.requestSecret);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

