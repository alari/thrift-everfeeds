/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package everfeeds.remote.auth.thrift;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class AuthFlow {

  public interface Iface extends everfeeds.remote.handshake.thrift.HandshakeFlow.Iface {

    public List<everfeeds.remote.auth.thrift.util.AuthSystem> listAuthSystems() throws org.apache.thrift.TException;

    public boolean checkCredentials(Credentials credentials) throws everfeeds.remote.auth.thrift.ex.AuthSystemUnknown, org.apache.thrift.TException;

    public everfeeds.remote.auth.thrift.util.OAuthStep getOAuthStep(everfeeds.remote.auth.thrift.util.AuthSystem authSystem, String callbackUrl) throws everfeeds.remote.auth.thrift.ex.AuthMethodMismatch, everfeeds.remote.auth.thrift.ex.AuthSystemUnknown, org.apache.thrift.TException;

    public Credentials exchangeOAuthToken(everfeeds.remote.auth.thrift.util.OAuthStep oAuthStep, String verifierCode) throws everfeeds.remote.auth.thrift.ex.AuthMethodMismatch, everfeeds.remote.auth.thrift.ex.AuthSystemUnknown, everfeeds.remote.auth.thrift.ex.AuthFailed, org.apache.thrift.TException;

  }

  public interface AsyncIface extends everfeeds.remote.handshake.thrift.HandshakeFlow .AsyncIface {

    public void listAuthSystems(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.listAuthSystems_call> resultHandler) throws org.apache.thrift.TException;

    public void checkCredentials(Credentials credentials, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.checkCredentials_call> resultHandler) throws org.apache.thrift.TException;

    public void getOAuthStep(everfeeds.remote.auth.thrift.util.AuthSystem authSystem, String callbackUrl, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getOAuthStep_call> resultHandler) throws org.apache.thrift.TException;

    public void exchangeOAuthToken(everfeeds.remote.auth.thrift.util.OAuthStep oAuthStep, String verifierCode, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.exchangeOAuthToken_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends everfeeds.remote.handshake.thrift.HandshakeFlow.Client implements org.apache.thrift.TServiceClient, Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      this(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot)
    {
      super(iprot, oprot);
    }

    public List<everfeeds.remote.auth.thrift.util.AuthSystem> listAuthSystems() throws org.apache.thrift.TException
    {
      send_listAuthSystems();
      return recv_listAuthSystems();
    }

    public void send_listAuthSystems() throws org.apache.thrift.TException
    {
      oprot_.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listAuthSystems", org.apache.thrift.protocol.TMessageType.CALL, ++seqid_));
      listAuthSystems_args args = new listAuthSystems_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public List<everfeeds.remote.auth.thrift.util.AuthSystem> recv_listAuthSystems() throws org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot_.readMessageBegin();
      if (msg.type == org.apache.thrift.protocol.TMessageType.EXCEPTION) {
        org.apache.thrift.TApplicationException x = org.apache.thrift.TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.BAD_SEQUENCE_ID, "listAuthSystems failed: out of sequence response");
      }
      listAuthSystems_result result = new listAuthSystems_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listAuthSystems failed: unknown result");
    }

    public boolean checkCredentials(Credentials credentials) throws everfeeds.remote.auth.thrift.ex.AuthSystemUnknown, org.apache.thrift.TException
    {
      send_checkCredentials(credentials);
      return recv_checkCredentials();
    }

    public void send_checkCredentials(Credentials credentials) throws org.apache.thrift.TException
    {
      oprot_.writeMessageBegin(new org.apache.thrift.protocol.TMessage("checkCredentials", org.apache.thrift.protocol.TMessageType.CALL, ++seqid_));
      checkCredentials_args args = new checkCredentials_args();
      args.setCredentials(credentials);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public boolean recv_checkCredentials() throws everfeeds.remote.auth.thrift.ex.AuthSystemUnknown, org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot_.readMessageBegin();
      if (msg.type == org.apache.thrift.protocol.TMessageType.EXCEPTION) {
        org.apache.thrift.TApplicationException x = org.apache.thrift.TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.BAD_SEQUENCE_ID, "checkCredentials failed: out of sequence response");
      }
      checkCredentials_result result = new checkCredentials_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.aUnknown != null) {
        throw result.aUnknown;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "checkCredentials failed: unknown result");
    }

    public everfeeds.remote.auth.thrift.util.OAuthStep getOAuthStep(everfeeds.remote.auth.thrift.util.AuthSystem authSystem, String callbackUrl) throws everfeeds.remote.auth.thrift.ex.AuthMethodMismatch, everfeeds.remote.auth.thrift.ex.AuthSystemUnknown, org.apache.thrift.TException
    {
      send_getOAuthStep(authSystem, callbackUrl);
      return recv_getOAuthStep();
    }

    public void send_getOAuthStep(everfeeds.remote.auth.thrift.util.AuthSystem authSystem, String callbackUrl) throws org.apache.thrift.TException
    {
      oprot_.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getOAuthStep", org.apache.thrift.protocol.TMessageType.CALL, ++seqid_));
      getOAuthStep_args args = new getOAuthStep_args();
      args.setAuthSystem(authSystem);
      args.setCallbackUrl(callbackUrl);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public everfeeds.remote.auth.thrift.util.OAuthStep recv_getOAuthStep() throws everfeeds.remote.auth.thrift.ex.AuthMethodMismatch, everfeeds.remote.auth.thrift.ex.AuthSystemUnknown, org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot_.readMessageBegin();
      if (msg.type == org.apache.thrift.protocol.TMessageType.EXCEPTION) {
        org.apache.thrift.TApplicationException x = org.apache.thrift.TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.BAD_SEQUENCE_ID, "getOAuthStep failed: out of sequence response");
      }
      getOAuthStep_result result = new getOAuthStep_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.mMismatch != null) {
        throw result.mMismatch;
      }
      if (result.aUnknown != null) {
        throw result.aUnknown;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getOAuthStep failed: unknown result");
    }

    public Credentials exchangeOAuthToken(everfeeds.remote.auth.thrift.util.OAuthStep oAuthStep, String verifierCode) throws everfeeds.remote.auth.thrift.ex.AuthMethodMismatch, everfeeds.remote.auth.thrift.ex.AuthSystemUnknown, everfeeds.remote.auth.thrift.ex.AuthFailed, org.apache.thrift.TException
    {
      send_exchangeOAuthToken(oAuthStep, verifierCode);
      return recv_exchangeOAuthToken();
    }

    public void send_exchangeOAuthToken(everfeeds.remote.auth.thrift.util.OAuthStep oAuthStep, String verifierCode) throws org.apache.thrift.TException
    {
      oprot_.writeMessageBegin(new org.apache.thrift.protocol.TMessage("exchangeOAuthToken", org.apache.thrift.protocol.TMessageType.CALL, ++seqid_));
      exchangeOAuthToken_args args = new exchangeOAuthToken_args();
      args.setOAuthStep(oAuthStep);
      args.setVerifierCode(verifierCode);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Credentials recv_exchangeOAuthToken() throws everfeeds.remote.auth.thrift.ex.AuthMethodMismatch, everfeeds.remote.auth.thrift.ex.AuthSystemUnknown, everfeeds.remote.auth.thrift.ex.AuthFailed, org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot_.readMessageBegin();
      if (msg.type == org.apache.thrift.protocol.TMessageType.EXCEPTION) {
        org.apache.thrift.TApplicationException x = org.apache.thrift.TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.BAD_SEQUENCE_ID, "exchangeOAuthToken failed: out of sequence response");
      }
      exchangeOAuthToken_result result = new exchangeOAuthToken_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.mMismatch != null) {
        throw result.mMismatch;
      }
      if (result.aUnknown != null) {
        throw result.aUnknown;
      }
      if (result.aFailed != null) {
        throw result.aFailed;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "exchangeOAuthToken failed: unknown result");
    }

  }
  public static class AsyncClient extends everfeeds.remote.handshake.thrift.HandshakeFlow.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void listAuthSystems(org.apache.thrift.async.AsyncMethodCallback<listAuthSystems_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listAuthSystems_call method_call = new listAuthSystems_call(resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class listAuthSystems_call extends org.apache.thrift.async.TAsyncMethodCall {
      public listAuthSystems_call(org.apache.thrift.async.AsyncMethodCallback<listAuthSystems_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listAuthSystems", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listAuthSystems_args args = new listAuthSystems_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<everfeeds.remote.auth.thrift.util.AuthSystem> getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listAuthSystems();
      }
    }

    public void checkCredentials(Credentials credentials, org.apache.thrift.async.AsyncMethodCallback<checkCredentials_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      checkCredentials_call method_call = new checkCredentials_call(credentials, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class checkCredentials_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Credentials credentials;
      public checkCredentials_call(Credentials credentials, org.apache.thrift.async.AsyncMethodCallback<checkCredentials_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.credentials = credentials;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("checkCredentials", org.apache.thrift.protocol.TMessageType.CALL, 0));
        checkCredentials_args args = new checkCredentials_args();
        args.setCredentials(credentials);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws everfeeds.remote.auth.thrift.ex.AuthSystemUnknown, org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_checkCredentials();
      }
    }

    public void getOAuthStep(everfeeds.remote.auth.thrift.util.AuthSystem authSystem, String callbackUrl, org.apache.thrift.async.AsyncMethodCallback<getOAuthStep_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getOAuthStep_call method_call = new getOAuthStep_call(authSystem, callbackUrl, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class getOAuthStep_call extends org.apache.thrift.async.TAsyncMethodCall {
      private everfeeds.remote.auth.thrift.util.AuthSystem authSystem;
      private String callbackUrl;
      public getOAuthStep_call(everfeeds.remote.auth.thrift.util.AuthSystem authSystem, String callbackUrl, org.apache.thrift.async.AsyncMethodCallback<getOAuthStep_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authSystem = authSystem;
        this.callbackUrl = callbackUrl;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getOAuthStep", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getOAuthStep_args args = new getOAuthStep_args();
        args.setAuthSystem(authSystem);
        args.setCallbackUrl(callbackUrl);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public everfeeds.remote.auth.thrift.util.OAuthStep getResult() throws everfeeds.remote.auth.thrift.ex.AuthMethodMismatch, everfeeds.remote.auth.thrift.ex.AuthSystemUnknown, org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getOAuthStep();
      }
    }

    public void exchangeOAuthToken(everfeeds.remote.auth.thrift.util.OAuthStep oAuthStep, String verifierCode, org.apache.thrift.async.AsyncMethodCallback<exchangeOAuthToken_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      exchangeOAuthToken_call method_call = new exchangeOAuthToken_call(oAuthStep, verifierCode, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class exchangeOAuthToken_call extends org.apache.thrift.async.TAsyncMethodCall {
      private everfeeds.remote.auth.thrift.util.OAuthStep oAuthStep;
      private String verifierCode;
      public exchangeOAuthToken_call(everfeeds.remote.auth.thrift.util.OAuthStep oAuthStep, String verifierCode, org.apache.thrift.async.AsyncMethodCallback<exchangeOAuthToken_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.oAuthStep = oAuthStep;
        this.verifierCode = verifierCode;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("exchangeOAuthToken", org.apache.thrift.protocol.TMessageType.CALL, 0));
        exchangeOAuthToken_args args = new exchangeOAuthToken_args();
        args.setOAuthStep(oAuthStep);
        args.setVerifierCode(verifierCode);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Credentials getResult() throws everfeeds.remote.auth.thrift.ex.AuthMethodMismatch, everfeeds.remote.auth.thrift.ex.AuthSystemUnknown, everfeeds.remote.auth.thrift.ex.AuthFailed, org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_exchangeOAuthToken();
      }
    }

  }

  public static class Processor extends everfeeds.remote.handshake.thrift.HandshakeFlow.Processor implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(Iface iface)
    {
      super(iface);
      iface_ = iface;
      processMap_.put("listAuthSystems", new listAuthSystems());
      processMap_.put("checkCredentials", new checkCredentials());
      processMap_.put("getOAuthStep", new getOAuthStep());
      processMap_.put("exchangeOAuthToken", new exchangeOAuthToken());
    }

    private Iface iface_;

    public boolean process(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot.readMessageBegin();
      ProcessFunction fn = processMap_.get(msg.name);
      if (fn == null) {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, org.apache.thrift.protocol.TType.STRUCT);
        iprot.readMessageEnd();
        org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.UNKNOWN_METHOD, "Invalid method name: '"+msg.name+"'");
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(msg.name, org.apache.thrift.protocol.TMessageType.EXCEPTION, msg.seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return true;
      }
      fn.process(msg.seqid, iprot, oprot);
      return true;
    }

    private class listAuthSystems implements ProcessFunction {
      public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        listAuthSystems_args args = new listAuthSystems_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listAuthSystems", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        listAuthSystems_result result = new listAuthSystems_result();
        result.success = iface_.listAuthSystems();
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listAuthSystems", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class checkCredentials implements ProcessFunction {
      public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        checkCredentials_args args = new checkCredentials_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("checkCredentials", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        checkCredentials_result result = new checkCredentials_result();
        try {
          result.success = iface_.checkCredentials(args.credentials);
          result.setSuccessIsSet(true);
        } catch (everfeeds.remote.auth.thrift.ex.AuthSystemUnknown aUnknown) {
          result.aUnknown = aUnknown;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing checkCredentials", th);
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, "Internal error processing checkCredentials");
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("checkCredentials", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("checkCredentials", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getOAuthStep implements ProcessFunction {
      public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        getOAuthStep_args args = new getOAuthStep_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getOAuthStep", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getOAuthStep_result result = new getOAuthStep_result();
        try {
          result.success = iface_.getOAuthStep(args.authSystem, args.callbackUrl);
        } catch (everfeeds.remote.auth.thrift.ex.AuthMethodMismatch mMismatch) {
          result.mMismatch = mMismatch;
        } catch (everfeeds.remote.auth.thrift.ex.AuthSystemUnknown aUnknown) {
          result.aUnknown = aUnknown;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing getOAuthStep", th);
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, "Internal error processing getOAuthStep");
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getOAuthStep", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getOAuthStep", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class exchangeOAuthToken implements ProcessFunction {
      public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        exchangeOAuthToken_args args = new exchangeOAuthToken_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("exchangeOAuthToken", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        exchangeOAuthToken_result result = new exchangeOAuthToken_result();
        try {
          result.success = iface_.exchangeOAuthToken(args.oAuthStep, args.verifierCode);
        } catch (everfeeds.remote.auth.thrift.ex.AuthMethodMismatch mMismatch) {
          result.mMismatch = mMismatch;
        } catch (everfeeds.remote.auth.thrift.ex.AuthSystemUnknown aUnknown) {
          result.aUnknown = aUnknown;
        } catch (everfeeds.remote.auth.thrift.ex.AuthFailed aFailed) {
          result.aFailed = aFailed;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing exchangeOAuthToken", th);
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, "Internal error processing exchangeOAuthToken");
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("exchangeOAuthToken", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("exchangeOAuthToken", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

  }

  public static class listAuthSystems_args implements org.apache.thrift.TBase<listAuthSystems_args, listAuthSystems_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listAuthSystems_args");



    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listAuthSystems_args.class, metaDataMap);
    }

    public listAuthSystems_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listAuthSystems_args(listAuthSystems_args other) {
    }

    public listAuthSystems_args deepCopy() {
      return new listAuthSystems_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listAuthSystems_args)
        return this.equals((listAuthSystems_args)that);
      return false;
    }

    public boolean equals(listAuthSystems_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(listAuthSystems_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      listAuthSystems_args typedOther = (listAuthSystems_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listAuthSystems_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class listAuthSystems_result implements org.apache.thrift.TBase<listAuthSystems_result, listAuthSystems_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listAuthSystems_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    public List<everfeeds.remote.auth.thrift.util.AuthSystem> success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, everfeeds.remote.auth.thrift.util.AuthSystem.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listAuthSystems_result.class, metaDataMap);
    }

    public listAuthSystems_result() {
    }

    public listAuthSystems_result(
      List<everfeeds.remote.auth.thrift.util.AuthSystem> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listAuthSystems_result(listAuthSystems_result other) {
      if (other.isSetSuccess()) {
        List<everfeeds.remote.auth.thrift.util.AuthSystem> __this__success = new ArrayList<everfeeds.remote.auth.thrift.util.AuthSystem>();
        for (everfeeds.remote.auth.thrift.util.AuthSystem other_element : other.success) {
          __this__success.add(new everfeeds.remote.auth.thrift.util.AuthSystem(other_element));
        }
        this.success = __this__success;
      }
    }

    public listAuthSystems_result deepCopy() {
      return new listAuthSystems_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<everfeeds.remote.auth.thrift.util.AuthSystem> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(everfeeds.remote.auth.thrift.util.AuthSystem elem) {
      if (this.success == null) {
        this.success = new ArrayList<everfeeds.remote.auth.thrift.util.AuthSystem>();
      }
      this.success.add(elem);
    }

    public List<everfeeds.remote.auth.thrift.util.AuthSystem> getSuccess() {
      return this.success;
    }

    public listAuthSystems_result setSuccess(List<everfeeds.remote.auth.thrift.util.AuthSystem> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<everfeeds.remote.auth.thrift.util.AuthSystem>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listAuthSystems_result)
        return this.equals((listAuthSystems_result)that);
      return false;
    }

    public boolean equals(listAuthSystems_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(listAuthSystems_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      listAuthSystems_result typedOther = (listAuthSystems_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list5 = iprot.readListBegin();
                this.success = new ArrayList<everfeeds.remote.auth.thrift.util.AuthSystem>(_list5.size);
                for (int _i6 = 0; _i6 < _list5.size; ++_i6)
                {
                  everfeeds.remote.auth.thrift.util.AuthSystem _elem7;
                  _elem7 = new everfeeds.remote.auth.thrift.util.AuthSystem();
                  _elem7.read(iprot);
                  this.success.add(_elem7);
                }
                iprot.readListEnd();
              }
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, this.success.size()));
          for (everfeeds.remote.auth.thrift.util.AuthSystem _iter8 : this.success)
          {
            _iter8.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listAuthSystems_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class checkCredentials_args implements org.apache.thrift.TBase<checkCredentials_args, checkCredentials_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkCredentials_args");

    private static final org.apache.thrift.protocol.TField CREDENTIALS_FIELD_DESC = new org.apache.thrift.protocol.TField("credentials", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public Credentials credentials;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CREDENTIALS((short)1, "credentials");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CREDENTIALS
            return CREDENTIALS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CREDENTIALS, new org.apache.thrift.meta_data.FieldMetaData("credentials", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Credentials.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkCredentials_args.class, metaDataMap);
    }

    public checkCredentials_args() {
    }

    public checkCredentials_args(
      Credentials credentials)
    {
      this();
      this.credentials = credentials;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkCredentials_args(checkCredentials_args other) {
      if (other.isSetCredentials()) {
        this.credentials = new Credentials(other.credentials);
      }
    }

    public checkCredentials_args deepCopy() {
      return new checkCredentials_args(this);
    }

    @Override
    public void clear() {
      this.credentials = null;
    }

    public Credentials getCredentials() {
      return this.credentials;
    }

    public checkCredentials_args setCredentials(Credentials credentials) {
      this.credentials = credentials;
      return this;
    }

    public void unsetCredentials() {
      this.credentials = null;
    }

    /** Returns true if field credentials is set (has been assigned a value) and false otherwise */
    public boolean isSetCredentials() {
      return this.credentials != null;
    }

    public void setCredentialsIsSet(boolean value) {
      if (!value) {
        this.credentials = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CREDENTIALS:
        if (value == null) {
          unsetCredentials();
        } else {
          setCredentials((Credentials)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CREDENTIALS:
        return getCredentials();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CREDENTIALS:
        return isSetCredentials();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkCredentials_args)
        return this.equals((checkCredentials_args)that);
      return false;
    }

    public boolean equals(checkCredentials_args that) {
      if (that == null)
        return false;

      boolean this_present_credentials = true && this.isSetCredentials();
      boolean that_present_credentials = true && that.isSetCredentials();
      if (this_present_credentials || that_present_credentials) {
        if (!(this_present_credentials && that_present_credentials))
          return false;
        if (!this.credentials.equals(that.credentials))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(checkCredentials_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      checkCredentials_args typedOther = (checkCredentials_args)other;

      lastComparison = Boolean.valueOf(isSetCredentials()).compareTo(typedOther.isSetCredentials());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCredentials()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.credentials, typedOther.credentials);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // CREDENTIALS
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.credentials = new Credentials();
              this.credentials.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.credentials != null) {
        oprot.writeFieldBegin(CREDENTIALS_FIELD_DESC);
        this.credentials.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("checkCredentials_args(");
      boolean first = true;

      sb.append("credentials:");
      if (this.credentials == null) {
        sb.append("null");
      } else {
        sb.append(this.credentials);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class checkCredentials_result implements org.apache.thrift.TBase<checkCredentials_result, checkCredentials_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkCredentials_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField A_UNKNOWN_FIELD_DESC = new org.apache.thrift.protocol.TField("aUnknown", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    public boolean success;
    public everfeeds.remote.auth.thrift.ex.AuthSystemUnknown aUnknown;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      A_UNKNOWN((short)2, "aUnknown");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 2: // A_UNKNOWN
            return A_UNKNOWN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.A_UNKNOWN, new org.apache.thrift.meta_data.FieldMetaData("aUnknown", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkCredentials_result.class, metaDataMap);
    }

    public checkCredentials_result() {
    }

    public checkCredentials_result(
      boolean success,
      everfeeds.remote.auth.thrift.ex.AuthSystemUnknown aUnknown)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.aUnknown = aUnknown;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkCredentials_result(checkCredentials_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
      if (other.isSetAUnknown()) {
        this.aUnknown = new everfeeds.remote.auth.thrift.ex.AuthSystemUnknown(other.aUnknown);
      }
    }

    public checkCredentials_result deepCopy() {
      return new checkCredentials_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.aUnknown = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public checkCredentials_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public everfeeds.remote.auth.thrift.ex.AuthSystemUnknown getAUnknown() {
      return this.aUnknown;
    }

    public checkCredentials_result setAUnknown(everfeeds.remote.auth.thrift.ex.AuthSystemUnknown aUnknown) {
      this.aUnknown = aUnknown;
      return this;
    }

    public void unsetAUnknown() {
      this.aUnknown = null;
    }

    /** Returns true if field aUnknown is set (has been assigned a value) and false otherwise */
    public boolean isSetAUnknown() {
      return this.aUnknown != null;
    }

    public void setAUnknownIsSet(boolean value) {
      if (!value) {
        this.aUnknown = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case A_UNKNOWN:
        if (value == null) {
          unsetAUnknown();
        } else {
          setAUnknown((everfeeds.remote.auth.thrift.ex.AuthSystemUnknown)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return new Boolean(isSuccess());

      case A_UNKNOWN:
        return getAUnknown();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case A_UNKNOWN:
        return isSetAUnknown();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkCredentials_result)
        return this.equals((checkCredentials_result)that);
      return false;
    }

    public boolean equals(checkCredentials_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_aUnknown = true && this.isSetAUnknown();
      boolean that_present_aUnknown = true && that.isSetAUnknown();
      if (this_present_aUnknown || that_present_aUnknown) {
        if (!(this_present_aUnknown && that_present_aUnknown))
          return false;
        if (!this.aUnknown.equals(that.aUnknown))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(checkCredentials_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      checkCredentials_result typedOther = (checkCredentials_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAUnknown()).compareTo(typedOther.isSetAUnknown());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAUnknown()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aUnknown, typedOther.aUnknown);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.BOOL) {
              this.success = iprot.readBool();
              setSuccessIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // A_UNKNOWN
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.aUnknown = new everfeeds.remote.auth.thrift.ex.AuthSystemUnknown();
              this.aUnknown.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetAUnknown()) {
        oprot.writeFieldBegin(A_UNKNOWN_FIELD_DESC);
        this.aUnknown.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("checkCredentials_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("aUnknown:");
      if (this.aUnknown == null) {
        sb.append("null");
      } else {
        sb.append(this.aUnknown);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getOAuthStep_args implements org.apache.thrift.TBase<getOAuthStep_args, getOAuthStep_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOAuthStep_args");

    private static final org.apache.thrift.protocol.TField AUTH_SYSTEM_FIELD_DESC = new org.apache.thrift.protocol.TField("authSystem", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CALLBACK_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("callbackUrl", org.apache.thrift.protocol.TType.STRING, (short)2);

    public everfeeds.remote.auth.thrift.util.AuthSystem authSystem;
    public String callbackUrl;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTH_SYSTEM((short)1, "authSystem"),
      CALLBACK_URL((short)2, "callbackUrl");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH_SYSTEM
            return AUTH_SYSTEM;
          case 2: // CALLBACK_URL
            return CALLBACK_URL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH_SYSTEM, new org.apache.thrift.meta_data.FieldMetaData("authSystem", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, everfeeds.remote.auth.thrift.util.AuthSystem.class)));
      tmpMap.put(_Fields.CALLBACK_URL, new org.apache.thrift.meta_data.FieldMetaData("callbackUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOAuthStep_args.class, metaDataMap);
    }

    public getOAuthStep_args() {
    }

    public getOAuthStep_args(
      everfeeds.remote.auth.thrift.util.AuthSystem authSystem,
      String callbackUrl)
    {
      this();
      this.authSystem = authSystem;
      this.callbackUrl = callbackUrl;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOAuthStep_args(getOAuthStep_args other) {
      if (other.isSetAuthSystem()) {
        this.authSystem = new everfeeds.remote.auth.thrift.util.AuthSystem(other.authSystem);
      }
      if (other.isSetCallbackUrl()) {
        this.callbackUrl = other.callbackUrl;
      }
    }

    public getOAuthStep_args deepCopy() {
      return new getOAuthStep_args(this);
    }

    @Override
    public void clear() {
      this.authSystem = null;
      this.callbackUrl = null;
    }

    public everfeeds.remote.auth.thrift.util.AuthSystem getAuthSystem() {
      return this.authSystem;
    }

    public getOAuthStep_args setAuthSystem(everfeeds.remote.auth.thrift.util.AuthSystem authSystem) {
      this.authSystem = authSystem;
      return this;
    }

    public void unsetAuthSystem() {
      this.authSystem = null;
    }

    /** Returns true if field authSystem is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthSystem() {
      return this.authSystem != null;
    }

    public void setAuthSystemIsSet(boolean value) {
      if (!value) {
        this.authSystem = null;
      }
    }

    public String getCallbackUrl() {
      return this.callbackUrl;
    }

    public getOAuthStep_args setCallbackUrl(String callbackUrl) {
      this.callbackUrl = callbackUrl;
      return this;
    }

    public void unsetCallbackUrl() {
      this.callbackUrl = null;
    }

    /** Returns true if field callbackUrl is set (has been assigned a value) and false otherwise */
    public boolean isSetCallbackUrl() {
      return this.callbackUrl != null;
    }

    public void setCallbackUrlIsSet(boolean value) {
      if (!value) {
        this.callbackUrl = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTH_SYSTEM:
        if (value == null) {
          unsetAuthSystem();
        } else {
          setAuthSystem((everfeeds.remote.auth.thrift.util.AuthSystem)value);
        }
        break;

      case CALLBACK_URL:
        if (value == null) {
          unsetCallbackUrl();
        } else {
          setCallbackUrl((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH_SYSTEM:
        return getAuthSystem();

      case CALLBACK_URL:
        return getCallbackUrl();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTH_SYSTEM:
        return isSetAuthSystem();
      case CALLBACK_URL:
        return isSetCallbackUrl();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOAuthStep_args)
        return this.equals((getOAuthStep_args)that);
      return false;
    }

    public boolean equals(getOAuthStep_args that) {
      if (that == null)
        return false;

      boolean this_present_authSystem = true && this.isSetAuthSystem();
      boolean that_present_authSystem = true && that.isSetAuthSystem();
      if (this_present_authSystem || that_present_authSystem) {
        if (!(this_present_authSystem && that_present_authSystem))
          return false;
        if (!this.authSystem.equals(that.authSystem))
          return false;
      }

      boolean this_present_callbackUrl = true && this.isSetCallbackUrl();
      boolean that_present_callbackUrl = true && that.isSetCallbackUrl();
      if (this_present_callbackUrl || that_present_callbackUrl) {
        if (!(this_present_callbackUrl && that_present_callbackUrl))
          return false;
        if (!this.callbackUrl.equals(that.callbackUrl))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getOAuthStep_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getOAuthStep_args typedOther = (getOAuthStep_args)other;

      lastComparison = Boolean.valueOf(isSetAuthSystem()).compareTo(typedOther.isSetAuthSystem());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthSystem()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authSystem, typedOther.authSystem);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCallbackUrl()).compareTo(typedOther.isSetCallbackUrl());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCallbackUrl()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.callbackUrl, typedOther.callbackUrl);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTH_SYSTEM
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.authSystem = new everfeeds.remote.auth.thrift.util.AuthSystem();
              this.authSystem.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // CALLBACK_URL
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.callbackUrl = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authSystem != null) {
        oprot.writeFieldBegin(AUTH_SYSTEM_FIELD_DESC);
        this.authSystem.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.callbackUrl != null) {
        oprot.writeFieldBegin(CALLBACK_URL_FIELD_DESC);
        oprot.writeString(this.callbackUrl);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOAuthStep_args(");
      boolean first = true;

      sb.append("authSystem:");
      if (this.authSystem == null) {
        sb.append("null");
      } else {
        sb.append(this.authSystem);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("callbackUrl:");
      if (this.callbackUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.callbackUrl);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getOAuthStep_result implements org.apache.thrift.TBase<getOAuthStep_result, getOAuthStep_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOAuthStep_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField M_MISMATCH_FIELD_DESC = new org.apache.thrift.protocol.TField("mMismatch", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField A_UNKNOWN_FIELD_DESC = new org.apache.thrift.protocol.TField("aUnknown", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    public everfeeds.remote.auth.thrift.util.OAuthStep success;
    public everfeeds.remote.auth.thrift.ex.AuthMethodMismatch mMismatch;
    public everfeeds.remote.auth.thrift.ex.AuthSystemUnknown aUnknown;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      M_MISMATCH((short)1, "mMismatch"),
      A_UNKNOWN((short)2, "aUnknown");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // M_MISMATCH
            return M_MISMATCH;
          case 2: // A_UNKNOWN
            return A_UNKNOWN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, everfeeds.remote.auth.thrift.util.OAuthStep.class)));
      tmpMap.put(_Fields.M_MISMATCH, new org.apache.thrift.meta_data.FieldMetaData("mMismatch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.A_UNKNOWN, new org.apache.thrift.meta_data.FieldMetaData("aUnknown", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOAuthStep_result.class, metaDataMap);
    }

    public getOAuthStep_result() {
    }

    public getOAuthStep_result(
      everfeeds.remote.auth.thrift.util.OAuthStep success,
      everfeeds.remote.auth.thrift.ex.AuthMethodMismatch mMismatch,
      everfeeds.remote.auth.thrift.ex.AuthSystemUnknown aUnknown)
    {
      this();
      this.success = success;
      this.mMismatch = mMismatch;
      this.aUnknown = aUnknown;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOAuthStep_result(getOAuthStep_result other) {
      if (other.isSetSuccess()) {
        this.success = new everfeeds.remote.auth.thrift.util.OAuthStep(other.success);
      }
      if (other.isSetMMismatch()) {
        this.mMismatch = new everfeeds.remote.auth.thrift.ex.AuthMethodMismatch(other.mMismatch);
      }
      if (other.isSetAUnknown()) {
        this.aUnknown = new everfeeds.remote.auth.thrift.ex.AuthSystemUnknown(other.aUnknown);
      }
    }

    public getOAuthStep_result deepCopy() {
      return new getOAuthStep_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.mMismatch = null;
      this.aUnknown = null;
    }

    public everfeeds.remote.auth.thrift.util.OAuthStep getSuccess() {
      return this.success;
    }

    public getOAuthStep_result setSuccess(everfeeds.remote.auth.thrift.util.OAuthStep success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public everfeeds.remote.auth.thrift.ex.AuthMethodMismatch getMMismatch() {
      return this.mMismatch;
    }

    public getOAuthStep_result setMMismatch(everfeeds.remote.auth.thrift.ex.AuthMethodMismatch mMismatch) {
      this.mMismatch = mMismatch;
      return this;
    }

    public void unsetMMismatch() {
      this.mMismatch = null;
    }

    /** Returns true if field mMismatch is set (has been assigned a value) and false otherwise */
    public boolean isSetMMismatch() {
      return this.mMismatch != null;
    }

    public void setMMismatchIsSet(boolean value) {
      if (!value) {
        this.mMismatch = null;
      }
    }

    public everfeeds.remote.auth.thrift.ex.AuthSystemUnknown getAUnknown() {
      return this.aUnknown;
    }

    public getOAuthStep_result setAUnknown(everfeeds.remote.auth.thrift.ex.AuthSystemUnknown aUnknown) {
      this.aUnknown = aUnknown;
      return this;
    }

    public void unsetAUnknown() {
      this.aUnknown = null;
    }

    /** Returns true if field aUnknown is set (has been assigned a value) and false otherwise */
    public boolean isSetAUnknown() {
      return this.aUnknown != null;
    }

    public void setAUnknownIsSet(boolean value) {
      if (!value) {
        this.aUnknown = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((everfeeds.remote.auth.thrift.util.OAuthStep)value);
        }
        break;

      case M_MISMATCH:
        if (value == null) {
          unsetMMismatch();
        } else {
          setMMismatch((everfeeds.remote.auth.thrift.ex.AuthMethodMismatch)value);
        }
        break;

      case A_UNKNOWN:
        if (value == null) {
          unsetAUnknown();
        } else {
          setAUnknown((everfeeds.remote.auth.thrift.ex.AuthSystemUnknown)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case M_MISMATCH:
        return getMMismatch();

      case A_UNKNOWN:
        return getAUnknown();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case M_MISMATCH:
        return isSetMMismatch();
      case A_UNKNOWN:
        return isSetAUnknown();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOAuthStep_result)
        return this.equals((getOAuthStep_result)that);
      return false;
    }

    public boolean equals(getOAuthStep_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_mMismatch = true && this.isSetMMismatch();
      boolean that_present_mMismatch = true && that.isSetMMismatch();
      if (this_present_mMismatch || that_present_mMismatch) {
        if (!(this_present_mMismatch && that_present_mMismatch))
          return false;
        if (!this.mMismatch.equals(that.mMismatch))
          return false;
      }

      boolean this_present_aUnknown = true && this.isSetAUnknown();
      boolean that_present_aUnknown = true && that.isSetAUnknown();
      if (this_present_aUnknown || that_present_aUnknown) {
        if (!(this_present_aUnknown && that_present_aUnknown))
          return false;
        if (!this.aUnknown.equals(that.aUnknown))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getOAuthStep_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getOAuthStep_result typedOther = (getOAuthStep_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMMismatch()).compareTo(typedOther.isSetMMismatch());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMMismatch()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mMismatch, typedOther.mMismatch);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAUnknown()).compareTo(typedOther.isSetAUnknown());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAUnknown()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aUnknown, typedOther.aUnknown);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.success = new everfeeds.remote.auth.thrift.util.OAuthStep();
              this.success.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // M_MISMATCH
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.mMismatch = new everfeeds.remote.auth.thrift.ex.AuthMethodMismatch();
              this.mMismatch.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // A_UNKNOWN
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.aUnknown = new everfeeds.remote.auth.thrift.ex.AuthSystemUnknown();
              this.aUnknown.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetMMismatch()) {
        oprot.writeFieldBegin(M_MISMATCH_FIELD_DESC);
        this.mMismatch.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetAUnknown()) {
        oprot.writeFieldBegin(A_UNKNOWN_FIELD_DESC);
        this.aUnknown.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOAuthStep_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mMismatch:");
      if (this.mMismatch == null) {
        sb.append("null");
      } else {
        sb.append(this.mMismatch);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("aUnknown:");
      if (this.aUnknown == null) {
        sb.append("null");
      } else {
        sb.append(this.aUnknown);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class exchangeOAuthToken_args implements org.apache.thrift.TBase<exchangeOAuthToken_args, exchangeOAuthToken_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("exchangeOAuthToken_args");

    private static final org.apache.thrift.protocol.TField O_AUTH_STEP_FIELD_DESC = new org.apache.thrift.protocol.TField("oAuthStep", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField VERIFIER_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("verifierCode", org.apache.thrift.protocol.TType.STRING, (short)3);

    public everfeeds.remote.auth.thrift.util.OAuthStep oAuthStep;
    public String verifierCode;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      O_AUTH_STEP((short)2, "oAuthStep"),
      VERIFIER_CODE((short)3, "verifierCode");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 2: // O_AUTH_STEP
            return O_AUTH_STEP;
          case 3: // VERIFIER_CODE
            return VERIFIER_CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.O_AUTH_STEP, new org.apache.thrift.meta_data.FieldMetaData("oAuthStep", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, everfeeds.remote.auth.thrift.util.OAuthStep.class)));
      tmpMap.put(_Fields.VERIFIER_CODE, new org.apache.thrift.meta_data.FieldMetaData("verifierCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(exchangeOAuthToken_args.class, metaDataMap);
    }

    public exchangeOAuthToken_args() {
    }

    public exchangeOAuthToken_args(
      everfeeds.remote.auth.thrift.util.OAuthStep oAuthStep,
      String verifierCode)
    {
      this();
      this.oAuthStep = oAuthStep;
      this.verifierCode = verifierCode;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public exchangeOAuthToken_args(exchangeOAuthToken_args other) {
      if (other.isSetOAuthStep()) {
        this.oAuthStep = new everfeeds.remote.auth.thrift.util.OAuthStep(other.oAuthStep);
      }
      if (other.isSetVerifierCode()) {
        this.verifierCode = other.verifierCode;
      }
    }

    public exchangeOAuthToken_args deepCopy() {
      return new exchangeOAuthToken_args(this);
    }

    @Override
    public void clear() {
      this.oAuthStep = null;
      this.verifierCode = null;
    }

    public everfeeds.remote.auth.thrift.util.OAuthStep getOAuthStep() {
      return this.oAuthStep;
    }

    public exchangeOAuthToken_args setOAuthStep(everfeeds.remote.auth.thrift.util.OAuthStep oAuthStep) {
      this.oAuthStep = oAuthStep;
      return this;
    }

    public void unsetOAuthStep() {
      this.oAuthStep = null;
    }

    /** Returns true if field oAuthStep is set (has been assigned a value) and false otherwise */
    public boolean isSetOAuthStep() {
      return this.oAuthStep != null;
    }

    public void setOAuthStepIsSet(boolean value) {
      if (!value) {
        this.oAuthStep = null;
      }
    }

    public String getVerifierCode() {
      return this.verifierCode;
    }

    public exchangeOAuthToken_args setVerifierCode(String verifierCode) {
      this.verifierCode = verifierCode;
      return this;
    }

    public void unsetVerifierCode() {
      this.verifierCode = null;
    }

    /** Returns true if field verifierCode is set (has been assigned a value) and false otherwise */
    public boolean isSetVerifierCode() {
      return this.verifierCode != null;
    }

    public void setVerifierCodeIsSet(boolean value) {
      if (!value) {
        this.verifierCode = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case O_AUTH_STEP:
        if (value == null) {
          unsetOAuthStep();
        } else {
          setOAuthStep((everfeeds.remote.auth.thrift.util.OAuthStep)value);
        }
        break;

      case VERIFIER_CODE:
        if (value == null) {
          unsetVerifierCode();
        } else {
          setVerifierCode((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case O_AUTH_STEP:
        return getOAuthStep();

      case VERIFIER_CODE:
        return getVerifierCode();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case O_AUTH_STEP:
        return isSetOAuthStep();
      case VERIFIER_CODE:
        return isSetVerifierCode();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof exchangeOAuthToken_args)
        return this.equals((exchangeOAuthToken_args)that);
      return false;
    }

    public boolean equals(exchangeOAuthToken_args that) {
      if (that == null)
        return false;

      boolean this_present_oAuthStep = true && this.isSetOAuthStep();
      boolean that_present_oAuthStep = true && that.isSetOAuthStep();
      if (this_present_oAuthStep || that_present_oAuthStep) {
        if (!(this_present_oAuthStep && that_present_oAuthStep))
          return false;
        if (!this.oAuthStep.equals(that.oAuthStep))
          return false;
      }

      boolean this_present_verifierCode = true && this.isSetVerifierCode();
      boolean that_present_verifierCode = true && that.isSetVerifierCode();
      if (this_present_verifierCode || that_present_verifierCode) {
        if (!(this_present_verifierCode && that_present_verifierCode))
          return false;
        if (!this.verifierCode.equals(that.verifierCode))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(exchangeOAuthToken_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      exchangeOAuthToken_args typedOther = (exchangeOAuthToken_args)other;

      lastComparison = Boolean.valueOf(isSetOAuthStep()).compareTo(typedOther.isSetOAuthStep());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOAuthStep()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oAuthStep, typedOther.oAuthStep);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVerifierCode()).compareTo(typedOther.isSetVerifierCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVerifierCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.verifierCode, typedOther.verifierCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // O_AUTH_STEP
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.oAuthStep = new everfeeds.remote.auth.thrift.util.OAuthStep();
              this.oAuthStep.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // VERIFIER_CODE
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.verifierCode = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.oAuthStep != null) {
        oprot.writeFieldBegin(O_AUTH_STEP_FIELD_DESC);
        this.oAuthStep.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.verifierCode != null) {
        oprot.writeFieldBegin(VERIFIER_CODE_FIELD_DESC);
        oprot.writeString(this.verifierCode);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("exchangeOAuthToken_args(");
      boolean first = true;

      sb.append("oAuthStep:");
      if (this.oAuthStep == null) {
        sb.append("null");
      } else {
        sb.append(this.oAuthStep);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("verifierCode:");
      if (this.verifierCode == null) {
        sb.append("null");
      } else {
        sb.append(this.verifierCode);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class exchangeOAuthToken_result implements org.apache.thrift.TBase<exchangeOAuthToken_result, exchangeOAuthToken_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("exchangeOAuthToken_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField M_MISMATCH_FIELD_DESC = new org.apache.thrift.protocol.TField("mMismatch", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField A_UNKNOWN_FIELD_DESC = new org.apache.thrift.protocol.TField("aUnknown", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField A_FAILED_FIELD_DESC = new org.apache.thrift.protocol.TField("aFailed", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    public Credentials success;
    public everfeeds.remote.auth.thrift.ex.AuthMethodMismatch mMismatch;
    public everfeeds.remote.auth.thrift.ex.AuthSystemUnknown aUnknown;
    public everfeeds.remote.auth.thrift.ex.AuthFailed aFailed;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      M_MISMATCH((short)1, "mMismatch"),
      A_UNKNOWN((short)2, "aUnknown"),
      A_FAILED((short)3, "aFailed");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // M_MISMATCH
            return M_MISMATCH;
          case 2: // A_UNKNOWN
            return A_UNKNOWN;
          case 3: // A_FAILED
            return A_FAILED;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Credentials.class)));
      tmpMap.put(_Fields.M_MISMATCH, new org.apache.thrift.meta_data.FieldMetaData("mMismatch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.A_UNKNOWN, new org.apache.thrift.meta_data.FieldMetaData("aUnknown", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.A_FAILED, new org.apache.thrift.meta_data.FieldMetaData("aFailed", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(exchangeOAuthToken_result.class, metaDataMap);
    }

    public exchangeOAuthToken_result() {
    }

    public exchangeOAuthToken_result(
      Credentials success,
      everfeeds.remote.auth.thrift.ex.AuthMethodMismatch mMismatch,
      everfeeds.remote.auth.thrift.ex.AuthSystemUnknown aUnknown,
      everfeeds.remote.auth.thrift.ex.AuthFailed aFailed)
    {
      this();
      this.success = success;
      this.mMismatch = mMismatch;
      this.aUnknown = aUnknown;
      this.aFailed = aFailed;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public exchangeOAuthToken_result(exchangeOAuthToken_result other) {
      if (other.isSetSuccess()) {
        this.success = new Credentials(other.success);
      }
      if (other.isSetMMismatch()) {
        this.mMismatch = new everfeeds.remote.auth.thrift.ex.AuthMethodMismatch(other.mMismatch);
      }
      if (other.isSetAUnknown()) {
        this.aUnknown = new everfeeds.remote.auth.thrift.ex.AuthSystemUnknown(other.aUnknown);
      }
      if (other.isSetAFailed()) {
        this.aFailed = new everfeeds.remote.auth.thrift.ex.AuthFailed(other.aFailed);
      }
    }

    public exchangeOAuthToken_result deepCopy() {
      return new exchangeOAuthToken_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.mMismatch = null;
      this.aUnknown = null;
      this.aFailed = null;
    }

    public Credentials getSuccess() {
      return this.success;
    }

    public exchangeOAuthToken_result setSuccess(Credentials success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public everfeeds.remote.auth.thrift.ex.AuthMethodMismatch getMMismatch() {
      return this.mMismatch;
    }

    public exchangeOAuthToken_result setMMismatch(everfeeds.remote.auth.thrift.ex.AuthMethodMismatch mMismatch) {
      this.mMismatch = mMismatch;
      return this;
    }

    public void unsetMMismatch() {
      this.mMismatch = null;
    }

    /** Returns true if field mMismatch is set (has been assigned a value) and false otherwise */
    public boolean isSetMMismatch() {
      return this.mMismatch != null;
    }

    public void setMMismatchIsSet(boolean value) {
      if (!value) {
        this.mMismatch = null;
      }
    }

    public everfeeds.remote.auth.thrift.ex.AuthSystemUnknown getAUnknown() {
      return this.aUnknown;
    }

    public exchangeOAuthToken_result setAUnknown(everfeeds.remote.auth.thrift.ex.AuthSystemUnknown aUnknown) {
      this.aUnknown = aUnknown;
      return this;
    }

    public void unsetAUnknown() {
      this.aUnknown = null;
    }

    /** Returns true if field aUnknown is set (has been assigned a value) and false otherwise */
    public boolean isSetAUnknown() {
      return this.aUnknown != null;
    }

    public void setAUnknownIsSet(boolean value) {
      if (!value) {
        this.aUnknown = null;
      }
    }

    public everfeeds.remote.auth.thrift.ex.AuthFailed getAFailed() {
      return this.aFailed;
    }

    public exchangeOAuthToken_result setAFailed(everfeeds.remote.auth.thrift.ex.AuthFailed aFailed) {
      this.aFailed = aFailed;
      return this;
    }

    public void unsetAFailed() {
      this.aFailed = null;
    }

    /** Returns true if field aFailed is set (has been assigned a value) and false otherwise */
    public boolean isSetAFailed() {
      return this.aFailed != null;
    }

    public void setAFailedIsSet(boolean value) {
      if (!value) {
        this.aFailed = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Credentials)value);
        }
        break;

      case M_MISMATCH:
        if (value == null) {
          unsetMMismatch();
        } else {
          setMMismatch((everfeeds.remote.auth.thrift.ex.AuthMethodMismatch)value);
        }
        break;

      case A_UNKNOWN:
        if (value == null) {
          unsetAUnknown();
        } else {
          setAUnknown((everfeeds.remote.auth.thrift.ex.AuthSystemUnknown)value);
        }
        break;

      case A_FAILED:
        if (value == null) {
          unsetAFailed();
        } else {
          setAFailed((everfeeds.remote.auth.thrift.ex.AuthFailed)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case M_MISMATCH:
        return getMMismatch();

      case A_UNKNOWN:
        return getAUnknown();

      case A_FAILED:
        return getAFailed();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case M_MISMATCH:
        return isSetMMismatch();
      case A_UNKNOWN:
        return isSetAUnknown();
      case A_FAILED:
        return isSetAFailed();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof exchangeOAuthToken_result)
        return this.equals((exchangeOAuthToken_result)that);
      return false;
    }

    public boolean equals(exchangeOAuthToken_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_mMismatch = true && this.isSetMMismatch();
      boolean that_present_mMismatch = true && that.isSetMMismatch();
      if (this_present_mMismatch || that_present_mMismatch) {
        if (!(this_present_mMismatch && that_present_mMismatch))
          return false;
        if (!this.mMismatch.equals(that.mMismatch))
          return false;
      }

      boolean this_present_aUnknown = true && this.isSetAUnknown();
      boolean that_present_aUnknown = true && that.isSetAUnknown();
      if (this_present_aUnknown || that_present_aUnknown) {
        if (!(this_present_aUnknown && that_present_aUnknown))
          return false;
        if (!this.aUnknown.equals(that.aUnknown))
          return false;
      }

      boolean this_present_aFailed = true && this.isSetAFailed();
      boolean that_present_aFailed = true && that.isSetAFailed();
      if (this_present_aFailed || that_present_aFailed) {
        if (!(this_present_aFailed && that_present_aFailed))
          return false;
        if (!this.aFailed.equals(that.aFailed))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(exchangeOAuthToken_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      exchangeOAuthToken_result typedOther = (exchangeOAuthToken_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMMismatch()).compareTo(typedOther.isSetMMismatch());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMMismatch()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mMismatch, typedOther.mMismatch);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAUnknown()).compareTo(typedOther.isSetAUnknown());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAUnknown()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aUnknown, typedOther.aUnknown);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAFailed()).compareTo(typedOther.isSetAFailed());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAFailed()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aFailed, typedOther.aFailed);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.success = new Credentials();
              this.success.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // M_MISMATCH
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.mMismatch = new everfeeds.remote.auth.thrift.ex.AuthMethodMismatch();
              this.mMismatch.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // A_UNKNOWN
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.aUnknown = new everfeeds.remote.auth.thrift.ex.AuthSystemUnknown();
              this.aUnknown.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // A_FAILED
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.aFailed = new everfeeds.remote.auth.thrift.ex.AuthFailed();
              this.aFailed.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetMMismatch()) {
        oprot.writeFieldBegin(M_MISMATCH_FIELD_DESC);
        this.mMismatch.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetAUnknown()) {
        oprot.writeFieldBegin(A_UNKNOWN_FIELD_DESC);
        this.aUnknown.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetAFailed()) {
        oprot.writeFieldBegin(A_FAILED_FIELD_DESC);
        this.aFailed.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("exchangeOAuthToken_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mMismatch:");
      if (this.mMismatch == null) {
        sb.append("null");
      } else {
        sb.append(this.mMismatch);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("aUnknown:");
      if (this.aUnknown == null) {
        sb.append("null");
      } else {
        sb.append(this.aUnknown);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("aFailed:");
      if (this.aFailed == null) {
        sb.append("null");
      } else {
        sb.append(this.aFailed);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

}
